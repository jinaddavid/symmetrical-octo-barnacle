{"ast":null,"code":"'use strict';\n\nvar EventSubscription = require(\"./EventSubscription\");\n\nclass EmitterSubscription extends EventSubscription {\n  constructor(emitter, subscriber, listener, context) {\n    super(subscriber);\n    this.emitter = emitter;\n    this.listener = listener;\n    this.context = context;\n  }\n\n  remove() {\n    this.emitter.removeSubscription(this);\n  }\n\n}\n\nmodule.exports = EmitterSubscription;","map":{"version":3,"sources":["/Users/ash/Documents/DevSpace/MobileProject/ReactNative/InProgres/InterView/symmetrical-octo-barnacle/node_modules/react-native/Libraries/vendor/emitter/EmitterSubscription.js"],"names":["EventSubscription","require","EmitterSubscription","constructor","emitter","subscriber","listener","context","remove","removeSubscription","module","exports"],"mappings":"AAUA;;AAEA,IAAMA,iBAAiB,GAAGC,OAAO,uBAAjC;;AAQA,MAAMC,mBAAN,SAAkCF,iBAAlC,CAAoD;AAelDG,EAAAA,WAAW,CACTC,OADS,EAETC,UAFS,EAGTC,QAHS,EAITC,OAJS,EAKT;AACA,UAAMF,UAAN;AACA,SAAKD,OAAL,GAAeA,OAAf;AACA,SAAKE,QAAL,GAAgBA,QAAhB;AACA,SAAKC,OAAL,GAAeA,OAAf;AACD;;AAQDC,EAAAA,MAAM,GAAG;AACP,SAAKJ,OAAL,CAAaK,kBAAb,CAAgC,IAAhC;AACD;;AAnCiD;;AAsCpDC,MAAM,CAACC,OAAP,GAAiBT,mBAAjB","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst EventSubscription = require('./EventSubscription');\n\nimport type EventEmitter from './EventEmitter';\nimport type EventSubscriptionVendor from './EventSubscriptionVendor';\n\n/**\n * EmitterSubscription represents a subscription with listener and context data.\n */\nclass EmitterSubscription extends EventSubscription {\n  emitter: EventEmitter;\n  listener: Function;\n  context: ?Object;\n\n  /**\n   * @param {EventEmitter} emitter - The event emitter that registered this\n   *   subscription\n   * @param {EventSubscriptionVendor} subscriber - The subscriber that controls\n   *   this subscription\n   * @param {function} listener - Function to invoke when the specified event is\n   *   emitted\n   * @param {*} context - Optional context object to use when invoking the\n   *   listener\n   */\n  constructor(\n    emitter: EventEmitter,\n    subscriber: EventSubscriptionVendor,\n    listener: Function,\n    context: ?Object,\n  ) {\n    super(subscriber);\n    this.emitter = emitter;\n    this.listener = listener;\n    this.context = context;\n  }\n\n  /**\n   * Removes this subscription from the emitter that registered it.\n   * Note: we're overriding the `remove()` method of EventSubscription here\n   * but deliberately not calling `super.remove()` as the responsibility\n   * for removing the subscription lies with the EventEmitter.\n   */\n  remove() {\n    this.emitter.removeSubscription(this);\n  }\n}\n\nmodule.exports = EmitterSubscription;\n"]},"metadata":{},"sourceType":"script"}