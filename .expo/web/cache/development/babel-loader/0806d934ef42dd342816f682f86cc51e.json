{"ast":null,"code":"'use strict';\n\nvar invariant = require('fbjs/lib/invariant');\n\nvar levelsMap = {\n  log: 'log',\n  info: 'info',\n  warn: 'warn',\n  error: 'error',\n  fatal: 'error'\n};\nvar warningHandler = null;\nvar RCTLog = {\n  logIfNoNativeHook(level) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    if (typeof global.nativeLoggingHook === 'undefined') {\n      RCTLog.logToConsole(level, ...args);\n    } else {\n      if (warningHandler && level === 'warn') {\n        warningHandler(...args);\n      }\n    }\n  },\n\n  logToConsole(level) {\n    var logFn = levelsMap[level];\n    invariant(logFn, 'Level \"' + level + '\" not one of ' + Object.keys(levelsMap).toString());\n\n    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n\n    console[logFn](...args);\n  },\n\n  setWarningHandler(handler) {\n    warningHandler = handler;\n  }\n\n};\nmodule.exports = RCTLog;","map":{"version":3,"sources":["/Users/ash/Documents/DevSpace/MobileProject/ReactNative/InProgres/InterView/symmetrical-octo-barnacle/node_modules/react-native/Libraries/Utilities/RCTLog.js"],"names":["invariant","require","levelsMap","log","info","warn","error","fatal","warningHandler","RCTLog","logIfNoNativeHook","level","args","global","nativeLoggingHook","logToConsole","logFn","Object","keys","toString","console","setWarningHandler","handler","module","exports"],"mappings":"AAUA;;AAEA,IAAMA,SAAS,GAAGC,OAAO,CAAC,oBAAD,CAAzB;;AAEA,IAAMC,SAAS,GAAG;AAChBC,EAAAA,GAAG,EAAE,KADW;AAEhBC,EAAAA,IAAI,EAAE,MAFU;AAGhBC,EAAAA,IAAI,EAAE,MAHU;AAIhBC,EAAAA,KAAK,EAAE,OAJS;AAKhBC,EAAAA,KAAK,EAAE;AALS,CAAlB;AAQA,IAAIC,cAAqC,GAAG,IAA5C;AAEA,IAAMC,MAAM,GAAG;AAEbC,EAAAA,iBAAiB,CAACC,KAAD,EAA2C;AAAA,sCAAxBC,IAAwB;AAAxBA,MAAAA,IAAwB;AAAA;;AAE1D,QAAI,OAAOC,MAAM,CAACC,iBAAd,KAAoC,WAAxC,EAAqD;AACnDL,MAAAA,MAAM,CAACM,YAAP,CAAoBJ,KAApB,EAA2B,GAAGC,IAA9B;AACD,KAFD,MAEO;AAEL,UAAIJ,cAAc,IAAIG,KAAK,KAAK,MAAhC,EAAwC;AACtCH,QAAAA,cAAc,CAAC,GAAGI,IAAJ,CAAd;AACD;AACF;AACF,GAZY;;AAebG,EAAAA,YAAY,CAACJ,KAAD,EAA2C;AACrD,QAAMK,KAAK,GAAGd,SAAS,CAACS,KAAD,CAAvB;AACAX,IAAAA,SAAS,CACPgB,KADO,EAEP,YAAYL,KAAZ,GAAoB,eAApB,GAAsCM,MAAM,CAACC,IAAP,CAAYhB,SAAZ,EAAuBiB,QAAvB,EAF/B,CAAT;;AAFqD,uCAAxBP,IAAwB;AAAxBA,MAAAA,IAAwB;AAAA;;AAOrDQ,IAAAA,OAAO,CAACJ,KAAD,CAAP,CAAe,GAAGJ,IAAlB;AACD,GAvBY;;AAyBbS,EAAAA,iBAAiB,CAACC,OAAD,EAAuC;AACtDd,IAAAA,cAAc,GAAGc,OAAjB;AACD;;AA3BY,CAAf;AA8BAC,MAAM,CAACC,OAAP,GAAiBf,MAAjB","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst invariant = require('fbjs/lib/invariant');\n\nconst levelsMap = {\n  log: 'log',\n  info: 'info',\n  warn: 'warn',\n  error: 'error',\n  fatal: 'error',\n};\n\nlet warningHandler: ?(Array<any>) => void = null;\n\nconst RCTLog = {\n  // level one of log, info, warn, error, mustfix\n  logIfNoNativeHook(level: string, ...args: Array<any>): void {\n    // We already printed in the native console, so only log here if using a js debugger\n    if (typeof global.nativeLoggingHook === 'undefined') {\n      RCTLog.logToConsole(level, ...args);\n    } else {\n      // Report native warnings to YellowBox\n      if (warningHandler && level === 'warn') {\n        warningHandler(...args);\n      }\n    }\n  },\n\n  // Log to console regardless of nativeLoggingHook\n  logToConsole(level: string, ...args: Array<any>): void {\n    const logFn = levelsMap[level];\n    invariant(\n      logFn,\n      'Level \"' + level + '\" not one of ' + Object.keys(levelsMap).toString(),\n    );\n\n    console[logFn](...args);\n  },\n\n  setWarningHandler(handler: typeof warningHandler): void {\n    warningHandler = handler;\n  },\n};\n\nmodule.exports = RCTLog;\n"]},"metadata":{},"sourceType":"script"}