{"ast":null,"code":"'use strict';\n\nvar AnimatedValue = require(\"./nodes/AnimatedValue\");\n\nvar NativeAnimatedHelper = require(\"./NativeAnimatedHelper\");\n\nvar ReactNative = require(\"../../Renderer/shims/ReactNative\");\n\nvar invariant = require('fbjs/lib/invariant');\n\nvar {\n  shouldUseNativeDriver\n} = require(\"./NativeAnimatedHelper\");\n\nfunction attachNativeEvent(viewRef, eventName, argMapping) {\n  var eventMappings = [];\n\n  var traverse = (value, path) => {\n    if (value instanceof AnimatedValue) {\n      value.__makeNative();\n\n      eventMappings.push({\n        nativeEventPath: path,\n        animatedValueTag: value.__getNativeTag()\n      });\n    } else if (typeof value === 'object') {\n      for (var _key in value) {\n        traverse(value[_key], path.concat(_key));\n      }\n    }\n  };\n\n  invariant(argMapping[0] && argMapping[0].nativeEvent, 'Native driven events only support animated values contained inside `nativeEvent`.');\n  traverse(argMapping[0].nativeEvent, []);\n  var viewTag = ReactNative.findNodeHandle(viewRef);\n  eventMappings.forEach(mapping => {\n    NativeAnimatedHelper.API.addAnimatedEventToView(viewTag, eventName, mapping);\n  });\n  return {\n    detach() {\n      eventMappings.forEach(mapping => {\n        NativeAnimatedHelper.API.removeAnimatedEventFromView(viewTag, eventName, mapping.animatedValueTag);\n      });\n    }\n\n  };\n}\n\nclass AnimatedEvent {\n  constructor(argMapping) {\n    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this._listeners = [];\n    this._argMapping = argMapping;\n\n    if (config.listener) {\n      this.__addListener(config.listener);\n    }\n\n    this._callListeners = this._callListeners.bind(this);\n    this._attachedEvent = null;\n    this.__isNative = shouldUseNativeDriver(config);\n\n    if (__DEV__) {\n      this._validateMapping();\n    }\n  }\n\n  __addListener(callback) {\n    this._listeners.push(callback);\n  }\n\n  __removeListener(callback) {\n    this._listeners = this._listeners.filter(listener => listener !== callback);\n  }\n\n  __attach(viewRef, eventName) {\n    invariant(this.__isNative, 'Only native driven events need to be attached.');\n    this._attachedEvent = attachNativeEvent(viewRef, eventName, this._argMapping);\n  }\n\n  __detach(viewTag, eventName) {\n    invariant(this.__isNative, 'Only native driven events need to be detached.');\n    this._attachedEvent && this._attachedEvent.detach();\n  }\n\n  __getHandler() {\n    var _this = this;\n\n    if (this.__isNative) {\n      return this._callListeners;\n    }\n\n    return function () {\n      for (var _len = arguments.length, args = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      var traverse = (recMapping, recEvt, key) => {\n        if (typeof recEvt === 'number' && recMapping instanceof AnimatedValue) {\n          recMapping.setValue(recEvt);\n        } else if (typeof recMapping === 'object') {\n          for (var mappingKey in recMapping) {\n            traverse(recMapping[mappingKey], recEvt[mappingKey], mappingKey);\n          }\n        }\n      };\n\n      if (!_this.__isNative) {\n        _this._argMapping.forEach((mapping, idx) => {\n          traverse(mapping, args[idx], 'arg' + idx);\n        });\n      }\n\n      _this._callListeners(...args);\n    };\n  }\n\n  _callListeners() {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key3 = 0; _key3 < _len2; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n\n    this._listeners.forEach(listener => listener(...args));\n  }\n\n  _validateMapping() {\n    var traverse = (recMapping, recEvt, key) => {\n      if (typeof recEvt === 'number') {\n        invariant(recMapping instanceof AnimatedValue, 'Bad mapping of type ' + typeof recMapping + ' for key ' + key + ', event value must map to AnimatedValue');\n        return;\n      }\n\n      invariant(typeof recMapping === 'object', 'Bad mapping of type ' + typeof recMapping + ' for key ' + key);\n      invariant(typeof recEvt === 'object', 'Bad event of type ' + typeof recEvt + ' for key ' + key);\n\n      for (var mappingKey in recMapping) {\n        traverse(recMapping[mappingKey], recEvt[mappingKey], mappingKey);\n      }\n    };\n  }\n\n}\n\nmodule.exports = {\n  AnimatedEvent,\n  attachNativeEvent\n};","map":{"version":3,"sources":["/Users/ash/Documents/DevSpace/MobileProject/ReactNative/InProgres/InterView/symmetrical-octo-barnacle/node_modules/react-native/Libraries/Animated/src/AnimatedEvent.js"],"names":["AnimatedValue","require","NativeAnimatedHelper","ReactNative","invariant","shouldUseNativeDriver","attachNativeEvent","viewRef","eventName","argMapping","eventMappings","traverse","value","path","__makeNative","push","nativeEventPath","animatedValueTag","__getNativeTag","key","concat","nativeEvent","viewTag","findNodeHandle","forEach","mapping","API","addAnimatedEventToView","detach","removeAnimatedEventFromView","AnimatedEvent","constructor","config","_listeners","_argMapping","listener","__addListener","_callListeners","bind","_attachedEvent","__isNative","__DEV__","_validateMapping","callback","__removeListener","filter","__attach","__detach","__getHandler","args","recMapping","recEvt","setValue","mappingKey","idx","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n'use strict';\n\nconst AnimatedValue = require('./nodes/AnimatedValue');\nconst NativeAnimatedHelper = require('./NativeAnimatedHelper');\nconst ReactNative = require('../../Renderer/shims/ReactNative');\n\nconst invariant = require('fbjs/lib/invariant');\nconst {shouldUseNativeDriver} = require('./NativeAnimatedHelper');\n\nexport type Mapping = {[key: string]: Mapping} | AnimatedValue;\nexport type EventConfig = {\n  listener?: ?Function,\n  useNativeDriver?: boolean,\n};\n\nfunction attachNativeEvent(\n  viewRef: any,\n  eventName: string,\n  argMapping: Array<?Mapping>,\n) {\n  // Find animated values in `argMapping` and create an array representing their\n  // key path inside the `nativeEvent` object. Ex.: ['contentOffset', 'x'].\n  const eventMappings = [];\n\n  const traverse = (value, path) => {\n    if (value instanceof AnimatedValue) {\n      value.__makeNative();\n\n      eventMappings.push({\n        nativeEventPath: path,\n        animatedValueTag: value.__getNativeTag(),\n      });\n    } else if (typeof value === 'object') {\n      for (const key in value) {\n        traverse(value[key], path.concat(key));\n      }\n    }\n  };\n\n  invariant(\n    argMapping[0] && argMapping[0].nativeEvent,\n    'Native driven events only support animated values contained inside `nativeEvent`.',\n  );\n\n  // Assume that the event containing `nativeEvent` is always the first argument.\n  traverse(argMapping[0].nativeEvent, []);\n\n  const viewTag = ReactNative.findNodeHandle(viewRef);\n\n  eventMappings.forEach(mapping => {\n    NativeAnimatedHelper.API.addAnimatedEventToView(\n      viewTag,\n      eventName,\n      mapping,\n    );\n  });\n\n  return {\n    detach() {\n      eventMappings.forEach(mapping => {\n        NativeAnimatedHelper.API.removeAnimatedEventFromView(\n          viewTag,\n          eventName,\n          mapping.animatedValueTag,\n        );\n      });\n    },\n  };\n}\n\nclass AnimatedEvent {\n  _argMapping: Array<?Mapping>;\n  _listeners: Array<Function> = [];\n  _callListeners: Function;\n  _attachedEvent: ?{\n    detach: () => void,\n  };\n  __isNative: boolean;\n\n  constructor(argMapping: Array<?Mapping>, config?: EventConfig = {}) {\n    this._argMapping = argMapping;\n    if (config.listener) {\n      this.__addListener(config.listener);\n    }\n    this._callListeners = this._callListeners.bind(this);\n    this._attachedEvent = null;\n    this.__isNative = shouldUseNativeDriver(config);\n\n    if (__DEV__) {\n      this._validateMapping();\n    }\n  }\n\n  __addListener(callback: Function): void {\n    this._listeners.push(callback);\n  }\n\n  __removeListener(callback: Function): void {\n    this._listeners = this._listeners.filter(listener => listener !== callback);\n  }\n\n  __attach(viewRef: any, eventName: string) {\n    invariant(\n      this.__isNative,\n      'Only native driven events need to be attached.',\n    );\n\n    this._attachedEvent = attachNativeEvent(\n      viewRef,\n      eventName,\n      this._argMapping,\n    );\n  }\n\n  __detach(viewTag: any, eventName: string) {\n    invariant(\n      this.__isNative,\n      'Only native driven events need to be detached.',\n    );\n\n    this._attachedEvent && this._attachedEvent.detach();\n  }\n\n  __getHandler() {\n    if (this.__isNative) {\n      return this._callListeners;\n    }\n\n    return (...args: any) => {\n      const traverse = (recMapping, recEvt, key) => {\n        if (typeof recEvt === 'number' && recMapping instanceof AnimatedValue) {\n          recMapping.setValue(recEvt);\n        } else if (typeof recMapping === 'object') {\n          for (const mappingKey in recMapping) {\n            /* $FlowFixMe(>=0.53.0 site=react_native_fb,react_native_oss) This\n             * comment suppresses an error when upgrading Flow's support for\n             * React. To see the error delete this comment and run Flow. */\n            traverse(recMapping[mappingKey], recEvt[mappingKey], mappingKey);\n          }\n        }\n      };\n\n      if (!this.__isNative) {\n        this._argMapping.forEach((mapping, idx) => {\n          traverse(mapping, args[idx], 'arg' + idx);\n        });\n      }\n      this._callListeners(...args);\n    };\n  }\n\n  _callListeners(...args) {\n    this._listeners.forEach(listener => listener(...args));\n  }\n\n  _validateMapping() {\n    const traverse = (recMapping, recEvt, key) => {\n      if (typeof recEvt === 'number') {\n        invariant(\n          recMapping instanceof AnimatedValue,\n          'Bad mapping of type ' +\n            typeof recMapping +\n            ' for key ' +\n            key +\n            ', event value must map to AnimatedValue',\n        );\n        return;\n      }\n      invariant(\n        typeof recMapping === 'object',\n        'Bad mapping of type ' + typeof recMapping + ' for key ' + key,\n      );\n      invariant(\n        typeof recEvt === 'object',\n        'Bad event of type ' + typeof recEvt + ' for key ' + key,\n      );\n      for (const mappingKey in recMapping) {\n        traverse(recMapping[mappingKey], recEvt[mappingKey], mappingKey);\n      }\n    };\n  }\n}\n\nmodule.exports = {AnimatedEvent, attachNativeEvent};\n"]},"metadata":{},"sourceType":"script"}