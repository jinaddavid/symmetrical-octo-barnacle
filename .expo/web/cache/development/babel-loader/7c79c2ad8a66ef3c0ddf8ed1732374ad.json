{"ast":null,"code":"'use strict';\n\nvar PixelRatio = require(\"../Utilities/PixelRatio\");\n\nvar Platform = require(\"../Utilities/Platform\");\n\nvar assetPathUtils = require(\"../../local-cli/bundle/assetPathUtils\");\n\nvar invariant = require('fbjs/lib/invariant');\n\nfunction getScaledAssetPath(asset) {\n  var scale = AssetSourceResolver.pickScale(asset.scales, PixelRatio.get());\n  var scaleSuffix = scale === 1 ? '' : '@' + scale + 'x';\n  var assetDir = assetPathUtils.getBasePath(asset);\n  return assetDir + '/' + asset.name + scaleSuffix + '.' + asset.type;\n}\n\nfunction getAssetPathInDrawableFolder(asset) {\n  var scale = AssetSourceResolver.pickScale(asset.scales, PixelRatio.get());\n  var drawbleFolder = assetPathUtils.getAndroidResourceFolderName(asset, scale);\n  var fileName = assetPathUtils.getAndroidResourceIdentifier(asset);\n  return drawbleFolder + '/' + fileName + '.' + asset.type;\n}\n\nclass AssetSourceResolver {\n  constructor(serverUrl, jsbundleUrl, asset) {\n    this.serverUrl = serverUrl;\n    this.jsbundleUrl = jsbundleUrl;\n    this.asset = asset;\n  }\n\n  isLoadedFromServer() {\n    return !!this.serverUrl;\n  }\n\n  isLoadedFromFileSystem() {\n    return !!(this.jsbundleUrl && this.jsbundleUrl.startsWith('file://'));\n  }\n\n  defaultAsset() {\n    if (this.isLoadedFromServer()) {\n      return this.assetServerURL();\n    }\n\n    if (Platform.OS === 'android') {\n      return this.isLoadedFromFileSystem() ? this.drawableFolderInBundle() : this.resourceIdentifierWithoutScale();\n    } else {\n      return this.scaledAssetURLNearBundle();\n    }\n  }\n\n  assetServerURL() {\n    invariant(!!this.serverUrl, 'need server to load from');\n    return this.fromSource(this.serverUrl + getScaledAssetPath(this.asset) + '?platform=' + Platform.OS + '&hash=' + this.asset.hash);\n  }\n\n  scaledAssetPath() {\n    return this.fromSource(getScaledAssetPath(this.asset));\n  }\n\n  scaledAssetURLNearBundle() {\n    var path = this.jsbundleUrl || 'file://';\n    return this.fromSource(path + getScaledAssetPath(this.asset));\n  }\n\n  resourceIdentifierWithoutScale() {\n    invariant(Platform.OS === 'android', 'resource identifiers work on Android');\n    return this.fromSource(assetPathUtils.getAndroidResourceIdentifier(this.asset));\n  }\n\n  drawableFolderInBundle() {\n    var path = this.jsbundleUrl || 'file://';\n    return this.fromSource(path + getAssetPathInDrawableFolder(this.asset));\n  }\n\n  fromSource(source) {\n    return {\n      __packager_asset: true,\n      width: this.asset.width,\n      height: this.asset.height,\n      uri: source,\n      scale: AssetSourceResolver.pickScale(this.asset.scales, PixelRatio.get())\n    };\n  }\n\n  static pickScale(scales, deviceScale) {\n    for (var i = 0; i < scales.length; i++) {\n      if (scales[i] >= deviceScale) {\n        return scales[i];\n      }\n    }\n\n    return scales[scales.length - 1] || 1;\n  }\n\n}\n\nmodule.exports = AssetSourceResolver;","map":{"version":3,"sources":["/Users/ash/Documents/DevSpace/MobileProject/ReactNative/InProgres/InterView/symmetrical-octo-barnacle/node_modules/react-native/Libraries/Image/AssetSourceResolver.js"],"names":["PixelRatio","require","Platform","assetPathUtils","invariant","getScaledAssetPath","asset","scale","AssetSourceResolver","pickScale","scales","get","scaleSuffix","assetDir","getBasePath","name","type","getAssetPathInDrawableFolder","drawbleFolder","getAndroidResourceFolderName","fileName","getAndroidResourceIdentifier","constructor","serverUrl","jsbundleUrl","isLoadedFromServer","isLoadedFromFileSystem","startsWith","defaultAsset","assetServerURL","OS","drawableFolderInBundle","resourceIdentifierWithoutScale","scaledAssetURLNearBundle","fromSource","hash","scaledAssetPath","path","source","__packager_asset","width","height","uri","deviceScale","i","length","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n'use strict';\n\nexport type ResolvedAssetSource = {|\n  +__packager_asset: boolean,\n  +width: ?number,\n  +height: ?number,\n  +uri: string,\n  +scale: number,\n|};\n\nimport type {PackagerAsset} from './AssetRegistry';\n\nconst PixelRatio = require('../Utilities/PixelRatio');\nconst Platform = require('../Utilities/Platform');\n\nconst assetPathUtils = require('../../local-cli/bundle/assetPathUtils');\nconst invariant = require('fbjs/lib/invariant');\n\n/**\n * Returns a path like 'assets/AwesomeModule/icon@2x.png'\n */\nfunction getScaledAssetPath(asset): string {\n  const scale = AssetSourceResolver.pickScale(asset.scales, PixelRatio.get());\n  const scaleSuffix = scale === 1 ? '' : '@' + scale + 'x';\n  const assetDir = assetPathUtils.getBasePath(asset);\n  return assetDir + '/' + asset.name + scaleSuffix + '.' + asset.type;\n}\n\n/**\n * Returns a path like 'drawable-mdpi/icon.png'\n */\nfunction getAssetPathInDrawableFolder(asset): string {\n  const scale = AssetSourceResolver.pickScale(asset.scales, PixelRatio.get());\n  const drawbleFolder = assetPathUtils.getAndroidResourceFolderName(\n    asset,\n    scale,\n  );\n  const fileName = assetPathUtils.getAndroidResourceIdentifier(asset);\n  return drawbleFolder + '/' + fileName + '.' + asset.type;\n}\n\nclass AssetSourceResolver {\n  serverUrl: ?string;\n  // where the jsbundle is being run from\n  jsbundleUrl: ?string;\n  // the asset to resolve\n  asset: PackagerAsset;\n\n  constructor(serverUrl: ?string, jsbundleUrl: ?string, asset: PackagerAsset) {\n    this.serverUrl = serverUrl;\n    this.jsbundleUrl = jsbundleUrl;\n    this.asset = asset;\n  }\n\n  isLoadedFromServer(): boolean {\n    return !!this.serverUrl;\n  }\n\n  isLoadedFromFileSystem(): boolean {\n    return !!(this.jsbundleUrl && this.jsbundleUrl.startsWith('file://'));\n  }\n\n  defaultAsset(): ResolvedAssetSource {\n    if (this.isLoadedFromServer()) {\n      return this.assetServerURL();\n    }\n\n    if (Platform.OS === 'android') {\n      return this.isLoadedFromFileSystem()\n        ? this.drawableFolderInBundle()\n        : this.resourceIdentifierWithoutScale();\n    } else {\n      return this.scaledAssetURLNearBundle();\n    }\n  }\n\n  /**\n   * Returns an absolute URL which can be used to fetch the asset\n   * from the devserver\n   */\n  assetServerURL(): ResolvedAssetSource {\n    invariant(!!this.serverUrl, 'need server to load from');\n    return this.fromSource(\n      this.serverUrl +\n        getScaledAssetPath(this.asset) +\n        '?platform=' +\n        Platform.OS +\n        '&hash=' +\n        this.asset.hash,\n    );\n  }\n\n  /**\n   * Resolves to just the scaled asset filename\n   * E.g. 'assets/AwesomeModule/icon@2x.png'\n   */\n  scaledAssetPath(): ResolvedAssetSource {\n    return this.fromSource(getScaledAssetPath(this.asset));\n  }\n\n  /**\n   * Resolves to where the bundle is running from, with a scaled asset filename\n   * E.g. 'file:///sdcard/bundle/assets/AwesomeModule/icon@2x.png'\n   */\n  scaledAssetURLNearBundle(): ResolvedAssetSource {\n    const path = this.jsbundleUrl || 'file://';\n    return this.fromSource(path + getScaledAssetPath(this.asset));\n  }\n\n  /**\n   * The default location of assets bundled with the app, located by\n   * resource identifier\n   * The Android resource system picks the correct scale.\n   * E.g. 'assets_awesomemodule_icon'\n   */\n  resourceIdentifierWithoutScale(): ResolvedAssetSource {\n    invariant(\n      Platform.OS === 'android',\n      'resource identifiers work on Android',\n    );\n    return this.fromSource(\n      assetPathUtils.getAndroidResourceIdentifier(this.asset),\n    );\n  }\n\n  /**\n   * If the jsbundle is running from a sideload location, this resolves assets\n   * relative to its location\n   * E.g. 'file:///sdcard/AwesomeModule/drawable-mdpi/icon.png'\n   */\n  drawableFolderInBundle(): ResolvedAssetSource {\n    const path = this.jsbundleUrl || 'file://';\n    return this.fromSource(path + getAssetPathInDrawableFolder(this.asset));\n  }\n\n  fromSource(source: string): ResolvedAssetSource {\n    return {\n      __packager_asset: true,\n      width: this.asset.width,\n      height: this.asset.height,\n      uri: source,\n      scale: AssetSourceResolver.pickScale(this.asset.scales, PixelRatio.get()),\n    };\n  }\n\n  static pickScale(scales: Array<number>, deviceScale: number): number {\n    // Packager guarantees that `scales` array is sorted\n    for (let i = 0; i < scales.length; i++) {\n      if (scales[i] >= deviceScale) {\n        return scales[i];\n      }\n    }\n\n    // If nothing matches, device scale is larger than any available\n    // scales, so we return the biggest one. Unless the array is empty,\n    // in which case we default to 1\n    return scales[scales.length - 1] || 1;\n  }\n}\n\nmodule.exports = AssetSourceResolver;\n"]},"metadata":{},"sourceType":"script"}