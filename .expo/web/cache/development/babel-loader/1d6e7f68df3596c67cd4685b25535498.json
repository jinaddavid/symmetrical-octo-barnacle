{"ast":null,"code":"var minimalLength = length => text => text.length >= length ? {\n  isValid: true\n} : {\n  isValid: false,\n  message: \"Minimal length is \".concat(length)\n};\n\nvar maximalLength = length => text => text.length <= length ? {\n  isValid: true\n} : {\n  isValid: false,\n  message: \"Maximal length is \".concat(length)\n};\n\nvar emailRegexp = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\nvar correctEmail = text => emailRegexp.test(text.toLowerCase()) ? {\n  isValid: true\n} : {\n  isValid: false,\n  message: 'Not a valid email'\n};\n\nexport default {\n  maximalLength,\n  minimalLength,\n  correctEmail\n};","map":{"version":3,"sources":["/Users/ash/Documents/DevSpace/MobileProject/ReactNative/InProgres/InterView/symmetrical-octo-barnacle/model/Validators.js"],"names":["minimalLength","length","text","isValid","message","maximalLength","emailRegexp","correctEmail","test","toLowerCase"],"mappings":"AAAA,IAAMA,aAAa,GAAGC,MAAM,IAAIC,IAAI,IAAKA,IAAI,CAACD,MAAL,IAAeA,MAAf,GACrC;AAAEE,EAAAA,OAAO,EAAE;AAAX,CADqC,GAErC;AAAEA,EAAAA,OAAO,EAAE,KAAX;AAAkBC,EAAAA,OAAO,8BAAuBH,MAAvB;AAAzB,CAFJ;;AAIA,IAAMI,aAAa,GAAGJ,MAAM,IAAIC,IAAI,IAAKA,IAAI,CAACD,MAAL,IAAeA,MAAf,GACrC;AAAEE,EAAAA,OAAO,EAAE;AAAX,CADqC,GAErC;AAAEA,EAAAA,OAAO,EAAE,KAAX;AAAkBC,EAAAA,OAAO,8BAAuBH,MAAvB;AAAzB,CAFJ;;AAIA,IAAMK,WAAW,GAAG,yJAApB;;AAEA,IAAMC,YAAY,GAAGL,IAAI,IAAKI,WAAW,CAACE,IAAZ,CAAiBN,IAAI,CAACO,WAAL,EAAjB,IAC1B;AAAEN,EAAAA,OAAO,EAAE;AAAX,CAD0B,GAE1B;AAAEA,EAAAA,OAAO,EAAE,KAAX;AAAkBC,EAAAA,OAAO,EAAE;AAA3B,CAFJ;;AAIA,eAAe;AAAEC,EAAAA,aAAF;AAAiBL,EAAAA,aAAjB;AAAgCO,EAAAA;AAAhC,CAAf","sourcesContent":["const minimalLength = length => text => (text.length >= length\n  ? { isValid: true }\n  : { isValid: false, message: `Minimal length is ${length}` });\n\nconst maximalLength = length => text => (text.length <= length\n  ? { isValid: true }\n  : { isValid: false, message: `Maximal length is ${length}` });\n\nconst emailRegexp = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\nconst correctEmail = text => (emailRegexp.test(text.toLowerCase())\n  ? { isValid: true }\n  : { isValid: false, message: 'Not a valid email' });\n\nexport default { maximalLength, minimalLength, correctEmail };\n"]},"metadata":{},"sourceType":"module"}