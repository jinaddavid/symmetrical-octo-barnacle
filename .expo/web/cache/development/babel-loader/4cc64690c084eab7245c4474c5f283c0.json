{"ast":null,"code":"'use strict';\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nvar NativeEventEmitter = require(\"../EventEmitter/NativeEventEmitter\");\n\nvar RCTLocationObserver = require(\"../BatchedBridge/NativeModules\").LocationObserver;\n\nvar invariant = require('fbjs/lib/invariant');\n\nvar logError = require(\"../Utilities/logError\");\n\nvar warning = require('fbjs/lib/warning');\n\nvar LocationEventEmitter = new NativeEventEmitter(RCTLocationObserver);\n\nvar Platform = require(\"../Utilities/Platform\");\n\nvar PermissionsAndroid = require(\"../PermissionsAndroid/PermissionsAndroid\");\n\nvar subscriptions = [];\nvar updatesEnabled = false;\nvar Geolocation = {\n  setRNConfiguration: function setRNConfiguration(config) {\n    if (RCTLocationObserver.setConfiguration) {\n      RCTLocationObserver.setConfiguration(config);\n    }\n  },\n  requestAuthorization: function requestAuthorization() {\n    RCTLocationObserver.requestAuthorization();\n  },\n  getCurrentPosition: function () {\n    var _getCurrentPosition = _asyncToGenerator(function* (geo_success, geo_error, geo_options) {\n      invariant(typeof geo_success === 'function', 'Must provide a valid geo_success callback.');\n      var hasPermission = true;\n\n      if (Platform.OS === 'android' && Platform.Version >= 23) {\n        hasPermission = yield PermissionsAndroid.check(PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION);\n\n        if (!hasPermission) {\n          var status = yield PermissionsAndroid.request(PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION);\n          hasPermission = status === PermissionsAndroid.RESULTS.GRANTED;\n        }\n      }\n\n      if (hasPermission) {\n        RCTLocationObserver.getCurrentPosition(geo_options || {}, geo_success, geo_error || logError);\n      }\n    });\n\n    function getCurrentPosition(_x, _x2, _x3) {\n      return _getCurrentPosition.apply(this, arguments);\n    }\n\n    return getCurrentPosition;\n  }(),\n  watchPosition: function watchPosition(success, error, options) {\n    if (!updatesEnabled) {\n      RCTLocationObserver.startObserving(options || {});\n      updatesEnabled = true;\n    }\n\n    var watchID = subscriptions.length;\n    subscriptions.push([LocationEventEmitter.addListener('geolocationDidChange', success), error ? LocationEventEmitter.addListener('geolocationError', error) : null]);\n    return watchID;\n  },\n  clearWatch: function clearWatch(watchID) {\n    var sub = subscriptions[watchID];\n\n    if (!sub) {\n      return;\n    }\n\n    sub[0].remove();\n    var sub1 = sub[1];\n    sub1 && sub1.remove();\n    subscriptions[watchID] = undefined;\n    var noWatchers = true;\n\n    for (var ii = 0; ii < subscriptions.length; ii++) {\n      if (subscriptions[ii]) {\n        noWatchers = false;\n      }\n    }\n\n    if (noWatchers) {\n      Geolocation.stopObserving();\n    }\n  },\n  stopObserving: function stopObserving() {\n    if (updatesEnabled) {\n      RCTLocationObserver.stopObserving();\n      updatesEnabled = false;\n\n      for (var ii = 0; ii < subscriptions.length; ii++) {\n        var sub = subscriptions[ii];\n\n        if (sub) {\n          warning(false, 'Called stopObserving with existing subscriptions.');\n          sub[0].remove();\n          var sub1 = sub[1];\n          sub1 && sub1.remove();\n        }\n      }\n\n      subscriptions = [];\n    }\n  }\n};\nmodule.exports = Geolocation;","map":{"version":3,"sources":["/Users/ash/Documents/DevSpace/MobileProject/ReactNative/InProgres/InterView/symmetrical-octo-barnacle/node_modules/react-native/Libraries/Geolocation/Geolocation.js"],"names":["NativeEventEmitter","require","RCTLocationObserver","LocationObserver","invariant","logError","warning","LocationEventEmitter","Platform","PermissionsAndroid","subscriptions","updatesEnabled","Geolocation","setRNConfiguration","config","setConfiguration","requestAuthorization","getCurrentPosition","geo_success","geo_error","geo_options","hasPermission","OS","Version","check","PERMISSIONS","ACCESS_FINE_LOCATION","status","request","RESULTS","GRANTED","watchPosition","success","error","options","startObserving","watchID","length","push","addListener","clearWatch","sub","remove","sub1","undefined","noWatchers","ii","stopObserving","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst NativeEventEmitter = require('../EventEmitter/NativeEventEmitter');\nconst RCTLocationObserver = require('../BatchedBridge/NativeModules').LocationObserver;\n\nconst invariant = require('fbjs/lib/invariant');\nconst logError = require('../Utilities/logError');\n/* $FlowFixMe(>=0.54.0 site=react_native_oss) This comment suppresses an error\n * found when Flow v0.54 was deployed. To see the error delete this comment and\n * run Flow. */\nconst warning = require('fbjs/lib/warning');\n\nconst LocationEventEmitter = new NativeEventEmitter(RCTLocationObserver);\n\nconst Platform = require('../Utilities/Platform');\nconst PermissionsAndroid = require('../PermissionsAndroid/PermissionsAndroid');\n\nlet subscriptions = [];\nlet updatesEnabled = false;\n\ntype GeoConfiguration = {\n  skipPermissionRequests: boolean,\n};\n\ntype GeoOptions = {\n  timeout?: number,\n  maximumAge?: number,\n  enableHighAccuracy?: boolean,\n  distanceFilter: number,\n  useSignificantChanges?: boolean,\n};\n\n/**\n * The Geolocation API extends the web spec:\n * https://developer.mozilla.org/en-US/docs/Web/API/Geolocation\n *\n * See https://facebook.github.io/react-native/docs/geolocation.html\n */\nconst Geolocation = {\n  /*\n    * Sets configuration options that will be used in all location requests.\n    *\n    * See https://facebook.github.io/react-native/docs/geolocation.html#setrnconfiguration\n    *\n    */\n  setRNConfiguration: function(config: GeoConfiguration) {\n    if (RCTLocationObserver.setConfiguration) {\n      RCTLocationObserver.setConfiguration(config);\n    }\n  },\n\n  /*\n   * Request suitable Location permission based on the key configured on pList.\n   *\n   * See https://facebook.github.io/react-native/docs/geolocation.html#requestauthorization\n   */\n  requestAuthorization: function() {\n    RCTLocationObserver.requestAuthorization();\n  },\n\n  /*\n   * Invokes the success callback once with the latest location info.\n   *\n   * See https://facebook.github.io/react-native/docs/geolocation.html#getcurrentposition\n   */\n  getCurrentPosition: async function(\n    geo_success: Function,\n    geo_error?: Function,\n    geo_options?: GeoOptions,\n  ) {\n    invariant(\n      typeof geo_success === 'function',\n      'Must provide a valid geo_success callback.',\n    );\n    let hasPermission = true;\n    // Supports Android's new permission model. For Android older devices,\n    // it's always on.\n    if (Platform.OS === 'android' && Platform.Version >= 23) {\n      hasPermission = await PermissionsAndroid.check(\n        PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION,\n      );\n      if (!hasPermission) {\n        const status = await PermissionsAndroid.request(\n          PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION,\n        );\n        hasPermission = status === PermissionsAndroid.RESULTS.GRANTED;\n      }\n    }\n    if (hasPermission) {\n      RCTLocationObserver.getCurrentPosition(\n        geo_options || {},\n        geo_success,\n        geo_error || logError,\n      );\n    }\n  },\n\n  /*\n   * Invokes the success callback whenever the location changes.\n   *\n   * See https://facebook.github.io/react-native/docs/geolocation.html#watchposition\n   */\n  watchPosition: function(\n    success: Function,\n    error?: Function,\n    options?: GeoOptions,\n  ): number {\n    if (!updatesEnabled) {\n      RCTLocationObserver.startObserving(options || {});\n      updatesEnabled = true;\n    }\n    const watchID = subscriptions.length;\n    subscriptions.push([\n      LocationEventEmitter.addListener('geolocationDidChange', success),\n      error\n        ? LocationEventEmitter.addListener('geolocationError', error)\n        : null,\n    ]);\n    return watchID;\n  },\n\n  clearWatch: function(watchID: number) {\n    const sub = subscriptions[watchID];\n    if (!sub) {\n      // Silently exit when the watchID is invalid or already cleared\n      // This is consistent with timers\n      return;\n    }\n\n    sub[0].remove();\n    // array element refinements not yet enabled in Flow\n    const sub1 = sub[1];\n    sub1 && sub1.remove();\n    subscriptions[watchID] = undefined;\n    let noWatchers = true;\n    for (let ii = 0; ii < subscriptions.length; ii++) {\n      if (subscriptions[ii]) {\n        noWatchers = false; // still valid subscriptions\n      }\n    }\n    if (noWatchers) {\n      Geolocation.stopObserving();\n    }\n  },\n\n  stopObserving: function() {\n    if (updatesEnabled) {\n      RCTLocationObserver.stopObserving();\n      updatesEnabled = false;\n      for (let ii = 0; ii < subscriptions.length; ii++) {\n        const sub = subscriptions[ii];\n        if (sub) {\n          warning(false, 'Called stopObserving with existing subscriptions.');\n          sub[0].remove();\n          // array element refinements not yet enabled in Flow\n          const sub1 = sub[1];\n          sub1 && sub1.remove();\n        }\n      }\n      subscriptions = [];\n    }\n  },\n};\n\nmodule.exports = Geolocation;\n"]},"metadata":{},"sourceType":"script"}