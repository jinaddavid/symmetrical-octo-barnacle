{"ast":null,"code":"'use strict';\n\nvar EmitterSubscription = require(\"./EmitterSubscription\");\n\nvar EventSubscriptionVendor = require(\"./EventSubscriptionVendor\");\n\nvar emptyFunction = require('fbjs/lib/emptyFunction');\n\nvar invariant = require('fbjs/lib/invariant');\n\nclass EventEmitter {\n  constructor(subscriber) {\n    this._subscriber = subscriber || new EventSubscriptionVendor();\n  }\n\n  addListener(eventType, listener, context) {\n    return this._subscriber.addSubscription(eventType, new EmitterSubscription(this, this._subscriber, listener, context));\n  }\n\n  once(eventType, listener, context) {\n    var _this = this;\n\n    return this.addListener(eventType, function () {\n      _this.removeCurrentListener();\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      listener.apply(context, args);\n    });\n  }\n\n  removeAllListeners(eventType) {\n    this._subscriber.removeAllSubscriptions(eventType);\n  }\n\n  removeCurrentListener() {\n    invariant(!!this._currentSubscription, 'Not in an emitting cycle; there is no current subscription');\n    this.removeSubscription(this._currentSubscription);\n  }\n\n  removeSubscription(subscription) {\n    invariant(subscription.emitter === this, 'Subscription does not belong to this emitter.');\n\n    this._subscriber.removeSubscription(subscription);\n  }\n\n  listeners(eventType) {\n    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n\n    return subscriptions ? subscriptions.filter(emptyFunction.thatReturnsTrue).map(function (subscription) {\n      return subscription.listener;\n    }) : [];\n  }\n\n  emit(eventType) {\n    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n\n    if (subscriptions) {\n      for (var i = 0, l = subscriptions.length; i < l; i++) {\n        var subscription = subscriptions[i];\n\n        if (subscription) {\n          this._currentSubscription = subscription;\n          subscription.listener.apply(subscription.context, Array.prototype.slice.call(arguments, 1));\n        }\n      }\n\n      this._currentSubscription = null;\n    }\n  }\n\n  removeListener(eventType, listener) {\n    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n\n    if (subscriptions) {\n      for (var i = 0, l = subscriptions.length; i < l; i++) {\n        var subscription = subscriptions[i];\n\n        if (subscription && subscription.listener === listener) {\n          subscription.remove();\n        }\n      }\n    }\n  }\n\n}\n\nmodule.exports = EventEmitter;","map":{"version":3,"sources":["/Users/ash/Documents/DevSpace/MobileProject/ReactNative/InProgres/InterView/symmetrical-octo-barnacle/node_modules/react-native/Libraries/vendor/emitter/EventEmitter.js"],"names":["EmitterSubscription","require","EventSubscriptionVendor","emptyFunction","invariant","EventEmitter","constructor","subscriber","_subscriber","addListener","eventType","listener","context","addSubscription","once","removeCurrentListener","args","apply","removeAllListeners","removeAllSubscriptions","_currentSubscription","removeSubscription","subscription","emitter","listeners","subscriptions","getSubscriptionsForType","filter","thatReturnsTrue","map","emit","i","l","length","Array","prototype","slice","call","arguments","removeListener","remove","module","exports"],"mappings":"AAWA;;AAEA,IAAMA,mBAAmB,GAAGC,OAAO,yBAAnC;;AACA,IAAMC,uBAAuB,GAAGD,OAAO,6BAAvC;;AAEA,IAAME,aAAa,GAAGF,OAAO,CAAC,wBAAD,CAA7B;;AACA,IAAMG,SAAS,GAAGH,OAAO,CAAC,oBAAD,CAAzB;;AAeA,MAAMI,YAAN,CAAmB;AAUjBC,EAAAA,WAAW,CAACC,UAAD,EAAuC;AAChD,SAAKC,WAAL,GAAmBD,UAAU,IAAI,IAAIL,uBAAJ,EAAjC;AACD;;AAgBDO,EAAAA,WAAW,CACTC,SADS,EAETC,QAFS,EAGTC,OAHS,EAIY;AACrB,WAAQ,KAAKJ,WAAL,CAAiBK,eAAjB,CACNH,SADM,EAEN,IAAIV,mBAAJ,CAAwB,IAAxB,EAA8B,KAAKQ,WAAnC,EAAgDG,QAAhD,EAA0DC,OAA1D,CAFM,CAAR;AAID;;AAYDE,EAAAA,IAAI,CACFJ,SADE,EAEFC,QAFE,EAGFC,OAHE,EAImB;AAAA;;AACrB,WAAO,KAAKH,WAAL,CAAiBC,SAAjB,EAA4B,YAAa;AAC9C,MAAA,KAAI,CAACK,qBAAL;;AAD8C,wCAATC,IAAS;AAATA,QAAAA,IAAS;AAAA;;AAE9CL,MAAAA,QAAQ,CAACM,KAAT,CAAeL,OAAf,EAAwBI,IAAxB;AACD,KAHM,CAAP;AAID;;AASDE,EAAAA,kBAAkB,CAACR,SAAD,EAAqB;AACrC,SAAKF,WAAL,CAAiBW,sBAAjB,CAAwCT,SAAxC;AACD;;AAuBDK,EAAAA,qBAAqB,GAAG;AACtBX,IAAAA,SAAS,CACP,CAAC,CAAC,KAAKgB,oBADA,EAEP,4DAFO,CAAT;AAIA,SAAKC,kBAAL,CAAwB,KAAKD,oBAA7B;AACD;;AAMDC,EAAAA,kBAAkB,CAACC,YAAD,EAAoC;AACpDlB,IAAAA,SAAS,CACPkB,YAAY,CAACC,OAAb,KAAyB,IADlB,EAEP,+CAFO,CAAT;;AAIA,SAAKf,WAAL,CAAiBa,kBAAjB,CAAoCC,YAApC;AACD;;AASDE,EAAAA,SAAS,CAACd,SAAD,EAA2C;AAClD,QAAMe,aAEL,GAAI,KAAKjB,WAAL,CAAiBkB,uBAAjB,CAAyChB,SAAzC,CAFL;;AAGA,WAAOe,aAAa,GAChBA,aAAa,CACVE,MADH,CACUxB,aAAa,CAACyB,eADxB,EAEGC,GAFH,CAEO,UAASP,YAAT,EAAuB;AAC1B,aAAOA,YAAY,CAACX,QAApB;AACD,KAJH,CADgB,GAMhB,EANJ;AAOD;;AAgBDmB,EAAAA,IAAI,CAACpB,SAAD,EAAoB;AACtB,QAAMe,aAEL,GAAI,KAAKjB,WAAL,CAAiBkB,uBAAjB,CAAyChB,SAAzC,CAFL;;AAGA,QAAIe,aAAJ,EAAmB;AACjB,WAAK,IAAIM,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGP,aAAa,CAACQ,MAAlC,EAA0CF,CAAC,GAAGC,CAA9C,EAAiDD,CAAC,EAAlD,EAAsD;AACpD,YAAMT,YAAY,GAAGG,aAAa,CAACM,CAAD,CAAlC;;AAGA,YAAIT,YAAJ,EAAkB;AAChB,eAAKF,oBAAL,GAA4BE,YAA5B;AACAA,UAAAA,YAAY,CAACX,QAAb,CAAsBM,KAAtB,CACEK,YAAY,CAACV,OADf,EAEEsB,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BC,SAA3B,EAAsC,CAAtC,CAFF;AAID;AACF;;AACD,WAAKlB,oBAAL,GAA4B,IAA5B;AACD;AACF;;AAeDmB,EAAAA,cAAc,CAAC7B,SAAD,EAAoBC,QAApB,EAA8B;AAC1C,QAAMc,aAEL,GAAI,KAAKjB,WAAL,CAAiBkB,uBAAjB,CAAyChB,SAAzC,CAFL;;AAGA,QAAIe,aAAJ,EAAmB;AACjB,WAAK,IAAIM,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGP,aAAa,CAACQ,MAAlC,EAA0CF,CAAC,GAAGC,CAA9C,EAAiDD,CAAC,EAAlD,EAAsD;AACpD,YAAMT,YAAY,GAAGG,aAAa,CAACM,CAAD,CAAlC;;AAIA,YAAIT,YAAY,IAAIA,YAAY,CAACX,QAAb,KAA0BA,QAA9C,EAAwD;AACtDW,UAAAA,YAAY,CAACkB,MAAb;AACD;AACF;AACF;AACF;;AAnMgB;;AAsMnBC,MAAM,CAACC,OAAP,GAAiBrC,YAAjB","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @noflow\n * @typecheck\n */\n\n'use strict';\n\nconst EmitterSubscription = require('./EmitterSubscription');\nconst EventSubscriptionVendor = require('./EventSubscriptionVendor');\n\nconst emptyFunction = require('fbjs/lib/emptyFunction');\nconst invariant = require('fbjs/lib/invariant');\n\n/**\n * @class EventEmitter\n * @description\n * An EventEmitter is responsible for managing a set of listeners and publishing\n * events to them when it is told that such events happened. In addition to the\n * data for the given event it also sends a event control object which allows\n * the listeners/handlers to prevent the default behavior of the given event.\n *\n * The emitter is designed to be generic enough to support all the different\n * contexts in which one might want to emit events. It is a simple multicast\n * mechanism on top of which extra functionality can be composed. For example, a\n * more advanced emitter may use an EventHolder and EventFactory.\n */\nclass EventEmitter {\n  _subscriber: EventSubscriptionVendor;\n  _currentSubscription: ?EmitterSubscription;\n\n  /**\n   * @constructor\n   *\n   * @param {EventSubscriptionVendor} subscriber - Optional subscriber instance\n   *   to use. If omitted, a new subscriber will be created for the emitter.\n   */\n  constructor(subscriber: ?EventSubscriptionVendor) {\n    this._subscriber = subscriber || new EventSubscriptionVendor();\n  }\n\n  /**\n   * Adds a listener to be invoked when events of the specified type are\n   * emitted. An optional calling context may be provided. The data arguments\n   * emitted will be passed to the listener function.\n   *\n   * TODO: Annotate the listener arg's type. This is tricky because listeners\n   *       can be invoked with varargs.\n   *\n   * @param {string} eventType - Name of the event to listen to\n   * @param {function} listener - Function to invoke when the specified event is\n   *   emitted\n   * @param {*} context - Optional context object to use when invoking the\n   *   listener\n   */\n  addListener(\n    eventType: string,\n    listener: Function,\n    context: ?Object,\n  ): EmitterSubscription {\n    return (this._subscriber.addSubscription(\n      eventType,\n      new EmitterSubscription(this, this._subscriber, listener, context),\n    ): any);\n  }\n\n  /**\n   * Similar to addListener, except that the listener is removed after it is\n   * invoked once.\n   *\n   * @param {string} eventType - Name of the event to listen to\n   * @param {function} listener - Function to invoke only once when the\n   *   specified event is emitted\n   * @param {*} context - Optional context object to use when invoking the\n   *   listener\n   */\n  once(\n    eventType: string,\n    listener: Function,\n    context: ?Object,\n  ): EmitterSubscription {\n    return this.addListener(eventType, (...args) => {\n      this.removeCurrentListener();\n      listener.apply(context, args);\n    });\n  }\n\n  /**\n   * Removes all of the registered listeners, including those registered as\n   * listener maps.\n   *\n   * @param {?string} eventType - Optional name of the event whose registered\n   *   listeners to remove\n   */\n  removeAllListeners(eventType: ?string) {\n    this._subscriber.removeAllSubscriptions(eventType);\n  }\n\n  /**\n   * Provides an API that can be called during an eventing cycle to remove the\n   * last listener that was invoked. This allows a developer to provide an event\n   * object that can remove the listener (or listener map) during the\n   * invocation.\n   *\n   * If it is called when not inside of an emitting cycle it will throw.\n   *\n   * @throws {Error} When called not during an eventing cycle\n   *\n   * @example\n   *   var subscription = emitter.addListenerMap({\n   *     someEvent: function(data, event) {\n   *       console.log(data);\n   *       emitter.removeCurrentListener();\n   *     }\n   *   });\n   *\n   *   emitter.emit('someEvent', 'abc'); // logs 'abc'\n   *   emitter.emit('someEvent', 'def'); // does not log anything\n   */\n  removeCurrentListener() {\n    invariant(\n      !!this._currentSubscription,\n      'Not in an emitting cycle; there is no current subscription',\n    );\n    this.removeSubscription(this._currentSubscription);\n  }\n\n  /**\n   * Removes a specific subscription. Called by the `remove()` method of the\n   * subscription itself to ensure any necessary cleanup is performed.\n   */\n  removeSubscription(subscription: EmitterSubscription) {\n    invariant(\n      subscription.emitter === this,\n      'Subscription does not belong to this emitter.',\n    );\n    this._subscriber.removeSubscription(subscription);\n  }\n\n  /**\n   * Returns an array of listeners that are currently registered for the given\n   * event.\n   *\n   * @param {string} eventType - Name of the event to query\n   * @returns {array}\n   */\n  listeners(eventType: string): [EmitterSubscription] {\n    const subscriptions: ?[\n      EmitterSubscription,\n    ] = (this._subscriber.getSubscriptionsForType(eventType): any);\n    return subscriptions\n      ? subscriptions\n          .filter(emptyFunction.thatReturnsTrue)\n          .map(function(subscription) {\n            return subscription.listener;\n          })\n      : [];\n  }\n\n  /**\n   * Emits an event of the given type with the given data. All handlers of that\n   * particular type will be notified.\n   *\n   * @param {string} eventType - Name of the event to emit\n   * @param {...*} Arbitrary arguments to be passed to each registered listener\n   *\n   * @example\n   *   emitter.addListener('someEvent', function(message) {\n   *     console.log(message);\n   *   });\n   *\n   *   emitter.emit('someEvent', 'abc'); // logs 'abc'\n   */\n  emit(eventType: string) {\n    const subscriptions: ?[\n      EmitterSubscription,\n    ] = (this._subscriber.getSubscriptionsForType(eventType): any);\n    if (subscriptions) {\n      for (let i = 0, l = subscriptions.length; i < l; i++) {\n        const subscription = subscriptions[i];\n\n        // The subscription may have been removed during this event loop.\n        if (subscription) {\n          this._currentSubscription = subscription;\n          subscription.listener.apply(\n            subscription.context,\n            Array.prototype.slice.call(arguments, 1),\n          );\n        }\n      }\n      this._currentSubscription = null;\n    }\n  }\n\n  /**\n   * Removes the given listener for event of specific type.\n   *\n   * @param {string} eventType - Name of the event to emit\n   * @param {function} listener - Function to invoke when the specified event is\n   *   emitted\n   *\n   * @example\n   *   emitter.removeListener('someEvent', function(message) {\n   *     console.log(message);\n   *   }); // removes the listener if already registered\n   *\n   */\n  removeListener(eventType: String, listener) {\n    const subscriptions: ?[\n      EmitterSubscription,\n    ] = (this._subscriber.getSubscriptionsForType(eventType): any);\n    if (subscriptions) {\n      for (let i = 0, l = subscriptions.length; i < l; i++) {\n        const subscription = subscriptions[i];\n\n        // The subscription may have been removed during this event loop.\n        // its listener matches the listener in method parameters\n        if (subscription && subscription.listener === listener) {\n          subscription.remove();\n        }\n      }\n    }\n  }\n}\n\nmodule.exports = EventEmitter;\n"]},"metadata":{},"sourceType":"script"}