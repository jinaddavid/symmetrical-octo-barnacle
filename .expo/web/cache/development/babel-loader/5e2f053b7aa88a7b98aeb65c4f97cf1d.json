{"ast":null,"code":"'use strict';\n\nvar Map = require(\"./Map\");\n\nvar _shouldPolyfillES6Collection = require(\"./_shouldPolyfillES6Collection\");\n\nvar toIterator = require(\"./toIterator\");\n\nmodule.exports = function (global) {\n  if (!_shouldPolyfillES6Collection('Set')) {\n    return global.Set;\n  }\n\n  class Set {\n    constructor(iterable) {\n      if (this == null || typeof this !== 'object' && typeof this !== 'function') {\n        throw new TypeError('Wrong set object type.');\n      }\n\n      initSet(this);\n\n      if (iterable != null) {\n        var it = toIterator(iterable);\n        var next;\n\n        while (!(next = it.next()).done) {\n          this.add(next.value);\n        }\n      }\n    }\n\n    add(value) {\n      this._map.set(value, value);\n\n      this.size = this._map.size;\n      return this;\n    }\n\n    clear() {\n      initSet(this);\n    }\n\n    delete(value) {\n      var ret = this._map.delete(value);\n\n      this.size = this._map.size;\n      return ret;\n    }\n\n    entries() {\n      return this._map.entries();\n    }\n\n    forEach(callback) {\n      var thisArg = arguments[1];\n\n      var it = this._map.keys();\n\n      var next;\n\n      while (!(next = it.next()).done) {\n        callback.call(thisArg, next.value, next.value, this);\n      }\n    }\n\n    has(value) {\n      return this._map.has(value);\n    }\n\n    values() {\n      return this._map.values();\n    }\n\n  }\n\n  Set.prototype[toIterator.ITERATOR_SYMBOL] = Set.prototype.values;\n  Set.prototype.keys = Set.prototype.values;\n\n  function initSet(set) {\n    set._map = new Map();\n    set.size = set._map.size;\n  }\n\n  return Set;\n}(Function('return this')());","map":{"version":3,"sources":["/Users/ash/Documents/DevSpace/MobileProject/ReactNative/InProgres/InterView/symmetrical-octo-barnacle/node_modules/react-native/Libraries/vendor/core/Set.js"],"names":["Map","require","_shouldPolyfillES6Collection","toIterator","module","exports","global","Set","constructor","iterable","TypeError","initSet","it","next","done","add","value","_map","set","size","clear","delete","ret","entries","forEach","callback","thisArg","arguments","keys","call","has","values","prototype","ITERATOR_SYMBOL","Function"],"mappings":"AAaA;;AAEA,IAAMA,GAAG,GAAGC,OAAO,SAAnB;;AAEA,IAAMC,4BAA4B,GAAGD,OAAO,kCAA5C;;AACA,IAAME,UAAU,GAAGF,OAAO,gBAA1B;;AAEAG,MAAM,CAACC,OAAP,GAAkB,UAASC,MAAT,EAAiB;AAMjC,MAAI,CAACJ,4BAA4B,CAAC,KAAD,CAAjC,EAA0C;AACxC,WAAOI,MAAM,CAACC,GAAd;AACD;;AA2CD,QAAMA,GAAN,CAAU;AAURC,IAAAA,WAAW,CAACC,QAAD,EAAW;AACpB,UACE,QAAQ,IAAR,IACC,OAAO,IAAP,KAAgB,QAAhB,IAA4B,OAAO,IAAP,KAAgB,UAF/C,EAGE;AACA,cAAM,IAAIC,SAAJ,CAAc,wBAAd,CAAN;AACD;;AAEDC,MAAAA,OAAO,CAAC,IAAD,CAAP;;AAEA,UAAIF,QAAQ,IAAI,IAAhB,EAAsB;AACpB,YAAMG,EAAE,GAAGT,UAAU,CAACM,QAAD,CAArB;AACA,YAAII,IAAJ;;AACA,eAAO,CAAC,CAACA,IAAI,GAAGD,EAAE,CAACC,IAAH,EAAR,EAAmBC,IAA3B,EAAiC;AAC/B,eAAKC,GAAL,CAASF,IAAI,CAACG,KAAd;AACD;AACF;AACF;;AAUDD,IAAAA,GAAG,CAACC,KAAD,EAAQ;AACT,WAAKC,IAAL,CAAUC,GAAV,CAAcF,KAAd,EAAqBA,KAArB;;AACA,WAAKG,IAAL,GAAY,KAAKF,IAAL,CAAUE,IAAtB;AACA,aAAO,IAAP;AACD;;AAODC,IAAAA,KAAK,GAAG;AACNT,MAAAA,OAAO,CAAC,IAAD,CAAP;AACD;;AAWDU,IAAAA,MAAM,CAACL,KAAD,EAAQ;AACZ,UAAMM,GAAG,GAAG,KAAKL,IAAL,CAAUI,MAAV,CAAiBL,KAAjB,CAAZ;;AACA,WAAKG,IAAL,GAAY,KAAKF,IAAL,CAAUE,IAAtB;AACA,aAAOG,GAAP;AACD;;AAODC,IAAAA,OAAO,GAAG;AACR,aAAO,KAAKN,IAAL,CAAUM,OAAV,EAAP;AACD;;AASDC,IAAAA,OAAO,CAACC,QAAD,EAAW;AAChB,UAAMC,OAAO,GAAGC,SAAS,CAAC,CAAD,CAAzB;;AACA,UAAMf,EAAE,GAAG,KAAKK,IAAL,CAAUW,IAAV,EAAX;;AACA,UAAIf,IAAJ;;AACA,aAAO,CAAC,CAACA,IAAI,GAAGD,EAAE,CAACC,IAAH,EAAR,EAAmBC,IAA3B,EAAiC;AAC/BW,QAAAA,QAAQ,CAACI,IAAT,CAAcH,OAAd,EAAuBb,IAAI,CAACG,KAA5B,EAAmCH,IAAI,CAACG,KAAxC,EAA+C,IAA/C;AACD;AACF;;AAUDc,IAAAA,GAAG,CAACd,KAAD,EAAQ;AACT,aAAO,KAAKC,IAAL,CAAUa,GAAV,CAAcd,KAAd,CAAP;AACD;;AAODe,IAAAA,MAAM,GAAG;AACP,aAAO,KAAKd,IAAL,CAAUc,MAAV,EAAP;AACD;;AA/GO;;AAmHVxB,EAAAA,GAAG,CAACyB,SAAJ,CAAc7B,UAAU,CAAC8B,eAAzB,IAA4C1B,GAAG,CAACyB,SAAJ,CAAcD,MAA1D;AAGAxB,EAAAA,GAAG,CAACyB,SAAJ,CAAcJ,IAAd,GAAqBrB,GAAG,CAACyB,SAAJ,CAAcD,MAAnC;;AAEA,WAASpB,OAAT,CAAiBO,GAAjB,EAAsB;AACpBA,IAAAA,GAAG,CAACD,IAAJ,GAAW,IAAIjB,GAAJ,EAAX;AACAkB,IAAAA,GAAG,CAACC,IAAJ,GAAWD,GAAG,CAACD,IAAJ,CAASE,IAApB;AACD;;AAED,SAAOZ,GAAP;AACD,CAjLgB,CAiLd2B,QAAQ,CAAC,aAAD,CAAR,EAjLc,CAAjB","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @preventMunge\n * @typechecks\n */\n\n/* eslint-disable no-extend-native */\n\n'use strict';\n\nconst Map = require('./Map');\n\nconst _shouldPolyfillES6Collection = require('./_shouldPolyfillES6Collection');\nconst toIterator = require('./toIterator');\n\nmodule.exports = (function(global) {\n  // Since our implementation is spec-compliant for the most part we can safely\n  // delegate to a built-in version if exists and is implemented correctly.\n  // Firefox had gotten a few implementation details wrong across different\n  // versions so we guard against that.\n  // These checks are adapted from es6-shim https://fburl.com/34437854\n  if (!_shouldPolyfillES6Collection('Set')) {\n    return global.Set;\n  }\n\n  /**\n   * == ES6 Set Collection ==\n   *\n   * This module is meant to implement a Set collection as described in chapter\n   * 23.2 of the ES6 specification.\n   *\n   * Set objects are collections of unique values. Where values can be any\n   * JavaScript value.\n   * https://people.mozilla.org/~jorendorff/es6-draft.html#sec-map-objects\n   *\n   * There only two -- rather small -- diviations from the spec:\n   *\n   * 1. The use of frozen objects as keys. @see Map module for more on this.\n   *\n   * 2. The `size` property on a map object is a regular property and not a\n   *    computed property on the prototype as described by the spec.\n   *    The reason being is that we simply want to support ES3 environments\n   *    which doesn't implement computed properties.\n   *\n   * == Usage ==\n   *\n   * var set = new set(iterable);\n   *\n   * set.set(value);\n   * set.has(value); // true\n   * set.delete(value); // true\n   *\n   * var iterator = set.keys();\n   * iterator.next(); // {value: value, done: false}\n   *\n   * var iterator = set.values();\n   * iterator.next(); // {value: value, done: false}\n   *\n   * var iterator = set.entries();\n   * iterator.next(); // {value: [value, value], done: false}\n   *\n   * set.forEach(function(value, value){ this === thisArg }, thisArg);\n   *\n   * set.clear(); // resets set.\n   */\n\n  class Set {\n    /**\n     * 23.2.1.1\n     *\n     * Takes an optional `iterable` (which is basically any object that\n     * implements a Symbol.iterator (@@iterator) method). That is a collection\n     * of values used to instantiate the set.\n     *\n     * @param {*} iterable\n     */\n    constructor(iterable) {\n      if (\n        this == null ||\n        (typeof this !== 'object' && typeof this !== 'function')\n      ) {\n        throw new TypeError('Wrong set object type.');\n      }\n\n      initSet(this);\n\n      if (iterable != null) {\n        const it = toIterator(iterable);\n        let next;\n        while (!(next = it.next()).done) {\n          this.add(next.value);\n        }\n      }\n    }\n\n    /**\n     * 23.2.3.1\n     *\n     * If it doesn't already exist in the collection a `value` is added.\n     *\n     * @param {*} value\n     * @return {set}\n     */\n    add(value) {\n      this._map.set(value, value);\n      this.size = this._map.size;\n      return this;\n    }\n\n    /**\n     * 23.2.3.2\n     *\n     * Clears the set.\n     */\n    clear() {\n      initSet(this);\n    }\n\n    /**\n     * 23.2.3.4\n     *\n     * Deletes a `value` from the collection if it exists.\n     * Returns true if the value was found and deleted and false otherwise.\n     *\n     * @param {*} value\n     * @return {boolean}\n     */\n    delete(value) {\n      const ret = this._map.delete(value);\n      this.size = this._map.size;\n      return ret;\n    }\n\n    /**\n     * 23.2.3.5\n     *\n     * Returns an iterator over a collection of [value, value] tuples.\n     */\n    entries() {\n      return this._map.entries();\n    }\n\n    /**\n     * 23.2.3.6\n     *\n     * Iterate over the collection calling `callback` with (value, value, set).\n     *\n     * @param {function} callback\n     */\n    forEach(callback) {\n      const thisArg = arguments[1];\n      const it = this._map.keys();\n      let next;\n      while (!(next = it.next()).done) {\n        callback.call(thisArg, next.value, next.value, this);\n      }\n    }\n\n    /**\n     * 23.2.3.7\n     *\n     * Iterate over the collection calling `callback` with (value, value, set).\n     *\n     * @param {*} value\n     * @return {boolean}\n     */\n    has(value) {\n      return this._map.has(value);\n    }\n\n    /**\n     * 23.2.3.7\n     *\n     * Returns an iterator over the colleciton of values.\n     */\n    values() {\n      return this._map.values();\n    }\n  }\n\n  // 23.2.3.11\n  Set.prototype[toIterator.ITERATOR_SYMBOL] = Set.prototype.values;\n\n  // 23.2.3.7\n  Set.prototype.keys = Set.prototype.values;\n\n  function initSet(set) {\n    set._map = new Map();\n    set.size = set._map.size;\n  }\n\n  return Set;\n})(Function('return this')()); // eslint-disable-line no-new-func\n"]},"metadata":{},"sourceType":"script"}