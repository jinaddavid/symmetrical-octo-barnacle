{"ast":null,"code":"'use strict';\n\nvar ErrorUtils = require(\"../vendor/core/ErrorUtils\");\n\nvar Systrace = require(\"../Performance/Systrace\");\n\nvar deepFreezeAndThrowOnMutationInDev = require(\"../Utilities/deepFreezeAndThrowOnMutationInDev\");\n\nvar invariant = require('fbjs/lib/invariant');\n\nvar stringifySafe = require(\"../Utilities/stringifySafe\");\n\nvar TO_JS = 0;\nvar TO_NATIVE = 1;\nvar MODULE_IDS = 0;\nvar METHOD_IDS = 1;\nvar PARAMS = 2;\nvar MIN_TIME_BETWEEN_FLUSHES_MS = 5;\nvar TRACE_TAG_REACT_APPS = 1 << 17;\nvar DEBUG_INFO_LIMIT = 32;\n\nclass MessageQueue {\n  constructor() {\n    this._lazyCallableModules = {};\n    this._queue = [[], [], [], 0];\n    this._successCallbacks = {};\n    this._failureCallbacks = {};\n    this._callID = 0;\n    this._lastFlush = 0;\n    this._eventLoopStartTime = new Date().getTime();\n    this._immediatesCallback = null;\n\n    if (__DEV__) {\n      this._debugInfo = {};\n      this._remoteModuleTable = {};\n      this._remoteMethodTable = {};\n    }\n\n    this.callFunctionReturnFlushedQueue = this.callFunctionReturnFlushedQueue.bind(this);\n    this.callFunctionReturnResultAndFlushedQueue = this.callFunctionReturnResultAndFlushedQueue.bind(this);\n    this.flushedQueue = this.flushedQueue.bind(this);\n    this.invokeCallbackAndReturnFlushedQueue = this.invokeCallbackAndReturnFlushedQueue.bind(this);\n  }\n\n  static spy(spyOrToggle) {\n    if (spyOrToggle === true) {\n      MessageQueue.prototype.__spy = info => {\n        console.log(\"\".concat(info.type === TO_JS ? 'N->JS' : 'JS->N', \" : \") + \"\".concat(info.module ? info.module + '.' : '').concat(info.method) + \"(\".concat(JSON.stringify(info.args), \")\"));\n      };\n    } else if (spyOrToggle === false) {\n      MessageQueue.prototype.__spy = null;\n    } else {\n      MessageQueue.prototype.__spy = spyOrToggle;\n    }\n  }\n\n  callFunctionReturnFlushedQueue(module, method, args) {\n    this.__guard(() => {\n      this.__callFunction(module, method, args);\n    });\n\n    return this.flushedQueue();\n  }\n\n  callFunctionReturnResultAndFlushedQueue(module, method, args) {\n    var result;\n\n    this.__guard(() => {\n      result = this.__callFunction(module, method, args);\n    });\n\n    return [result, this.flushedQueue()];\n  }\n\n  invokeCallbackAndReturnFlushedQueue(cbID, args) {\n    this.__guard(() => {\n      this.__invokeCallback(cbID, args);\n    });\n\n    return this.flushedQueue();\n  }\n\n  flushedQueue() {\n    this.__guard(() => {\n      this.__callImmediates();\n    });\n\n    var queue = this._queue;\n    this._queue = [[], [], [], this._callID];\n    return queue[0].length ? queue : null;\n  }\n\n  getEventLoopRunningTime() {\n    return new Date().getTime() - this._eventLoopStartTime;\n  }\n\n  registerCallableModule(name, module) {\n    this._lazyCallableModules[name] = () => module;\n  }\n\n  registerLazyCallableModule(name, factory) {\n    var module;\n    var getValue = factory;\n\n    this._lazyCallableModules[name] = () => {\n      if (getValue) {\n        module = getValue();\n        getValue = null;\n      }\n\n      return module;\n    };\n  }\n\n  getCallableModule(name) {\n    var getValue = this._lazyCallableModules[name];\n    return getValue ? getValue() : null;\n  }\n\n  enqueueNativeCall(moduleID, methodID, params, onFail, onSucc) {\n    if (onFail || onSucc) {\n      if (__DEV__) {\n        this._debugInfo[this._callID] = [moduleID, methodID];\n\n        if (this._callID > DEBUG_INFO_LIMIT) {\n          delete this._debugInfo[this._callID - DEBUG_INFO_LIMIT];\n        }\n      }\n\n      onFail && params.push(this._callID << 1);\n      onSucc && params.push(this._callID << 1 | 1);\n      this._successCallbacks[this._callID] = onSucc;\n      this._failureCallbacks[this._callID] = onFail;\n    }\n\n    if (__DEV__) {\n      global.nativeTraceBeginAsyncFlow && global.nativeTraceBeginAsyncFlow(TRACE_TAG_REACT_APPS, 'native', this._callID);\n    }\n\n    this._callID++;\n\n    this._queue[MODULE_IDS].push(moduleID);\n\n    this._queue[METHOD_IDS].push(methodID);\n\n    if (__DEV__) {\n      var isValidArgument = val => {\n        var t = typeof val;\n\n        if (t === 'undefined' || t === 'null' || t === 'boolean' || t === 'number' || t === 'string') {\n          return true;\n        }\n\n        if (t === 'function' || t !== 'object') {\n          return false;\n        }\n\n        if (Array.isArray(val)) {\n          return val.every(isValidArgument);\n        }\n\n        for (var k in val) {\n          if (typeof val[k] !== 'function' && !isValidArgument(val[k])) {\n            return false;\n          }\n        }\n\n        return true;\n      };\n\n      invariant(isValidArgument(params), '%s is not usable as a native method argument', params);\n      deepFreezeAndThrowOnMutationInDev(params);\n    }\n\n    this._queue[PARAMS].push(params);\n\n    var now = new Date().getTime();\n\n    if (global.nativeFlushQueueImmediate && now - this._lastFlush >= MIN_TIME_BETWEEN_FLUSHES_MS) {\n      var queue = this._queue;\n      this._queue = [[], [], [], this._callID];\n      this._lastFlush = now;\n      global.nativeFlushQueueImmediate(queue);\n    }\n\n    Systrace.counterEvent('pending_js_to_native_queue', this._queue[0].length);\n\n    if (__DEV__ && this.__spy && isFinite(moduleID)) {\n      this.__spy({\n        type: TO_NATIVE,\n        module: this._remoteModuleTable[moduleID],\n        method: this._remoteMethodTable[moduleID][methodID],\n        args: params\n      });\n    } else if (this.__spy) {\n      this.__spy({\n        type: TO_NATIVE,\n        module: moduleID + '',\n        method: methodID,\n        args: params\n      });\n    }\n  }\n\n  createDebugLookup(moduleID, name, methods) {\n    if (__DEV__) {\n      this._remoteModuleTable[moduleID] = name;\n      this._remoteMethodTable[moduleID] = methods;\n    }\n  }\n\n  setImmediatesCallback(fn) {\n    this._immediatesCallback = fn;\n  }\n\n  __guard(fn) {\n    if (this.__shouldPauseOnThrow()) {\n      fn();\n    } else {\n      try {\n        fn();\n      } catch (error) {\n        ErrorUtils.reportFatalError(error);\n      }\n    }\n  }\n\n  __shouldPauseOnThrow() {\n    return typeof DebuggerInternal !== 'undefined' && DebuggerInternal.shouldPauseOnThrow === true;\n  }\n\n  __callImmediates() {\n    Systrace.beginEvent('JSTimers.callImmediates()');\n\n    if (this._immediatesCallback != null) {\n      this._immediatesCallback();\n    }\n\n    Systrace.endEvent();\n  }\n\n  __callFunction(module, method, args) {\n    this._lastFlush = new Date().getTime();\n    this._eventLoopStartTime = this._lastFlush;\n\n    if (__DEV__ || this.__spy) {\n      Systrace.beginEvent(\"\".concat(module, \".\").concat(method, \"(\").concat(stringifySafe(args), \")\"));\n    } else {\n      Systrace.beginEvent(\"\".concat(module, \".\").concat(method, \"(...)\"));\n    }\n\n    if (this.__spy) {\n      this.__spy({\n        type: TO_JS,\n        module,\n        method,\n        args\n      });\n    }\n\n    var moduleMethods = this.getCallableModule(module);\n    invariant(!!moduleMethods, 'Module %s is not a registered callable module (calling %s)', module, method);\n    invariant(!!moduleMethods[method], 'Method %s does not exist on module %s', method, module);\n    var result = moduleMethods[method].apply(moduleMethods, args);\n    Systrace.endEvent();\n    return result;\n  }\n\n  __invokeCallback(cbID, args) {\n    this._lastFlush = new Date().getTime();\n    this._eventLoopStartTime = this._lastFlush;\n    var callID = cbID >>> 1;\n    var isSuccess = cbID & 1;\n    var callback = isSuccess ? this._successCallbacks[callID] : this._failureCallbacks[callID];\n\n    if (__DEV__) {\n      var debug = this._debugInfo[callID];\n\n      var _module = debug && this._remoteModuleTable[debug[0]];\n\n      var method = debug && this._remoteMethodTable[debug[0]][debug[1]];\n\n      if (!callback) {\n        var errorMessage = \"Callback with id \".concat(cbID, \": \").concat(_module, \".\").concat(method, \"() not found\");\n\n        if (method) {\n          errorMessage = \"The callback \".concat(method, \"() exists in module \").concat(_module, \", \") + 'but only one callback may be registered to a function in a native module.';\n        }\n\n        invariant(callback, errorMessage);\n      }\n\n      var profileName = debug ? '<callback for ' + _module + '.' + method + '>' : cbID;\n\n      if (callback && this.__spy) {\n        this.__spy({\n          type: TO_JS,\n          module: null,\n          method: profileName,\n          args\n        });\n      }\n\n      Systrace.beginEvent(\"MessageQueue.invokeCallback(\".concat(profileName, \", \").concat(stringifySafe(args), \")\"));\n    }\n\n    if (!callback) {\n      return;\n    }\n\n    delete this._successCallbacks[callID];\n    delete this._failureCallbacks[callID];\n    callback(...args);\n\n    if (__DEV__) {\n      Systrace.endEvent();\n    }\n  }\n\n}\n\nmodule.exports = MessageQueue;","map":{"version":3,"sources":["/Users/ash/Documents/DevSpace/MobileProject/ReactNative/InProgres/InterView/symmetrical-octo-barnacle/node_modules/react-native/Libraries/BatchedBridge/MessageQueue.js"],"names":["ErrorUtils","require","Systrace","deepFreezeAndThrowOnMutationInDev","invariant","stringifySafe","TO_JS","TO_NATIVE","MODULE_IDS","METHOD_IDS","PARAMS","MIN_TIME_BETWEEN_FLUSHES_MS","TRACE_TAG_REACT_APPS","DEBUG_INFO_LIMIT","MessageQueue","constructor","_lazyCallableModules","_queue","_successCallbacks","_failureCallbacks","_callID","_lastFlush","_eventLoopStartTime","Date","getTime","_immediatesCallback","__DEV__","_debugInfo","_remoteModuleTable","_remoteMethodTable","callFunctionReturnFlushedQueue","bind","callFunctionReturnResultAndFlushedQueue","flushedQueue","invokeCallbackAndReturnFlushedQueue","spy","spyOrToggle","prototype","__spy","info","console","log","type","module","method","JSON","stringify","args","__guard","__callFunction","result","cbID","__invokeCallback","__callImmediates","queue","length","getEventLoopRunningTime","registerCallableModule","name","registerLazyCallableModule","factory","getValue","getCallableModule","enqueueNativeCall","moduleID","methodID","params","onFail","onSucc","push","global","nativeTraceBeginAsyncFlow","isValidArgument","val","t","Array","isArray","every","k","now","nativeFlushQueueImmediate","counterEvent","isFinite","createDebugLookup","methods","setImmediatesCallback","fn","__shouldPauseOnThrow","error","reportFatalError","DebuggerInternal","shouldPauseOnThrow","beginEvent","endEvent","moduleMethods","apply","callID","isSuccess","callback","debug","errorMessage","profileName","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nconst ErrorUtils = require('../vendor/core/ErrorUtils');\nconst Systrace = require('../Performance/Systrace');\n\nconst deepFreezeAndThrowOnMutationInDev = require('../Utilities/deepFreezeAndThrowOnMutationInDev');\nconst invariant = require('fbjs/lib/invariant');\nconst stringifySafe = require('../Utilities/stringifySafe');\n\nexport type SpyData = {\n  type: number,\n  module: ?string,\n  method: string | number,\n  args: any[],\n};\n\nconst TO_JS = 0;\nconst TO_NATIVE = 1;\n\nconst MODULE_IDS = 0;\nconst METHOD_IDS = 1;\nconst PARAMS = 2;\nconst MIN_TIME_BETWEEN_FLUSHES_MS = 5;\n\n// eslint-disable-next-line no-bitwise\nconst TRACE_TAG_REACT_APPS = 1 << 17;\n\nconst DEBUG_INFO_LIMIT = 32;\n\nclass MessageQueue {\n  _lazyCallableModules: {[key: string]: (void) => Object};\n  _queue: [number[], number[], any[], number];\n  _successCallbacks: {[key: number]: ?Function};\n  _failureCallbacks: {[key: number]: ?Function};\n  _callID: number;\n  _lastFlush: number;\n  _eventLoopStartTime: number;\n  _immediatesCallback: ?() => void;\n\n  _debugInfo: {[number]: [number, number]};\n  _remoteModuleTable: {[number]: string};\n  _remoteMethodTable: {[number]: string[]};\n\n  __spy: ?(data: SpyData) => void;\n\n  constructor() {\n    this._lazyCallableModules = {};\n    this._queue = [[], [], [], 0];\n    this._successCallbacks = {};\n    this._failureCallbacks = {};\n    this._callID = 0;\n    this._lastFlush = 0;\n    this._eventLoopStartTime = new Date().getTime();\n    this._immediatesCallback = null;\n\n    if (__DEV__) {\n      this._debugInfo = {};\n      this._remoteModuleTable = {};\n      this._remoteMethodTable = {};\n    }\n\n    (this: any).callFunctionReturnFlushedQueue = this.callFunctionReturnFlushedQueue.bind(\n      this,\n    );\n    (this: any).callFunctionReturnResultAndFlushedQueue = this.callFunctionReturnResultAndFlushedQueue.bind(\n      this,\n    );\n    (this: any).flushedQueue = this.flushedQueue.bind(this);\n    (this: any).invokeCallbackAndReturnFlushedQueue = this.invokeCallbackAndReturnFlushedQueue.bind(\n      this,\n    );\n  }\n\n  /**\n   * Public APIs\n   */\n\n  static spy(spyOrToggle: boolean | ((data: SpyData) => void)) {\n    if (spyOrToggle === true) {\n      MessageQueue.prototype.__spy = info => {\n        console.log(\n          `${info.type === TO_JS ? 'N->JS' : 'JS->N'} : ` +\n            `${info.module ? info.module + '.' : ''}${info.method}` +\n            `(${JSON.stringify(info.args)})`,\n        );\n      };\n    } else if (spyOrToggle === false) {\n      MessageQueue.prototype.__spy = null;\n    } else {\n      MessageQueue.prototype.__spy = spyOrToggle;\n    }\n  }\n\n  callFunctionReturnFlushedQueue(module: string, method: string, args: any[]) {\n    this.__guard(() => {\n      this.__callFunction(module, method, args);\n    });\n\n    return this.flushedQueue();\n  }\n\n  callFunctionReturnResultAndFlushedQueue(\n    module: string,\n    method: string,\n    args: any[],\n  ) {\n    let result;\n    this.__guard(() => {\n      result = this.__callFunction(module, method, args);\n    });\n\n    return [result, this.flushedQueue()];\n  }\n\n  invokeCallbackAndReturnFlushedQueue(cbID: number, args: any[]) {\n    this.__guard(() => {\n      this.__invokeCallback(cbID, args);\n    });\n\n    return this.flushedQueue();\n  }\n\n  flushedQueue() {\n    this.__guard(() => {\n      this.__callImmediates();\n    });\n\n    const queue = this._queue;\n    this._queue = [[], [], [], this._callID];\n    return queue[0].length ? queue : null;\n  }\n\n  getEventLoopRunningTime() {\n    return new Date().getTime() - this._eventLoopStartTime;\n  }\n\n  registerCallableModule(name: string, module: Object) {\n    this._lazyCallableModules[name] = () => module;\n  }\n\n  registerLazyCallableModule(name: string, factory: void => Object) {\n    let module: Object;\n    let getValue: ?(void) => Object = factory;\n    this._lazyCallableModules[name] = () => {\n      if (getValue) {\n        module = getValue();\n        getValue = null;\n      }\n      return module;\n    };\n  }\n\n  getCallableModule(name: string) {\n    const getValue = this._lazyCallableModules[name];\n    return getValue ? getValue() : null;\n  }\n\n  enqueueNativeCall(\n    moduleID: number,\n    methodID: number,\n    params: any[],\n    onFail: ?Function,\n    onSucc: ?Function,\n  ) {\n    if (onFail || onSucc) {\n      if (__DEV__) {\n        this._debugInfo[this._callID] = [moduleID, methodID];\n        if (this._callID > DEBUG_INFO_LIMIT) {\n          delete this._debugInfo[this._callID - DEBUG_INFO_LIMIT];\n        }\n      }\n      // Encode callIDs into pairs of callback identifiers by shifting left and using the rightmost bit\n      // to indicate fail (0) or success (1)\n      // eslint-disable-next-line no-bitwise\n      onFail && params.push(this._callID << 1);\n      // eslint-disable-next-line no-bitwise\n      onSucc && params.push((this._callID << 1) | 1);\n      this._successCallbacks[this._callID] = onSucc;\n      this._failureCallbacks[this._callID] = onFail;\n    }\n\n    if (__DEV__) {\n      global.nativeTraceBeginAsyncFlow &&\n        global.nativeTraceBeginAsyncFlow(\n          TRACE_TAG_REACT_APPS,\n          'native',\n          this._callID,\n        );\n    }\n    this._callID++;\n\n    this._queue[MODULE_IDS].push(moduleID);\n    this._queue[METHOD_IDS].push(methodID);\n\n    if (__DEV__) {\n      // Validate that parameters passed over the bridge are\n      // folly-convertible.  As a special case, if a prop value is a\n      // function it is permitted here, and special-cased in the\n      // conversion.\n      const isValidArgument = val => {\n        const t = typeof val;\n        if (\n          t === 'undefined' ||\n          t === 'null' ||\n          t === 'boolean' ||\n          t === 'number' ||\n          t === 'string'\n        ) {\n          return true;\n        }\n        if (t === 'function' || t !== 'object') {\n          return false;\n        }\n        if (Array.isArray(val)) {\n          return val.every(isValidArgument);\n        }\n        for (const k in val) {\n          if (typeof val[k] !== 'function' && !isValidArgument(val[k])) {\n            return false;\n          }\n        }\n        return true;\n      };\n\n      invariant(\n        isValidArgument(params),\n        '%s is not usable as a native method argument',\n        params,\n      );\n\n      // The params object should not be mutated after being queued\n      deepFreezeAndThrowOnMutationInDev((params: any));\n    }\n    this._queue[PARAMS].push(params);\n\n    const now = new Date().getTime();\n    if (\n      global.nativeFlushQueueImmediate &&\n      now - this._lastFlush >= MIN_TIME_BETWEEN_FLUSHES_MS\n    ) {\n      const queue = this._queue;\n      this._queue = [[], [], [], this._callID];\n      this._lastFlush = now;\n      global.nativeFlushQueueImmediate(queue);\n    }\n    Systrace.counterEvent('pending_js_to_native_queue', this._queue[0].length);\n    if (__DEV__ && this.__spy && isFinite(moduleID)) {\n      this.__spy({\n        type: TO_NATIVE,\n        module: this._remoteModuleTable[moduleID],\n        method: this._remoteMethodTable[moduleID][methodID],\n        args: params,\n      });\n    } else if (this.__spy) {\n      this.__spy({\n        type: TO_NATIVE,\n        module: moduleID + '',\n        method: methodID,\n        args: params,\n      });\n    }\n  }\n\n  createDebugLookup(moduleID: number, name: string, methods: string[]) {\n    if (__DEV__) {\n      this._remoteModuleTable[moduleID] = name;\n      this._remoteMethodTable[moduleID] = methods;\n    }\n  }\n\n  // For JSTimers to register its callback. Otherwise a circular dependency\n  // between modules is introduced. Note that only one callback may be\n  // registered at a time.\n  setImmediatesCallback(fn: () => void) {\n    this._immediatesCallback = fn;\n  }\n\n  /**\n   * Private methods\n   */\n\n  __guard(fn: () => void) {\n    if (this.__shouldPauseOnThrow()) {\n      fn();\n    } else {\n      try {\n        fn();\n      } catch (error) {\n        ErrorUtils.reportFatalError(error);\n      }\n    }\n  }\n\n  // MessageQueue installs a global handler to catch all exceptions where JS users can register their own behavior\n  // This handler makes all exceptions to be propagated from inside MessageQueue rather than by the VM at their origin\n  // This makes stacktraces to be placed at MessageQueue rather than at where they were launched\n  // The parameter DebuggerInternal.shouldPauseOnThrow is used to check before catching all exceptions and\n  // can be configured by the VM or any Inspector\n  __shouldPauseOnThrow() {\n    return (\n      // $FlowFixMe\n      typeof DebuggerInternal !== 'undefined' &&\n      DebuggerInternal.shouldPauseOnThrow === true // eslint-disable-line no-undef\n    );\n  }\n\n  __callImmediates() {\n    Systrace.beginEvent('JSTimers.callImmediates()');\n    if (this._immediatesCallback != null) {\n      this._immediatesCallback();\n    }\n    Systrace.endEvent();\n  }\n\n  __callFunction(module: string, method: string, args: any[]): any {\n    this._lastFlush = new Date().getTime();\n    this._eventLoopStartTime = this._lastFlush;\n    if (__DEV__ || this.__spy) {\n      Systrace.beginEvent(`${module}.${method}(${stringifySafe(args)})`);\n    } else {\n      Systrace.beginEvent(`${module}.${method}(...)`);\n    }\n    if (this.__spy) {\n      this.__spy({type: TO_JS, module, method, args});\n    }\n    const moduleMethods = this.getCallableModule(module);\n    invariant(\n      !!moduleMethods,\n      'Module %s is not a registered callable module (calling %s)',\n      module,\n      method,\n    );\n    invariant(\n      !!moduleMethods[method],\n      'Method %s does not exist on module %s',\n      method,\n      module,\n    );\n    const result = moduleMethods[method].apply(moduleMethods, args);\n    Systrace.endEvent();\n    return result;\n  }\n\n  __invokeCallback(cbID: number, args: any[]) {\n    this._lastFlush = new Date().getTime();\n    this._eventLoopStartTime = this._lastFlush;\n\n    // The rightmost bit of cbID indicates fail (0) or success (1), the other bits are the callID shifted left.\n    // eslint-disable-next-line no-bitwise\n    const callID = cbID >>> 1;\n    // eslint-disable-next-line no-bitwise\n    const isSuccess = cbID & 1;\n    const callback = isSuccess\n      ? this._successCallbacks[callID]\n      : this._failureCallbacks[callID];\n\n    if (__DEV__) {\n      const debug = this._debugInfo[callID];\n      const module = debug && this._remoteModuleTable[debug[0]];\n      const method = debug && this._remoteMethodTable[debug[0]][debug[1]];\n      if (!callback) {\n        let errorMessage = `Callback with id ${cbID}: ${module}.${method}() not found`;\n        if (method) {\n          errorMessage =\n            `The callback ${method}() exists in module ${module}, ` +\n            'but only one callback may be registered to a function in a native module.';\n        }\n        invariant(callback, errorMessage);\n      }\n      const profileName = debug\n        ? '<callback for ' + module + '.' + method + '>'\n        : cbID;\n      if (callback && this.__spy) {\n        this.__spy({type: TO_JS, module: null, method: profileName, args});\n      }\n      Systrace.beginEvent(\n        `MessageQueue.invokeCallback(${profileName}, ${stringifySafe(args)})`,\n      );\n    }\n\n    if (!callback) {\n      return;\n    }\n\n    delete this._successCallbacks[callID];\n    delete this._failureCallbacks[callID];\n    callback(...args);\n\n    if (__DEV__) {\n      Systrace.endEvent();\n    }\n  }\n}\n\nmodule.exports = MessageQueue;\n"]},"metadata":{},"sourceType":"script"}