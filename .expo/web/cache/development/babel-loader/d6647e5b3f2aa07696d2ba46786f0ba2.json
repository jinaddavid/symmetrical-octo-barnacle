{"ast":null,"code":"'use strict';\n\nvar AnimatedInterpolation = require(\"./AnimatedInterpolation\");\n\nvar AnimatedNode = require(\"./AnimatedNode\");\n\nvar AnimatedWithChildren = require(\"./AnimatedWithChildren\");\n\nvar InteractionManager = require(\"../../../Interaction/InteractionManager\");\n\nvar NativeAnimatedHelper = require(\"../NativeAnimatedHelper\");\n\nvar NativeAnimatedAPI = NativeAnimatedHelper.API;\nvar _uniqueId = 1;\n\nfunction _flush(rootNode) {\n  var animatedStyles = new Set();\n\n  function findAnimatedStyles(node) {\n    if (typeof node.update === 'function') {\n      animatedStyles.add(node);\n    } else {\n      node.__getChildren().forEach(findAnimatedStyles);\n    }\n  }\n\n  findAnimatedStyles(rootNode);\n  animatedStyles.forEach(animatedStyle => animatedStyle.update());\n}\n\nclass AnimatedValue extends AnimatedWithChildren {\n  constructor(value) {\n    super();\n    this._startingValue = this._value = value;\n    this._offset = 0;\n    this._animation = null;\n    this._listeners = {};\n  }\n\n  __detach() {\n    this.stopAnimation();\n\n    super.__detach();\n  }\n\n  __getValue() {\n    return this._value + this._offset;\n  }\n\n  __makeNative() {\n    super.__makeNative();\n\n    if (Object.keys(this._listeners).length) {\n      this._startListeningToNativeValueUpdates();\n    }\n  }\n\n  setValue(value) {\n    if (this._animation) {\n      this._animation.stop();\n\n      this._animation = null;\n    }\n\n    this._updateValue(value, !this.__isNative);\n\n    if (this.__isNative) {\n      NativeAnimatedAPI.setAnimatedNodeValue(this.__getNativeTag(), value);\n    }\n  }\n\n  setOffset(offset) {\n    this._offset = offset;\n\n    if (this.__isNative) {\n      NativeAnimatedAPI.setAnimatedNodeOffset(this.__getNativeTag(), offset);\n    }\n  }\n\n  flattenOffset() {\n    this._value += this._offset;\n    this._offset = 0;\n\n    if (this.__isNative) {\n      NativeAnimatedAPI.flattenAnimatedNodeOffset(this.__getNativeTag());\n    }\n  }\n\n  extractOffset() {\n    this._offset += this._value;\n    this._value = 0;\n\n    if (this.__isNative) {\n      NativeAnimatedAPI.extractAnimatedNodeOffset(this.__getNativeTag());\n    }\n  }\n\n  addListener(callback) {\n    var id = String(_uniqueId++);\n    this._listeners[id] = callback;\n\n    if (this.__isNative) {\n      this._startListeningToNativeValueUpdates();\n    }\n\n    return id;\n  }\n\n  removeListener(id) {\n    delete this._listeners[id];\n\n    if (this.__isNative && Object.keys(this._listeners).length === 0) {\n      this._stopListeningForNativeValueUpdates();\n    }\n  }\n\n  removeAllListeners() {\n    this._listeners = {};\n\n    if (this.__isNative) {\n      this._stopListeningForNativeValueUpdates();\n    }\n  }\n\n  _startListeningToNativeValueUpdates() {\n    if (this.__nativeAnimatedValueListener) {\n      return;\n    }\n\n    NativeAnimatedAPI.startListeningToAnimatedNodeValue(this.__getNativeTag());\n    this.__nativeAnimatedValueListener = NativeAnimatedHelper.nativeEventEmitter.addListener('onAnimatedValueUpdate', data => {\n      if (data.tag !== this.__getNativeTag()) {\n        return;\n      }\n\n      this._updateValue(data.value, false);\n    });\n  }\n\n  _stopListeningForNativeValueUpdates() {\n    if (!this.__nativeAnimatedValueListener) {\n      return;\n    }\n\n    this.__nativeAnimatedValueListener.remove();\n\n    this.__nativeAnimatedValueListener = null;\n    NativeAnimatedAPI.stopListeningToAnimatedNodeValue(this.__getNativeTag());\n  }\n\n  stopAnimation(callback) {\n    this.stopTracking();\n    this._animation && this._animation.stop();\n    this._animation = null;\n    callback && callback(this.__getValue());\n  }\n\n  resetAnimation(callback) {\n    this.stopAnimation(callback);\n    this._value = this._startingValue;\n  }\n\n  interpolate(config) {\n    return new AnimatedInterpolation(this, config);\n  }\n\n  animate(animation, callback) {\n    var handle = null;\n\n    if (animation.__isInteraction) {\n      handle = InteractionManager.createInteractionHandle();\n    }\n\n    var previousAnimation = this._animation;\n    this._animation && this._animation.stop();\n    this._animation = animation;\n    animation.start(this._value, value => {\n      this._updateValue(value, true);\n    }, result => {\n      this._animation = null;\n\n      if (handle !== null) {\n        InteractionManager.clearInteractionHandle(handle);\n      }\n\n      callback && callback(result);\n    }, previousAnimation, this);\n  }\n\n  stopTracking() {\n    this._tracking && this._tracking.__detach();\n    this._tracking = null;\n  }\n\n  track(tracking) {\n    this.stopTracking();\n    this._tracking = tracking;\n  }\n\n  _updateValue(value, flush) {\n    this._value = value;\n\n    if (flush) {\n      _flush(this);\n    }\n\n    for (var _key in this._listeners) {\n      this._listeners[_key]({\n        value: this.__getValue()\n      });\n    }\n  }\n\n  __getNativeConfig() {\n    return {\n      type: 'value',\n      value: this._value,\n      offset: this._offset\n    };\n  }\n\n}\n\nmodule.exports = AnimatedValue;","map":{"version":3,"sources":["/Users/ash/Documents/DevSpace/MobileProject/ReactNative/InProgres/InterView/symmetrical-octo-barnacle/node_modules/react-native/Libraries/Animated/src/nodes/AnimatedValue.js"],"names":["AnimatedInterpolation","require","AnimatedNode","AnimatedWithChildren","InteractionManager","NativeAnimatedHelper","NativeAnimatedAPI","API","_uniqueId","_flush","rootNode","animatedStyles","Set","findAnimatedStyles","node","update","add","__getChildren","forEach","animatedStyle","AnimatedValue","constructor","value","_startingValue","_value","_offset","_animation","_listeners","__detach","stopAnimation","__getValue","__makeNative","Object","keys","length","_startListeningToNativeValueUpdates","setValue","stop","_updateValue","__isNative","setAnimatedNodeValue","__getNativeTag","setOffset","offset","setAnimatedNodeOffset","flattenOffset","flattenAnimatedNodeOffset","extractOffset","extractAnimatedNodeOffset","addListener","callback","id","String","removeListener","_stopListeningForNativeValueUpdates","removeAllListeners","__nativeAnimatedValueListener","startListeningToAnimatedNodeValue","nativeEventEmitter","data","tag","remove","stopListeningToAnimatedNodeValue","stopTracking","resetAnimation","interpolate","config","animate","animation","handle","__isInteraction","createInteractionHandle","previousAnimation","start","result","clearInteractionHandle","_tracking","track","tracking","flush","key","__getNativeConfig","type","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n'use strict';\n\nconst AnimatedInterpolation = require('./AnimatedInterpolation');\nconst AnimatedNode = require('./AnimatedNode');\nconst AnimatedWithChildren = require('./AnimatedWithChildren');\nconst InteractionManager = require('../../../Interaction/InteractionManager');\nconst NativeAnimatedHelper = require('../NativeAnimatedHelper');\n\nimport type Animation, {EndCallback} from '../animations/Animation';\nimport type {InterpolationConfigType} from './AnimatedInterpolation';\nimport type AnimatedTracking from './AnimatedTracking';\n\nconst NativeAnimatedAPI = NativeAnimatedHelper.API;\n\ntype ValueListenerCallback = (state: {value: number}) => void;\n\nlet _uniqueId = 1;\n\n/**\n * Animated works by building a directed acyclic graph of dependencies\n * transparently when you render your Animated components.\n *\n *               new Animated.Value(0)\n *     .interpolate()        .interpolate()    new Animated.Value(1)\n *         opacity               translateY      scale\n *          style                         transform\n *         View#234                         style\n *                                         View#123\n *\n * A) Top Down phase\n * When an Animated.Value is updated, we recursively go down through this\n * graph in order to find leaf nodes: the views that we flag as needing\n * an update.\n *\n * B) Bottom Up phase\n * When a view is flagged as needing an update, we recursively go back up\n * in order to build the new value that it needs. The reason why we need\n * this two-phases process is to deal with composite props such as\n * transform which can receive values from multiple parents.\n */\nfunction _flush(rootNode: AnimatedValue): void {\n  const animatedStyles = new Set();\n  function findAnimatedStyles(node) {\n    /* $FlowFixMe(>=0.68.0 site=react_native_fb) This comment suppresses an\n     * error found when Flow v0.68 was deployed. To see the error delete this\n     * comment and run Flow. */\n    if (typeof node.update === 'function') {\n      animatedStyles.add(node);\n    } else {\n      node.__getChildren().forEach(findAnimatedStyles);\n    }\n  }\n  findAnimatedStyles(rootNode);\n  /* $FlowFixMe */\n  animatedStyles.forEach(animatedStyle => animatedStyle.update());\n}\n\n/**\n * Standard value for driving animations.  One `Animated.Value` can drive\n * multiple properties in a synchronized fashion, but can only be driven by one\n * mechanism at a time.  Using a new mechanism (e.g. starting a new animation,\n * or calling `setValue`) will stop any previous ones.\n *\n * See http://facebook.github.io/react-native/docs/animatedvalue.html\n */\nclass AnimatedValue extends AnimatedWithChildren {\n  _value: number;\n  _startingValue: number;\n  _offset: number;\n  _animation: ?Animation;\n  _tracking: ?AnimatedTracking;\n  _listeners: {[key: string]: ValueListenerCallback};\n  __nativeAnimatedValueListener: ?any;\n\n  constructor(value: number) {\n    super();\n    this._startingValue = this._value = value;\n    this._offset = 0;\n    this._animation = null;\n    this._listeners = {};\n  }\n\n  __detach() {\n    this.stopAnimation();\n    super.__detach();\n  }\n\n  __getValue(): number {\n    return this._value + this._offset;\n  }\n\n  __makeNative() {\n    super.__makeNative();\n\n    if (Object.keys(this._listeners).length) {\n      this._startListeningToNativeValueUpdates();\n    }\n  }\n\n  /**\n   * Directly set the value.  This will stop any animations running on the value\n   * and update all the bound properties.\n   *\n   * See http://facebook.github.io/react-native/docs/animatedvalue.html#setvalue\n   */\n  setValue(value: number): void {\n    if (this._animation) {\n      this._animation.stop();\n      this._animation = null;\n    }\n    this._updateValue(\n      value,\n      !this.__isNative /* don't perform a flush for natively driven values */,\n    );\n    if (this.__isNative) {\n      NativeAnimatedAPI.setAnimatedNodeValue(this.__getNativeTag(), value);\n    }\n  }\n\n  /**\n   * Sets an offset that is applied on top of whatever value is set, whether via\n   * `setValue`, an animation, or `Animated.event`.  Useful for compensating\n   * things like the start of a pan gesture.\n   *\n   * See http://facebook.github.io/react-native/docs/animatedvalue.html#setoffset\n   */\n  setOffset(offset: number): void {\n    this._offset = offset;\n    if (this.__isNative) {\n      NativeAnimatedAPI.setAnimatedNodeOffset(this.__getNativeTag(), offset);\n    }\n  }\n\n  /**\n   * Merges the offset value into the base value and resets the offset to zero.\n   * The final output of the value is unchanged.\n   *\n   * See http://facebook.github.io/react-native/docs/animatedvalue.html#flattenoffset\n   */\n  flattenOffset(): void {\n    this._value += this._offset;\n    this._offset = 0;\n    if (this.__isNative) {\n      NativeAnimatedAPI.flattenAnimatedNodeOffset(this.__getNativeTag());\n    }\n  }\n\n  /**\n   * Sets the offset value to the base value, and resets the base value to zero.\n   * The final output of the value is unchanged.\n   *\n   * See http://facebook.github.io/react-native/docs/animatedvalue.html#extractoffset\n   */\n  extractOffset(): void {\n    this._offset += this._value;\n    this._value = 0;\n    if (this.__isNative) {\n      NativeAnimatedAPI.extractAnimatedNodeOffset(this.__getNativeTag());\n    }\n  }\n\n  /**\n   * Adds an asynchronous listener to the value so you can observe updates from\n   * animations.  This is useful because there is no way to\n   * synchronously read the value because it might be driven natively.\n   *\n   * See http://facebook.github.io/react-native/docs/animatedvalue.html#addlistener\n   */\n  addListener(callback: ValueListenerCallback): string {\n    const id = String(_uniqueId++);\n    this._listeners[id] = callback;\n    if (this.__isNative) {\n      this._startListeningToNativeValueUpdates();\n    }\n    return id;\n  }\n\n  /**\n   * Unregister a listener. The `id` param shall match the identifier\n   * previously returned by `addListener()`.\n   *\n   * See http://facebook.github.io/react-native/docs/animatedvalue.html#removelistener\n   */\n  removeListener(id: string): void {\n    delete this._listeners[id];\n    if (this.__isNative && Object.keys(this._listeners).length === 0) {\n      this._stopListeningForNativeValueUpdates();\n    }\n  }\n\n  /**\n   * Remove all registered listeners.\n   *\n   * See http://facebook.github.io/react-native/docs/animatedvalue.html#removealllisteners\n   */\n  removeAllListeners(): void {\n    this._listeners = {};\n    if (this.__isNative) {\n      this._stopListeningForNativeValueUpdates();\n    }\n  }\n\n  _startListeningToNativeValueUpdates() {\n    if (this.__nativeAnimatedValueListener) {\n      return;\n    }\n\n    NativeAnimatedAPI.startListeningToAnimatedNodeValue(this.__getNativeTag());\n    this.__nativeAnimatedValueListener = NativeAnimatedHelper.nativeEventEmitter.addListener(\n      'onAnimatedValueUpdate',\n      data => {\n        if (data.tag !== this.__getNativeTag()) {\n          return;\n        }\n        this._updateValue(data.value, false /* flush */);\n      },\n    );\n  }\n\n  _stopListeningForNativeValueUpdates() {\n    if (!this.__nativeAnimatedValueListener) {\n      return;\n    }\n\n    this.__nativeAnimatedValueListener.remove();\n    this.__nativeAnimatedValueListener = null;\n    NativeAnimatedAPI.stopListeningToAnimatedNodeValue(this.__getNativeTag());\n  }\n\n  /**\n   * Stops any running animation or tracking. `callback` is invoked with the\n   * final value after stopping the animation, which is useful for updating\n   * state to match the animation position with layout.\n   *\n   * See http://facebook.github.io/react-native/docs/animatedvalue.html#stopanimation\n   */\n  stopAnimation(callback?: ?(value: number) => void): void {\n    this.stopTracking();\n    this._animation && this._animation.stop();\n    this._animation = null;\n    callback && callback(this.__getValue());\n  }\n\n  /**\n   * Stops any animation and resets the value to its original.\n   *\n   * See http://facebook.github.io/react-native/docs/animatedvalue.html#resetanimation\n   */\n  resetAnimation(callback?: ?(value: number) => void): void {\n    this.stopAnimation(callback);\n    this._value = this._startingValue;\n  }\n\n  /**\n   * Interpolates the value before updating the property, e.g. mapping 0-1 to\n   * 0-10.\n   */\n  interpolate(config: InterpolationConfigType): AnimatedInterpolation {\n    return new AnimatedInterpolation(this, config);\n  }\n\n  /**\n   * Typically only used internally, but could be used by a custom Animation\n   * class.\n   *\n   * See http://facebook.github.io/react-native/docs/animatedvalue.html#animate\n   */\n  animate(animation: Animation, callback: ?EndCallback): void {\n    let handle = null;\n    if (animation.__isInteraction) {\n      handle = InteractionManager.createInteractionHandle();\n    }\n    const previousAnimation = this._animation;\n    this._animation && this._animation.stop();\n    this._animation = animation;\n    animation.start(\n      this._value,\n      value => {\n        // Natively driven animations will never call into that callback, therefore we can always\n        // pass flush = true to allow the updated value to propagate to native with setNativeProps\n        this._updateValue(value, true /* flush */);\n      },\n      result => {\n        this._animation = null;\n        if (handle !== null) {\n          InteractionManager.clearInteractionHandle(handle);\n        }\n        callback && callback(result);\n      },\n      previousAnimation,\n      this,\n    );\n  }\n\n  /**\n   * Typically only used internally.\n   */\n  stopTracking(): void {\n    this._tracking && this._tracking.__detach();\n    this._tracking = null;\n  }\n\n  /**\n   * Typically only used internally.\n   */\n  track(tracking: AnimatedTracking): void {\n    this.stopTracking();\n    this._tracking = tracking;\n  }\n\n  _updateValue(value: number, flush: boolean): void {\n    this._value = value;\n    if (flush) {\n      _flush(this);\n    }\n    for (const key in this._listeners) {\n      this._listeners[key]({value: this.__getValue()});\n    }\n  }\n\n  __getNativeConfig(): Object {\n    return {\n      type: 'value',\n      value: this._value,\n      offset: this._offset,\n    };\n  }\n}\n\nmodule.exports = AnimatedValue;\n"]},"metadata":{},"sourceType":"script"}