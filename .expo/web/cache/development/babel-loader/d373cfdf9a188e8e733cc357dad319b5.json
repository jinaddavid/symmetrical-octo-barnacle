{"ast":null,"code":"'use strict';\n\nvar EventTarget = require('event-target-shim');\n\nvar Blob = require(\"./Blob\");\n\nvar {\n  FileReaderModule\n} = require(\"../BatchedBridge/NativeModules\");\n\nvar READER_EVENTS = ['abort', 'error', 'load', 'loadstart', 'loadend', 'progress'];\nvar EMPTY = 0;\nvar LOADING = 1;\nvar DONE = 2;\n\nclass FileReader extends EventTarget(...READER_EVENTS) {\n  constructor() {\n    super();\n    this.EMPTY = EMPTY;\n    this.LOADING = LOADING;\n    this.DONE = DONE;\n    this._aborted = false;\n    this._subscriptions = [];\n\n    this._reset();\n  }\n\n  _reset() {\n    this._readyState = EMPTY;\n    this._error = null;\n    this._result = null;\n  }\n\n  _clearSubscriptions() {\n    this._subscriptions.forEach(sub => sub.remove());\n\n    this._subscriptions = [];\n  }\n\n  _setReadyState(newState) {\n    this._readyState = newState;\n    this.dispatchEvent({\n      type: 'readystatechange'\n    });\n\n    if (newState === DONE) {\n      if (this._aborted) {\n        this.dispatchEvent({\n          type: 'abort'\n        });\n      } else if (this._error) {\n        this.dispatchEvent({\n          type: 'error'\n        });\n      } else {\n        this.dispatchEvent({\n          type: 'load'\n        });\n      }\n\n      this.dispatchEvent({\n        type: 'loadend'\n      });\n    }\n  }\n\n  readAsArrayBuffer() {\n    throw new Error('FileReader.readAsArrayBuffer is not implemented');\n  }\n\n  readAsDataURL(blob) {\n    this._aborted = false;\n    FileReaderModule.readAsDataURL(blob.data).then(text => {\n      if (this._aborted) {\n        return;\n      }\n\n      this._result = text;\n\n      this._setReadyState(DONE);\n    }, error => {\n      if (this._aborted) {\n        return;\n      }\n\n      this._error = error;\n\n      this._setReadyState(DONE);\n    });\n  }\n\n  readAsText(blob) {\n    var encoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'UTF-8';\n    this._aborted = false;\n    FileReaderModule.readAsText(blob.data, encoding).then(text => {\n      if (this._aborted) {\n        return;\n      }\n\n      this._result = text;\n\n      this._setReadyState(DONE);\n    }, error => {\n      if (this._aborted) {\n        return;\n      }\n\n      this._error = error;\n\n      this._setReadyState(DONE);\n    });\n  }\n\n  abort() {\n    this._aborted = true;\n\n    if (this._readyState !== EMPTY && this._readyState !== DONE) {\n      this._reset();\n\n      this._setReadyState(DONE);\n    }\n\n    this._reset();\n  }\n\n  get readyState() {\n    return this._readyState;\n  }\n\n  get error() {\n    return this._error;\n  }\n\n  get result() {\n    return this._result;\n  }\n\n}\n\nFileReader.EMPTY = EMPTY;\nFileReader.LOADING = LOADING;\nFileReader.DONE = DONE;\nmodule.exports = FileReader;","map":{"version":3,"sources":["/Users/ash/Documents/DevSpace/MobileProject/ReactNative/InProgres/InterView/symmetrical-octo-barnacle/node_modules/react-native/Libraries/Blob/FileReader.js"],"names":["EventTarget","require","Blob","FileReaderModule","READER_EVENTS","EMPTY","LOADING","DONE","FileReader","constructor","_aborted","_subscriptions","_reset","_readyState","_error","_result","_clearSubscriptions","forEach","sub","remove","_setReadyState","newState","dispatchEvent","type","readAsArrayBuffer","Error","readAsDataURL","blob","data","then","text","error","readAsText","encoding","abort","readyState","result","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nconst EventTarget = require('event-target-shim');\nconst Blob = require('./Blob');\nconst {FileReaderModule} = require('../BatchedBridge/NativeModules');\n\ntype ReadyState =\n  | 0 // EMPTY\n  | 1 // LOADING\n  | 2; // DONE\n\ntype ReaderResult = string | ArrayBuffer;\n\nconst READER_EVENTS = [\n  'abort',\n  'error',\n  'load',\n  'loadstart',\n  'loadend',\n  'progress',\n];\n\nconst EMPTY = 0;\nconst LOADING = 1;\nconst DONE = 2;\n\nclass FileReader extends EventTarget(...READER_EVENTS) {\n  static EMPTY = EMPTY;\n  static LOADING = LOADING;\n  static DONE = DONE;\n\n  EMPTY = EMPTY;\n  LOADING = LOADING;\n  DONE = DONE;\n\n  _readyState: ReadyState;\n  _error: ?Error;\n  _result: ?ReaderResult;\n  _aborted: boolean = false;\n  _subscriptions: Array<*> = [];\n\n  constructor() {\n    super();\n    this._reset();\n  }\n\n  _reset(): void {\n    this._readyState = EMPTY;\n    this._error = null;\n    this._result = null;\n  }\n\n  _clearSubscriptions(): void {\n    this._subscriptions.forEach(sub => sub.remove());\n    this._subscriptions = [];\n  }\n\n  _setReadyState(newState: ReadyState) {\n    this._readyState = newState;\n    this.dispatchEvent({type: 'readystatechange'});\n    if (newState === DONE) {\n      if (this._aborted) {\n        this.dispatchEvent({type: 'abort'});\n      } else if (this._error) {\n        this.dispatchEvent({type: 'error'});\n      } else {\n        this.dispatchEvent({type: 'load'});\n      }\n      this.dispatchEvent({type: 'loadend'});\n    }\n  }\n\n  readAsArrayBuffer() {\n    throw new Error('FileReader.readAsArrayBuffer is not implemented');\n  }\n\n  readAsDataURL(blob: Blob) {\n    this._aborted = false;\n\n    FileReaderModule.readAsDataURL(blob.data).then(\n      (text: string) => {\n        if (this._aborted) {\n          return;\n        }\n        this._result = text;\n        this._setReadyState(DONE);\n      },\n      error => {\n        if (this._aborted) {\n          return;\n        }\n        this._error = error;\n        this._setReadyState(DONE);\n      },\n    );\n  }\n\n  readAsText(blob: Blob, encoding: string = 'UTF-8') {\n    this._aborted = false;\n\n    FileReaderModule.readAsText(blob.data, encoding).then(\n      (text: string) => {\n        if (this._aborted) {\n          return;\n        }\n        this._result = text;\n        this._setReadyState(DONE);\n      },\n      error => {\n        if (this._aborted) {\n          return;\n        }\n        this._error = error;\n        this._setReadyState(DONE);\n      },\n    );\n  }\n\n  abort() {\n    this._aborted = true;\n    // only call onreadystatechange if there is something to abort, as per spec\n    if (this._readyState !== EMPTY && this._readyState !== DONE) {\n      this._reset();\n      this._setReadyState(DONE);\n    }\n    // Reset again after, in case modified in handler\n    this._reset();\n  }\n\n  get readyState(): ReadyState {\n    return this._readyState;\n  }\n\n  get error(): ?Error {\n    return this._error;\n  }\n\n  get result(): ?ReaderResult {\n    return this._result;\n  }\n}\n\nmodule.exports = FileReader;\n"]},"metadata":{},"sourceType":"script"}