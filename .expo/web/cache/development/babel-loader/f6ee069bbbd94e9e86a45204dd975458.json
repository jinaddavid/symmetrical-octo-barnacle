{"ast":null,"code":"'use strict';\n\nvar RCTAlertManager = require(\"../BatchedBridge/NativeModules\").AlertManager;\n\nclass AlertIOS {\n  static alert(title, message, callbackOrButtons, type) {\n    if (typeof type !== 'undefined') {\n      console.warn('AlertIOS.alert() with a 4th \"type\" parameter is deprecated and will be removed. Use AlertIOS.prompt() instead.');\n      this.prompt(title, message, callbackOrButtons, type);\n      return;\n    }\n\n    this.prompt(title, message, callbackOrButtons, 'default');\n  }\n\n  static prompt(title, message, callbackOrButtons) {\n    var type = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'plain-text';\n    var defaultValue = arguments.length > 4 ? arguments[4] : undefined;\n    var keyboardType = arguments.length > 5 ? arguments[5] : undefined;\n\n    if (typeof type === 'function') {\n      console.warn('You passed a callback function as the \"type\" argument to AlertIOS.prompt(). React Native is ' + 'assuming  you want to use the deprecated AlertIOS.prompt(title, defaultValue, buttons, callback) ' + 'signature. The current signature is AlertIOS.prompt(title, message, callbackOrButtons, type, defaultValue, ' + 'keyboardType) and the old syntax will be removed in a future version.');\n      var callback = type;\n      RCTAlertManager.alertWithArgs({\n        title: title || '',\n        type: 'plain-text',\n        defaultValue: message\n      }, (id, value) => {\n        callback(value);\n      });\n      return;\n    }\n\n    var callbacks = [];\n    var buttons = [];\n    var cancelButtonKey;\n    var destructiveButtonKey;\n\n    if (typeof callbackOrButtons === 'function') {\n      callbacks = [callbackOrButtons];\n    } else if (callbackOrButtons instanceof Array) {\n      callbackOrButtons.forEach((btn, index) => {\n        callbacks[index] = btn.onPress;\n\n        if (btn.style === 'cancel') {\n          cancelButtonKey = String(index);\n        } else if (btn.style === 'destructive') {\n          destructiveButtonKey = String(index);\n        }\n\n        if (btn.text || index < (callbackOrButtons || []).length - 1) {\n          var btnDef = {};\n          btnDef[index] = btn.text || '';\n          buttons.push(btnDef);\n        }\n      });\n    }\n\n    RCTAlertManager.alertWithArgs({\n      title: title || '',\n      message: message || undefined,\n      buttons,\n      type: type || undefined,\n      defaultValue,\n      cancelButtonKey,\n      destructiveButtonKey,\n      keyboardType\n    }, (id, value) => {\n      var cb = callbacks[id];\n      cb && cb(value);\n    });\n  }\n\n}\n\nmodule.exports = AlertIOS;","map":{"version":3,"sources":["/Users/ash/Documents/DevSpace/MobileProject/ReactNative/InProgres/InterView/symmetrical-octo-barnacle/node_modules/react-native/Libraries/Alert/AlertIOS.js"],"names":["RCTAlertManager","require","AlertManager","AlertIOS","alert","title","message","callbackOrButtons","type","console","warn","prompt","defaultValue","keyboardType","callback","alertWithArgs","id","value","callbacks","buttons","cancelButtonKey","destructiveButtonKey","Array","forEach","btn","index","onPress","style","String","text","length","btnDef","push","undefined","cb","module","exports"],"mappings":"AAWA;;AAEA,IAAMA,eAAe,GAAGC,OAAO,kCAAP,CAA0CC,YAAlE;;AAqEA,MAAMC,QAAN,CAAe;AAMD,SAALC,KAAK,CACVC,KADU,EAEVC,OAFU,EAGVC,iBAHU,EAIVC,IAJU,EAKJ;AACN,QAAI,OAAOA,IAAP,KAAgB,WAApB,EAAiC;AAC/BC,MAAAA,OAAO,CAACC,IAAR,CACE,gHADF;AAGA,WAAKC,MAAL,CAAYN,KAAZ,EAAmBC,OAAnB,EAA4BC,iBAA5B,EAA+CC,IAA/C;AACA;AACD;;AACD,SAAKG,MAAL,CAAYN,KAAZ,EAAmBC,OAAnB,EAA4BC,iBAA5B,EAA+C,SAA/C;AACD;;AAOY,SAANI,MAAM,CACXN,KADW,EAEXC,OAFW,EAGXC,iBAHW,EAOL;AAAA,QAHNC,IAGM,uEAHc,YAGd;AAAA,QAFNI,YAEM;AAAA,QADNC,YACM;;AACN,QAAI,OAAOL,IAAP,KAAgB,UAApB,EAAgC;AAC9BC,MAAAA,OAAO,CAACC,IAAR,CACE,iGACE,mGADF,GAEE,6GAFF,GAGE,uEAJJ;AAOA,UAAMI,QAAQ,GAAGN,IAAjB;AACAR,MAAAA,eAAe,CAACe,aAAhB,CACE;AACEV,QAAAA,KAAK,EAAEA,KAAK,IAAI,EADlB;AAEEG,QAAAA,IAAI,EAAE,YAFR;AAGEI,QAAAA,YAAY,EAAEN;AAHhB,OADF,EAME,CAACU,EAAD,EAAKC,KAAL,KAAe;AACbH,QAAAA,QAAQ,CAACG,KAAD,CAAR;AACD,OARH;AAUA;AACD;;AAED,QAAIC,SAAS,GAAG,EAAhB;AACA,QAAMC,OAAO,GAAG,EAAhB;AACA,QAAIC,eAAJ;AACA,QAAIC,oBAAJ;;AACA,QAAI,OAAOd,iBAAP,KAA6B,UAAjC,EAA6C;AAC3CW,MAAAA,SAAS,GAAG,CAACX,iBAAD,CAAZ;AACD,KAFD,MAEO,IAAIA,iBAAiB,YAAYe,KAAjC,EAAwC;AAC7Cf,MAAAA,iBAAiB,CAACgB,OAAlB,CAA0B,CAACC,GAAD,EAAMC,KAAN,KAAgB;AACxCP,QAAAA,SAAS,CAACO,KAAD,CAAT,GAAmBD,GAAG,CAACE,OAAvB;;AACA,YAAIF,GAAG,CAACG,KAAJ,KAAc,QAAlB,EAA4B;AAC1BP,UAAAA,eAAe,GAAGQ,MAAM,CAACH,KAAD,CAAxB;AACD,SAFD,MAEO,IAAID,GAAG,CAACG,KAAJ,KAAc,aAAlB,EAAiC;AACtCN,UAAAA,oBAAoB,GAAGO,MAAM,CAACH,KAAD,CAA7B;AACD;;AACD,YAAID,GAAG,CAACK,IAAJ,IAAYJ,KAAK,GAAG,CAAClB,iBAAiB,IAAI,EAAtB,EAA0BuB,MAA1B,GAAmC,CAA3D,EAA8D;AAC5D,cAAMC,MAAM,GAAG,EAAf;AACAA,UAAAA,MAAM,CAACN,KAAD,CAAN,GAAgBD,GAAG,CAACK,IAAJ,IAAY,EAA5B;AACAV,UAAAA,OAAO,CAACa,IAAR,CAAaD,MAAb;AACD;AACF,OAZD;AAaD;;AAED/B,IAAAA,eAAe,CAACe,aAAhB,CACE;AACEV,MAAAA,KAAK,EAAEA,KAAK,IAAI,EADlB;AAEEC,MAAAA,OAAO,EAAEA,OAAO,IAAI2B,SAFtB;AAGEd,MAAAA,OAHF;AAIEX,MAAAA,IAAI,EAAEA,IAAI,IAAIyB,SAJhB;AAKErB,MAAAA,YALF;AAMEQ,MAAAA,eANF;AAOEC,MAAAA,oBAPF;AAQER,MAAAA;AARF,KADF,EAWE,CAACG,EAAD,EAAKC,KAAL,KAAe;AACb,UAAMiB,EAAE,GAAGhB,SAAS,CAACF,EAAD,CAApB;AACAkB,MAAAA,EAAE,IAAIA,EAAE,CAACjB,KAAD,CAAR;AACD,KAdH;AAgBD;;AA/FY;;AAkGfkB,MAAM,CAACC,OAAP,GAAiBjC,QAAjB","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n * @jsdoc\n */\n\n'use strict';\n\nconst RCTAlertManager = require('../BatchedBridge/NativeModules').AlertManager;\n\n/**\n * An Alert button type\n */\nexport type AlertType = $Enum<{\n  /**\n   * Default alert with no inputs\n   */\n  default: string,\n  /**\n   * Plain text input alert\n   */\n  'plain-text': string,\n  /**\n   * Secure text input alert\n   */\n  'secure-text': string,\n  /**\n   * Login and password alert\n   */\n  'login-password': string,\n}>;\n\n/**\n * An Alert button style\n */\nexport type AlertButtonStyle = $Enum<{\n  /**\n   * Default button style\n   */\n  default: string,\n  /**\n   * Cancel button style\n   */\n  cancel: string,\n  /**\n   * Destructive button style\n   */\n  destructive: string,\n}>;\n\n/**\n * Array or buttons\n * @typedef {Array} ButtonsArray\n * @property {string=} text Button label\n * @property {Function=} onPress Callback function when button pressed\n * @property {AlertButtonStyle=} style Button style\n */\nexport type ButtonsArray = Array<{\n  /**\n   * Button label\n   */\n  text?: string,\n  /**\n   * Callback function when button pressed\n   */\n  onPress?: ?Function,\n  /**\n   * Button style\n   */\n  style?: AlertButtonStyle,\n}>;\n\n/**\n * Use `AlertIOS` to display an alert dialog with a message or to create a prompt for user input on iOS. If you don't need to prompt for user input, we recommend using `Alert.alert() for cross-platform support.\n *\n * See http://facebook.github.io/react-native/docs/alertios.html\n */\nclass AlertIOS {\n  /**\n   * Create and display a popup alert.\n   *\n   * See http://facebook.github.io/react-native/docs/alertios.html#alert\n   */\n  static alert(\n    title: ?string,\n    message?: ?string,\n    callbackOrButtons?: ?((() => void) | ButtonsArray),\n    type?: AlertType,\n  ): void {\n    if (typeof type !== 'undefined') {\n      console.warn(\n        'AlertIOS.alert() with a 4th \"type\" parameter is deprecated and will be removed. Use AlertIOS.prompt() instead.',\n      );\n      this.prompt(title, message, callbackOrButtons, type);\n      return;\n    }\n    this.prompt(title, message, callbackOrButtons, 'default');\n  }\n\n  /**\n   * Create and display a prompt to enter some text.\n   *\n   * See http://facebook.github.io/react-native/docs/alertios.html#prompt\n   */\n  static prompt(\n    title: ?string,\n    message?: ?string,\n    callbackOrButtons?: ?(((text: string) => void) | ButtonsArray),\n    type?: ?AlertType = 'plain-text',\n    defaultValue?: string,\n    keyboardType?: string,\n  ): void {\n    if (typeof type === 'function') {\n      console.warn(\n        'You passed a callback function as the \"type\" argument to AlertIOS.prompt(). React Native is ' +\n          'assuming  you want to use the deprecated AlertIOS.prompt(title, defaultValue, buttons, callback) ' +\n          'signature. The current signature is AlertIOS.prompt(title, message, callbackOrButtons, type, defaultValue, ' +\n          'keyboardType) and the old syntax will be removed in a future version.',\n      );\n\n      const callback = type;\n      RCTAlertManager.alertWithArgs(\n        {\n          title: title || '',\n          type: 'plain-text',\n          defaultValue: message,\n        },\n        (id, value) => {\n          callback(value);\n        },\n      );\n      return;\n    }\n\n    let callbacks = [];\n    const buttons = [];\n    let cancelButtonKey;\n    let destructiveButtonKey;\n    if (typeof callbackOrButtons === 'function') {\n      callbacks = [callbackOrButtons];\n    } else if (callbackOrButtons instanceof Array) {\n      callbackOrButtons.forEach((btn, index) => {\n        callbacks[index] = btn.onPress;\n        if (btn.style === 'cancel') {\n          cancelButtonKey = String(index);\n        } else if (btn.style === 'destructive') {\n          destructiveButtonKey = String(index);\n        }\n        if (btn.text || index < (callbackOrButtons || []).length - 1) {\n          const btnDef = {};\n          btnDef[index] = btn.text || '';\n          buttons.push(btnDef);\n        }\n      });\n    }\n\n    RCTAlertManager.alertWithArgs(\n      {\n        title: title || '',\n        message: message || undefined,\n        buttons,\n        type: type || undefined,\n        defaultValue,\n        cancelButtonKey,\n        destructiveButtonKey,\n        keyboardType,\n      },\n      (id, value) => {\n        const cb = callbacks[id];\n        cb && cb(value);\n      },\n    );\n  }\n}\n\nmodule.exports = AlertIOS;\n"]},"metadata":{},"sourceType":"script"}