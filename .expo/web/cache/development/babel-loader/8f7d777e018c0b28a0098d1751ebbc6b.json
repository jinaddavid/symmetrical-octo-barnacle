{"ast":null,"code":"'use strict';\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nvar Blob = require(\"./Blob\");\n\nvar BlobRegistry = require(\"./BlobRegistry\");\n\nvar {\n  BlobModule\n} = require(\"../BatchedBridge/NativeModules\");\n\nfunction uuidv4() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    var r = Math.random() * 16 | 0,\n        v = c == 'x' ? r : r & 0x3 | 0x8;\n    return v.toString(16);\n  });\n}\n\nclass BlobManager {\n  static createFromParts(parts, options) {\n    var blobId = uuidv4();\n    var items = parts.map(part => {\n      if (part instanceof ArrayBuffer || global.ArrayBufferView && part instanceof global.ArrayBufferView) {\n        throw new Error(\"Creating blobs from 'ArrayBuffer' and 'ArrayBufferView' are not supported\");\n      }\n\n      if (part instanceof Blob) {\n        return {\n          data: part.data,\n          type: 'blob'\n        };\n      } else {\n        return {\n          data: String(part),\n          type: 'string'\n        };\n      }\n    });\n    var size = items.reduce((acc, curr) => {\n      if (curr.type === 'string') {\n        return acc + global.unescape(encodeURI(curr.data)).length;\n      } else {\n        return acc + curr.data.size;\n      }\n    }, 0);\n    BlobModule.createFromParts(items, blobId);\n    return BlobManager.createFromOptions({\n      blobId,\n      offset: 0,\n      size,\n      type: options ? options.type : '',\n      lastModified: options ? options.lastModified : Date.now()\n    });\n  }\n\n  static createFromOptions(options) {\n    BlobRegistry.register(options.blobId);\n    return _extends(Object.create(Blob.prototype), {\n      data: options\n    });\n  }\n\n  static release(blobId) {\n    BlobRegistry.unregister(blobId);\n\n    if (BlobRegistry.has(blobId)) {\n      return;\n    }\n\n    BlobModule.release(blobId);\n  }\n\n  static addNetworkingHandler() {\n    BlobModule.addNetworkingHandler();\n  }\n\n  static addWebSocketHandler(socketId) {\n    BlobModule.addWebSocketHandler(socketId);\n  }\n\n  static removeWebSocketHandler(socketId) {\n    BlobModule.removeWebSocketHandler(socketId);\n  }\n\n  static sendOverSocket(blob, socketId) {\n    BlobModule.sendOverSocket(blob.data, socketId);\n  }\n\n}\n\nBlobManager.isAvailable = !!BlobModule;\nmodule.exports = BlobManager;","map":{"version":3,"sources":["/Users/ash/Documents/DevSpace/MobileProject/ReactNative/InProgres/InterView/symmetrical-octo-barnacle/node_modules/react-native/Libraries/Blob/BlobManager.js"],"names":["Blob","require","BlobRegistry","BlobModule","uuidv4","replace","c","r","Math","random","v","toString","BlobManager","createFromParts","parts","options","blobId","items","map","part","ArrayBuffer","global","ArrayBufferView","Error","data","type","String","size","reduce","acc","curr","unescape","encodeURI","length","createFromOptions","offset","lastModified","Date","now","register","Object","create","prototype","release","unregister","has","addNetworkingHandler","addWebSocketHandler","socketId","removeWebSocketHandler","sendOverSocket","blob","isAvailable","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n'use strict';\n\nconst Blob = require('./Blob');\nconst BlobRegistry = require('./BlobRegistry');\nconst {BlobModule} = require('../BatchedBridge/NativeModules');\n\nimport type {BlobData, BlobOptions} from './BlobTypes';\n\n/*eslint-disable no-bitwise */\n/*eslint-disable eqeqeq */\n\n/**\n * Based on the rfc4122-compliant solution posted at\n * http://stackoverflow.com/questions/105034\n */\nfunction uuidv4(): string {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    const r = (Math.random() * 16) | 0,\n      v = c == 'x' ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n\n/**\n * Module to manage blobs. Wrapper around the native blob module.\n */\nclass BlobManager {\n  /**\n   * If the native blob module is available.\n   */\n  static isAvailable = !!BlobModule;\n\n  /**\n   * Create blob from existing array of blobs.\n   */\n  static createFromParts(\n    parts: Array<Blob | string>,\n    options?: BlobOptions,\n  ): Blob {\n    const blobId = uuidv4();\n    const items = parts.map(part => {\n      if (\n        part instanceof ArrayBuffer ||\n        (global.ArrayBufferView && part instanceof global.ArrayBufferView)\n      ) {\n        throw new Error(\n          \"Creating blobs from 'ArrayBuffer' and 'ArrayBufferView' are not supported\",\n        );\n      }\n      if (part instanceof Blob) {\n        return {\n          data: part.data,\n          type: 'blob',\n        };\n      } else {\n        return {\n          data: String(part),\n          type: 'string',\n        };\n      }\n    });\n    const size = items.reduce((acc, curr) => {\n      if (curr.type === 'string') {\n        return acc + global.unescape(encodeURI(curr.data)).length;\n      } else {\n        return acc + curr.data.size;\n      }\n    }, 0);\n\n    BlobModule.createFromParts(items, blobId);\n\n    return BlobManager.createFromOptions({\n      blobId,\n      offset: 0,\n      size,\n      type: options ? options.type : '',\n      lastModified: options ? options.lastModified : Date.now(),\n    });\n  }\n\n  /**\n   * Create blob instance from blob data from native.\n   * Used internally by modules like XHR, WebSocket, etc.\n   */\n  static createFromOptions(options: BlobData): Blob {\n    BlobRegistry.register(options.blobId);\n    return Object.assign(Object.create(Blob.prototype), {data: options});\n  }\n\n  /**\n   * Deallocate resources for a blob.\n   */\n  static release(blobId: string): void {\n    BlobRegistry.unregister(blobId);\n    if (BlobRegistry.has(blobId)) {\n      return;\n    }\n    BlobModule.release(blobId);\n  }\n\n  /**\n   * Inject the blob content handler in the networking module to support blob\n   * requests and responses.\n   */\n  static addNetworkingHandler(): void {\n    BlobModule.addNetworkingHandler();\n  }\n\n  /**\n   * Indicate the websocket should return a blob for incoming binary\n   * messages.\n   */\n  static addWebSocketHandler(socketId: number): void {\n    BlobModule.addWebSocketHandler(socketId);\n  }\n\n  /**\n   * Indicate the websocket should no longer return a blob for incoming\n   * binary messages.\n   */\n  static removeWebSocketHandler(socketId: number): void {\n    BlobModule.removeWebSocketHandler(socketId);\n  }\n\n  /**\n   * Send a blob message to a websocket.\n   */\n  static sendOverSocket(blob: Blob, socketId: number): void {\n    BlobModule.sendOverSocket(blob.data, socketId);\n  }\n}\n\nmodule.exports = BlobManager;\n"]},"metadata":{},"sourceType":"script"}