{"ast":null,"code":"'use strict';\n\nclass Blob {\n  constructor() {\n    var parts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var options = arguments.length > 1 ? arguments[1] : undefined;\n\n    var BlobManager = require(\"./BlobManager\");\n\n    this.data = BlobManager.createFromParts(parts, options).data;\n  }\n\n  set data(data) {\n    this._data = data;\n  }\n\n  get data() {\n    if (!this._data) {\n      throw new Error('Blob has been closed and is no longer available');\n    }\n\n    return this._data;\n  }\n\n  slice(start, end) {\n    var BlobManager = require(\"./BlobManager\");\n\n    var {\n      offset,\n      size\n    } = this.data;\n\n    if (typeof start === 'number') {\n      if (start > size) {\n        start = size;\n      }\n\n      offset += start;\n      size -= start;\n\n      if (typeof end === 'number') {\n        if (end < 0) {\n          end = this.size + end;\n        }\n\n        size = end - start;\n      }\n    }\n\n    return BlobManager.createFromOptions({\n      blobId: this.data.blobId,\n      offset,\n      size\n    });\n  }\n\n  close() {\n    var BlobManager = require(\"./BlobManager\");\n\n    BlobManager.release(this.data.blobId);\n    this.data = null;\n  }\n\n  get size() {\n    return this.data.size;\n  }\n\n  get type() {\n    return this.data.type || '';\n  }\n\n}\n\nmodule.exports = Blob;","map":{"version":3,"sources":["/Users/ash/Documents/DevSpace/MobileProject/ReactNative/InProgres/InterView/symmetrical-octo-barnacle/node_modules/react-native/Libraries/Blob/Blob.js"],"names":["Blob","constructor","parts","options","BlobManager","require","data","createFromParts","_data","Error","slice","start","end","offset","size","createFromOptions","blobId","close","release","type","module","exports"],"mappings":"AAUA;;AAyCA,MAAMA,IAAN,CAAW;AAQTC,EAAAA,WAAW,GAA0D;AAAA,QAAzDC,KAAyD,uEAA3B,EAA2B;AAAA,QAAvBC,OAAuB;;AACnE,QAAMC,WAAW,GAAGC,OAAO,iBAA3B;;AACA,SAAKC,IAAL,GAAYF,WAAW,CAACG,eAAZ,CAA4BL,KAA5B,EAAmCC,OAAnC,EAA4CG,IAAxD;AACD;;AAOO,MAAJA,IAAI,CAACA,IAAD,EAAkB;AACxB,SAAKE,KAAL,GAAaF,IAAb;AACD;;AAEO,MAAJA,IAAI,GAAa;AACnB,QAAI,CAAC,KAAKE,KAAV,EAAiB;AACf,YAAM,IAAIC,KAAJ,CAAU,iDAAV,CAAN;AACD;;AAED,WAAO,KAAKD,KAAZ;AACD;;AAEDE,EAAAA,KAAK,CAACC,KAAD,EAAiBC,GAAjB,EAAqC;AACxC,QAAMR,WAAW,GAAGC,OAAO,iBAA3B;;AACA,QAAI;AAACQ,MAAAA,MAAD;AAASC,MAAAA;AAAT,QAAiB,KAAKR,IAA1B;;AAEA,QAAI,OAAOK,KAAP,KAAiB,QAArB,EAA+B;AAC7B,UAAIA,KAAK,GAAGG,IAAZ,EAAkB;AAChBH,QAAAA,KAAK,GAAGG,IAAR;AACD;;AACDD,MAAAA,MAAM,IAAIF,KAAV;AACAG,MAAAA,IAAI,IAAIH,KAAR;;AAEA,UAAI,OAAOC,GAAP,KAAe,QAAnB,EAA6B;AAC3B,YAAIA,GAAG,GAAG,CAAV,EAAa;AACXA,UAAAA,GAAG,GAAG,KAAKE,IAAL,GAAYF,GAAlB;AACD;;AACDE,QAAAA,IAAI,GAAGF,GAAG,GAAGD,KAAb;AACD;AACF;;AACD,WAAOP,WAAW,CAACW,iBAAZ,CAA8B;AACnCC,MAAAA,MAAM,EAAE,KAAKV,IAAL,CAAUU,MADiB;AAEnCH,MAAAA,MAFmC;AAGnCC,MAAAA;AAHmC,KAA9B,CAAP;AAKD;;AAcDG,EAAAA,KAAK,GAAG;AACN,QAAMb,WAAW,GAAGC,OAAO,iBAA3B;;AACAD,IAAAA,WAAW,CAACc,OAAZ,CAAoB,KAAKZ,IAAL,CAAUU,MAA9B;AACA,SAAKV,IAAL,GAAY,IAAZ;AACD;;AAKO,MAAJQ,IAAI,GAAW;AACjB,WAAO,KAAKR,IAAL,CAAUQ,IAAjB;AACD;;AAMO,MAAJK,IAAI,GAAW;AACjB,WAAO,KAAKb,IAAL,CAAUa,IAAV,IAAkB,EAAzB;AACD;;AAtFQ;;AAyFXC,MAAM,CAACC,OAAP,GAAiBrB,IAAjB","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nimport type {BlobData, BlobOptions} from './BlobTypes';\n\n/**\n * Opaque JS representation of some binary data in native.\n *\n * The API is modeled after the W3C Blob API, with one caveat\n * regarding explicit deallocation. Refer to the `close()`\n * method for further details.\n *\n * Example usage in a React component:\n *\n *   class WebSocketImage extends React.Component {\n *      state = {blob: null};\n *      componentDidMount() {\n *        let ws = this.ws = new WebSocket(...);\n *        ws.binaryType = 'blob';\n *        ws.onmessage = (event) => {\n *          if (this.state.blob) {\n *            this.state.blob.close();\n *          }\n *          this.setState({blob: event.data});\n *        };\n *      }\n *      componentUnmount() {\n *        if (this.state.blob) {\n *          this.state.blob.close();\n *        }\n *        this.ws.close();\n *      }\n *      render() {\n *        if (!this.state.blob) {\n *          return <View />;\n *        }\n *        return <Image source={{uri: URL.createObjectURL(this.state.blob)}} />;\n *      }\n *   }\n *\n * Reference: https://developer.mozilla.org/en-US/docs/Web/API/Blob\n */\nclass Blob {\n  _data: ?BlobData;\n\n  /**\n   * Constructor for JS consumers.\n   * Currently we only support creating Blobs from other Blobs.\n   * Reference: https://developer.mozilla.org/en-US/docs/Web/API/Blob/Blob\n   */\n  constructor(parts: Array<Blob | string> = [], options?: BlobOptions) {\n    const BlobManager = require('./BlobManager');\n    this.data = BlobManager.createFromParts(parts, options).data;\n  }\n\n  /*\n   * This method is used to create a new Blob object containing\n   * the data in the specified range of bytes of the source Blob.\n   * Reference: https://developer.mozilla.org/en-US/docs/Web/API/Blob/slice\n   */\n  set data(data: ?BlobData) {\n    this._data = data;\n  }\n\n  get data(): BlobData {\n    if (!this._data) {\n      throw new Error('Blob has been closed and is no longer available');\n    }\n\n    return this._data;\n  }\n\n  slice(start?: number, end?: number): Blob {\n    const BlobManager = require('./BlobManager');\n    let {offset, size} = this.data;\n\n    if (typeof start === 'number') {\n      if (start > size) {\n        start = size;\n      }\n      offset += start;\n      size -= start;\n\n      if (typeof end === 'number') {\n        if (end < 0) {\n          end = this.size + end;\n        }\n        size = end - start;\n      }\n    }\n    return BlobManager.createFromOptions({\n      blobId: this.data.blobId,\n      offset,\n      size,\n    });\n  }\n\n  /**\n   * This method is in the standard, but not actually implemented by\n   * any browsers at this point. It's important for how Blobs work in\n   * React Native, however, since we cannot de-allocate resources automatically,\n   * so consumers need to explicitly de-allocate them.\n   *\n   * Note that the semantics around Blobs created via `blob.slice()`\n   * and `new Blob([blob])` are different. `blob.slice()` creates a\n   * new *view* onto the same binary data, so calling `close()` on any\n   * of those views is enough to deallocate the data, whereas\n   * `new Blob([blob, ...])` actually copies the data in memory.\n   */\n  close() {\n    const BlobManager = require('./BlobManager');\n    BlobManager.release(this.data.blobId);\n    this.data = null;\n  }\n\n  /**\n   * Size of the data contained in the Blob object, in bytes.\n   */\n  get size(): number {\n    return this.data.size;\n  }\n\n  /*\n   * String indicating the MIME type of the data contained in the Blob.\n   * If the type is unknown, this string is empty.\n   */\n  get type(): string {\n    return this.data.type || '';\n  }\n}\n\nmodule.exports = Blob;\n"]},"metadata":{},"sourceType":"script"}