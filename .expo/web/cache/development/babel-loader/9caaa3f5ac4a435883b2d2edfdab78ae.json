{"ast":null,"code":"'use strict';\n\nvar Platform = require(\"./Platform\");\n\nvar invariant = require('fbjs/lib/invariant');\n\nvar MetroHMRClient = require('metro/src/lib/bundle-modules/HMRClient');\n\nvar HMRClient = {\n  enable(platform, bundleEntry, host, port) {\n    invariant(platform, 'Missing required parameter `platform`');\n    invariant(bundleEntry, 'Missing required paramenter `bundleEntry`');\n    invariant(host, 'Missing required paramenter `host`');\n\n    var HMRLoadingView = require(\"./HMRLoadingView\");\n\n    var wsHostPort = port !== null && port !== '' ? \"\".concat(host, \":\").concat(port) : host;\n    bundleEntry = bundleEntry.replace(/\\.(bundle|delta)/, '.js');\n    var wsUrl = \"ws://\".concat(wsHostPort, \"/hot?\") + \"platform=\".concat(platform, \"&\") + \"bundleEntry=\".concat(bundleEntry);\n    var hmrClient = new MetroHMRClient(wsUrl);\n    hmrClient.on('connection-error', e => {\n      var error = \"Hot loading isn't working because it cannot connect to the development server.\\n\\nTry the following to fix the issue:\\n- Ensure that the packager server is running and available on the same network\";\n\n      if (Platform.OS === 'ios') {\n        error += \"\\n- Ensure that the Packager server URL is correctly set in AppDelegate\";\n      } else {\n        error += \"\\n- Ensure that your device/emulator is connected to your machine and has USB debugging enabled - run 'adb devices' to see a list of connected devices\\n- If you're on a physical device connected to the same machine, run 'adb reverse tcp:8081 tcp:8081' to forward requests from your device\\n- If your device is on the same Wi-Fi network, set 'Debug server host & port for device' in 'Dev settings' to your machine's IP address and the port of the local dev server - e.g. 10.0.1.1:8081\";\n      }\n\n      error += \"\\n\\nURL: \".concat(host, \":\").concat(port, \"\\n\\nError: \").concat(e.message);\n      throw new Error(error);\n    });\n    hmrClient.on('update-start', () => {\n      HMRLoadingView.showMessage('Hot Loading...');\n    });\n    hmrClient.on('update', () => {\n      if (Platform.OS === 'ios') {\n        var RCTRedBox = require(\"../BatchedBridge/NativeModules\").RedBox;\n\n        RCTRedBox && RCTRedBox.dismiss && RCTRedBox.dismiss();\n      } else {\n        var RCTExceptionsManager = require(\"../BatchedBridge/NativeModules\").ExceptionsManager;\n\n        RCTExceptionsManager && RCTExceptionsManager.dismissRedbox && RCTExceptionsManager.dismissRedbox();\n      }\n    });\n    hmrClient.on('update-done', () => {\n      HMRLoadingView.hide();\n    });\n    hmrClient.on('error', data => {\n      HMRLoadingView.hide();\n      throw new Error(\"\".concat(data.type, \" \").concat(data.message));\n    });\n    hmrClient.enable();\n  }\n\n};\nmodule.exports = HMRClient;","map":{"version":3,"sources":["/Users/ash/Documents/DevSpace/MobileProject/ReactNative/InProgres/InterView/symmetrical-octo-barnacle/node_modules/react-native/Libraries/Utilities/HMRClient.js"],"names":["Platform","require","invariant","MetroHMRClient","HMRClient","enable","platform","bundleEntry","host","port","HMRLoadingView","wsHostPort","replace","wsUrl","hmrClient","on","e","error","OS","message","Error","showMessage","RCTRedBox","RedBox","dismiss","RCTExceptionsManager","ExceptionsManager","dismissRedbox","hide","data","type","module","exports"],"mappings":"AASA;;AAEA,IAAMA,QAAQ,GAAGC,OAAO,cAAxB;;AACA,IAAMC,SAAS,GAAGD,OAAO,CAAC,oBAAD,CAAzB;;AAEA,IAAME,cAAc,GAAGF,OAAO,CAAC,wCAAD,CAA9B;;AAMA,IAAMG,SAAS,GAAG;AAChBC,EAAAA,MAAM,CAACC,QAAD,EAAmBC,WAAnB,EAAwCC,IAAxC,EAAsDC,IAAtD,EAAoE;AACxEP,IAAAA,SAAS,CAACI,QAAD,EAAW,uCAAX,CAAT;AACAJ,IAAAA,SAAS,CAACK,WAAD,EAAc,2CAAd,CAAT;AACAL,IAAAA,SAAS,CAACM,IAAD,EAAO,oCAAP,CAAT;;AAGA,QAAME,cAAc,GAAGT,OAAO,oBAA9B;;AAEA,QAAMU,UAAU,GAAGF,IAAI,KAAK,IAAT,IAAiBA,IAAI,KAAK,EAA1B,aAAkCD,IAAlC,cAA0CC,IAA1C,IAAmDD,IAAtE;AAEAD,IAAAA,WAAW,GAAGA,WAAW,CAACK,OAAZ,CAAoB,kBAApB,EAAwC,KAAxC,CAAd;AAGA,QAAMC,KAAK,GACT,eAAQF,UAAR,gCACYL,QADZ,+BAEeC,WAFf,CADF;AAKA,QAAMO,SAAS,GAAG,IAAIX,cAAJ,CAAmBU,KAAnB,CAAlB;AAEAC,IAAAA,SAAS,CAACC,EAAV,CAAa,kBAAb,EAAiCC,CAAC,IAAI;AACpC,UAAIC,KAAK,0MAAT;;AAKA,UAAIjB,QAAQ,CAACkB,EAAT,KAAgB,KAApB,EAA2B;AACzBD,QAAAA,KAAK,6EAAL;AAED,OAHD,MAGO;AACLA,QAAAA,KAAK,yeAAL;AAID;;AAEDA,MAAAA,KAAK,uBAEJT,IAFI,cAEIC,IAFJ,wBAIFO,CAAC,CAACG,OAJA,CAAL;AAMA,YAAM,IAAIC,KAAJ,CAAUH,KAAV,CAAN;AACD,KAvBD;AAyBAH,IAAAA,SAAS,CAACC,EAAV,CAAa,cAAb,EAA6B,MAAM;AACjCL,MAAAA,cAAc,CAACW,WAAf,CAA2B,gBAA3B;AACD,KAFD;AAIAP,IAAAA,SAAS,CAACC,EAAV,CAAa,QAAb,EAAuB,MAAM;AAC3B,UAAIf,QAAQ,CAACkB,EAAT,KAAgB,KAApB,EAA2B;AACzB,YAAMI,SAAS,GAAGrB,OAAO,kCAAP,CAA0CsB,MAA5D;;AACAD,QAAAA,SAAS,IAAIA,SAAS,CAACE,OAAvB,IAAkCF,SAAS,CAACE,OAAV,EAAlC;AACD,OAHD,MAGO;AACL,YAAMC,oBAAoB,GAAGxB,OAAO,kCAAP,CAA0CyB,iBAAvE;;AACAD,QAAAA,oBAAoB,IAClBA,oBAAoB,CAACE,aADvB,IAEEF,oBAAoB,CAACE,aAArB,EAFF;AAGD;AACF,KAVD;AAYAb,IAAAA,SAAS,CAACC,EAAV,CAAa,aAAb,EAA4B,MAAM;AAChCL,MAAAA,cAAc,CAACkB,IAAf;AACD,KAFD;AAIAd,IAAAA,SAAS,CAACC,EAAV,CAAa,OAAb,EAAsBc,IAAI,IAAI;AAC5BnB,MAAAA,cAAc,CAACkB,IAAf;AACA,YAAM,IAAIR,KAAJ,WAAaS,IAAI,CAACC,IAAlB,cAA0BD,IAAI,CAACV,OAA/B,EAAN;AACD,KAHD;AAKAL,IAAAA,SAAS,CAACT,MAAV;AACD;;AAxEe,CAAlB;AA2EA0B,MAAM,CAACC,OAAP,GAAiB5B,SAAjB","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n'use strict';\n\nconst Platform = require('./Platform');\nconst invariant = require('fbjs/lib/invariant');\n\nconst MetroHMRClient = require('metro/src/lib/bundle-modules/HMRClient');\n\n/**\n * HMR Client that receives from the server HMR updates and propagates them\n * runtime to reflects those changes.\n */\nconst HMRClient = {\n  enable(platform: string, bundleEntry: string, host: string, port: number) {\n    invariant(platform, 'Missing required parameter `platform`');\n    invariant(bundleEntry, 'Missing required paramenter `bundleEntry`');\n    invariant(host, 'Missing required paramenter `host`');\n\n    // Moving to top gives errors due to NativeModules not being initialized\n    const HMRLoadingView = require('./HMRLoadingView');\n\n    const wsHostPort = port !== null && port !== '' ? `${host}:${port}` : host;\n\n    bundleEntry = bundleEntry.replace(/\\.(bundle|delta)/, '.js');\n\n    // Build the websocket url\n    const wsUrl =\n      `ws://${wsHostPort}/hot?` +\n      `platform=${platform}&` +\n      `bundleEntry=${bundleEntry}`;\n\n    const hmrClient = new MetroHMRClient(wsUrl);\n\n    hmrClient.on('connection-error', e => {\n      let error = `Hot loading isn't working because it cannot connect to the development server.\n\nTry the following to fix the issue:\n- Ensure that the packager server is running and available on the same network`;\n\n      if (Platform.OS === 'ios') {\n        error += `\n- Ensure that the Packager server URL is correctly set in AppDelegate`;\n      } else {\n        error += `\n- Ensure that your device/emulator is connected to your machine and has USB debugging enabled - run 'adb devices' to see a list of connected devices\n- If you're on a physical device connected to the same machine, run 'adb reverse tcp:8081 tcp:8081' to forward requests from your device\n- If your device is on the same Wi-Fi network, set 'Debug server host & port for device' in 'Dev settings' to your machine's IP address and the port of the local dev server - e.g. 10.0.1.1:8081`;\n      }\n\n      error += `\n\nURL: ${host}:${port}\n\nError: ${e.message}`;\n\n      throw new Error(error);\n    });\n\n    hmrClient.on('update-start', () => {\n      HMRLoadingView.showMessage('Hot Loading...');\n    });\n\n    hmrClient.on('update', () => {\n      if (Platform.OS === 'ios') {\n        const RCTRedBox = require('../BatchedBridge/NativeModules').RedBox;\n        RCTRedBox && RCTRedBox.dismiss && RCTRedBox.dismiss();\n      } else {\n        const RCTExceptionsManager = require('../BatchedBridge/NativeModules').ExceptionsManager;\n        RCTExceptionsManager &&\n          RCTExceptionsManager.dismissRedbox &&\n          RCTExceptionsManager.dismissRedbox();\n      }\n    });\n\n    hmrClient.on('update-done', () => {\n      HMRLoadingView.hide();\n    });\n\n    hmrClient.on('error', data => {\n      HMRLoadingView.hide();\n      throw new Error(`${data.type} ${data.message}`);\n    });\n\n    hmrClient.enable();\n  },\n};\n\nmodule.exports = HMRClient;\n"]},"metadata":{},"sourceType":"script"}