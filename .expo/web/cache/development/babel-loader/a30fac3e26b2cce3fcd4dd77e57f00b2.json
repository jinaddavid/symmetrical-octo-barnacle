{"ast":null,"code":"'use strict';\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nvar NativeModules = require(\"../BatchedBridge/NativeModules\");\n\nclass PermissionsAndroid {\n  constructor() {\n    this.PERMISSIONS = {\n      READ_CALENDAR: 'android.permission.READ_CALENDAR',\n      WRITE_CALENDAR: 'android.permission.WRITE_CALENDAR',\n      CAMERA: 'android.permission.CAMERA',\n      READ_CONTACTS: 'android.permission.READ_CONTACTS',\n      WRITE_CONTACTS: 'android.permission.WRITE_CONTACTS',\n      GET_ACCOUNTS: 'android.permission.GET_ACCOUNTS',\n      ACCESS_FINE_LOCATION: 'android.permission.ACCESS_FINE_LOCATION',\n      ACCESS_COARSE_LOCATION: 'android.permission.ACCESS_COARSE_LOCATION',\n      RECORD_AUDIO: 'android.permission.RECORD_AUDIO',\n      READ_PHONE_STATE: 'android.permission.READ_PHONE_STATE',\n      CALL_PHONE: 'android.permission.CALL_PHONE',\n      READ_CALL_LOG: 'android.permission.READ_CALL_LOG',\n      WRITE_CALL_LOG: 'android.permission.WRITE_CALL_LOG',\n      ADD_VOICEMAIL: 'com.android.voicemail.permission.ADD_VOICEMAIL',\n      USE_SIP: 'android.permission.USE_SIP',\n      PROCESS_OUTGOING_CALLS: 'android.permission.PROCESS_OUTGOING_CALLS',\n      BODY_SENSORS: 'android.permission.BODY_SENSORS',\n      SEND_SMS: 'android.permission.SEND_SMS',\n      RECEIVE_SMS: 'android.permission.RECEIVE_SMS',\n      READ_SMS: 'android.permission.READ_SMS',\n      RECEIVE_WAP_PUSH: 'android.permission.RECEIVE_WAP_PUSH',\n      RECEIVE_MMS: 'android.permission.RECEIVE_MMS',\n      READ_EXTERNAL_STORAGE: 'android.permission.READ_EXTERNAL_STORAGE',\n      WRITE_EXTERNAL_STORAGE: 'android.permission.WRITE_EXTERNAL_STORAGE'\n    };\n    this.RESULTS = {\n      GRANTED: 'granted',\n      DENIED: 'denied',\n      NEVER_ASK_AGAIN: 'never_ask_again'\n    };\n  }\n\n  checkPermission(permission) {\n    console.warn('\"PermissionsAndroid.checkPermission\" is deprecated. Use \"PermissionsAndroid.check\" instead');\n    return NativeModules.PermissionsAndroid.checkPermission(permission);\n  }\n\n  check(permission) {\n    return NativeModules.PermissionsAndroid.checkPermission(permission);\n  }\n\n  requestPermission(permission, rationale) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      console.warn('\"PermissionsAndroid.requestPermission\" is deprecated. Use \"PermissionsAndroid.request\" instead');\n      var response = yield _this.request(permission, rationale);\n      return response === _this.RESULTS.GRANTED;\n    })();\n  }\n\n  request(permission, rationale) {\n    return _asyncToGenerator(function* () {\n      if (rationale) {\n        var shouldShowRationale = yield NativeModules.PermissionsAndroid.shouldShowRequestPermissionRationale(permission);\n\n        if (shouldShowRationale) {\n          return new Promise((resolve, reject) => {\n            NativeModules.DialogManagerAndroid.showAlert(rationale, () => reject(new Error('Error showing rationale')), () => resolve(NativeModules.PermissionsAndroid.requestPermission(permission)));\n          });\n        }\n      }\n\n      return NativeModules.PermissionsAndroid.requestPermission(permission);\n    })();\n  }\n\n  requestMultiple(permissions) {\n    return NativeModules.PermissionsAndroid.requestMultiplePermissions(permissions);\n  }\n\n}\n\nPermissionsAndroid = new PermissionsAndroid();\nmodule.exports = PermissionsAndroid;","map":{"version":3,"sources":["/Users/ash/Documents/DevSpace/MobileProject/ReactNative/InProgres/InterView/symmetrical-octo-barnacle/node_modules/react-native/Libraries/PermissionsAndroid/PermissionsAndroid.js"],"names":["NativeModules","require","PermissionsAndroid","constructor","PERMISSIONS","READ_CALENDAR","WRITE_CALENDAR","CAMERA","READ_CONTACTS","WRITE_CONTACTS","GET_ACCOUNTS","ACCESS_FINE_LOCATION","ACCESS_COARSE_LOCATION","RECORD_AUDIO","READ_PHONE_STATE","CALL_PHONE","READ_CALL_LOG","WRITE_CALL_LOG","ADD_VOICEMAIL","USE_SIP","PROCESS_OUTGOING_CALLS","BODY_SENSORS","SEND_SMS","RECEIVE_SMS","READ_SMS","RECEIVE_WAP_PUSH","RECEIVE_MMS","READ_EXTERNAL_STORAGE","WRITE_EXTERNAL_STORAGE","RESULTS","GRANTED","DENIED","NEVER_ASK_AGAIN","checkPermission","permission","console","warn","check","requestPermission","rationale","response","request","shouldShowRationale","shouldShowRequestPermissionRationale","Promise","resolve","reject","DialogManagerAndroid","showAlert","Error","requestMultiple","permissions","requestMultiplePermissions","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst NativeModules = require('../BatchedBridge/NativeModules');\n\ntype Rationale = {\n  title: string,\n  message: string,\n};\n\ntype PermissionStatus = 'granted' | 'denied' | 'never_ask_again';\n/**\n * `PermissionsAndroid` provides access to Android M's new permissions model.\n *\n * See https://facebook.github.io/react-native/docs/permissionsandroid.html\n */\n\nclass PermissionsAndroid {\n  PERMISSIONS: Object;\n  RESULTS: Object;\n\n  constructor() {\n    /**\n     * A list of specified \"dangerous\" permissions that require prompting the user\n     */\n    this.PERMISSIONS = {\n      READ_CALENDAR: 'android.permission.READ_CALENDAR',\n      WRITE_CALENDAR: 'android.permission.WRITE_CALENDAR',\n      CAMERA: 'android.permission.CAMERA',\n      READ_CONTACTS: 'android.permission.READ_CONTACTS',\n      WRITE_CONTACTS: 'android.permission.WRITE_CONTACTS',\n      GET_ACCOUNTS: 'android.permission.GET_ACCOUNTS',\n      ACCESS_FINE_LOCATION: 'android.permission.ACCESS_FINE_LOCATION',\n      ACCESS_COARSE_LOCATION: 'android.permission.ACCESS_COARSE_LOCATION',\n      RECORD_AUDIO: 'android.permission.RECORD_AUDIO',\n      READ_PHONE_STATE: 'android.permission.READ_PHONE_STATE',\n      CALL_PHONE: 'android.permission.CALL_PHONE',\n      READ_CALL_LOG: 'android.permission.READ_CALL_LOG',\n      WRITE_CALL_LOG: 'android.permission.WRITE_CALL_LOG',\n      ADD_VOICEMAIL: 'com.android.voicemail.permission.ADD_VOICEMAIL',\n      USE_SIP: 'android.permission.USE_SIP',\n      PROCESS_OUTGOING_CALLS: 'android.permission.PROCESS_OUTGOING_CALLS',\n      BODY_SENSORS: 'android.permission.BODY_SENSORS',\n      SEND_SMS: 'android.permission.SEND_SMS',\n      RECEIVE_SMS: 'android.permission.RECEIVE_SMS',\n      READ_SMS: 'android.permission.READ_SMS',\n      RECEIVE_WAP_PUSH: 'android.permission.RECEIVE_WAP_PUSH',\n      RECEIVE_MMS: 'android.permission.RECEIVE_MMS',\n      READ_EXTERNAL_STORAGE: 'android.permission.READ_EXTERNAL_STORAGE',\n      WRITE_EXTERNAL_STORAGE: 'android.permission.WRITE_EXTERNAL_STORAGE',\n    };\n\n    this.RESULTS = {\n      GRANTED: 'granted',\n      DENIED: 'denied',\n      NEVER_ASK_AGAIN: 'never_ask_again',\n    };\n  }\n\n  /**\n   * DEPRECATED - use check\n   *\n   * Returns a promise resolving to a boolean value as to whether the specified\n   * permissions has been granted\n   *\n   * @deprecated\n   */\n  checkPermission(permission: string): Promise<boolean> {\n    console.warn(\n      '\"PermissionsAndroid.checkPermission\" is deprecated. Use \"PermissionsAndroid.check\" instead',\n    );\n    return NativeModules.PermissionsAndroid.checkPermission(permission);\n  }\n\n  /**\n   * Returns a promise resolving to a boolean value as to whether the specified\n   * permissions has been granted\n   *\n   * See https://facebook.github.io/react-native/docs/permissionsandroid.html#check\n   */\n  check(permission: string): Promise<boolean> {\n    return NativeModules.PermissionsAndroid.checkPermission(permission);\n  }\n\n  /**\n   * DEPRECATED - use request\n   *\n   * Prompts the user to enable a permission and returns a promise resolving to a\n   * boolean value indicating whether the user allowed or denied the request\n   *\n   * If the optional rationale argument is included (which is an object with a\n   * `title` and `message`), this function checks with the OS whether it is\n   * necessary to show a dialog explaining why the permission is needed\n   * (https://developer.android.com/training/permissions/requesting.html#explain)\n   * and then shows the system permission dialog\n   *\n   * @deprecated\n   */\n  async requestPermission(\n    permission: string,\n    rationale?: Rationale,\n  ): Promise<boolean> {\n    console.warn(\n      '\"PermissionsAndroid.requestPermission\" is deprecated. Use \"PermissionsAndroid.request\" instead',\n    );\n    const response = await this.request(permission, rationale);\n    return response === this.RESULTS.GRANTED;\n  }\n\n  /**\n   * Prompts the user to enable a permission and returns a promise resolving to a\n   * string value indicating whether the user allowed or denied the request\n   *\n   * See https://facebook.github.io/react-native/docs/permissionsandroid.html#request\n   */\n  async request(\n    permission: string,\n    rationale?: Rationale,\n  ): Promise<PermissionStatus> {\n    if (rationale) {\n      const shouldShowRationale = await NativeModules.PermissionsAndroid.shouldShowRequestPermissionRationale(\n        permission,\n      );\n\n      if (shouldShowRationale) {\n        return new Promise((resolve, reject) => {\n          NativeModules.DialogManagerAndroid.showAlert(\n            rationale,\n            () => reject(new Error('Error showing rationale')),\n            () =>\n              resolve(\n                NativeModules.PermissionsAndroid.requestPermission(permission),\n              ),\n          );\n        });\n      }\n    }\n    return NativeModules.PermissionsAndroid.requestPermission(permission);\n  }\n\n  /**\n   * Prompts the user to enable multiple permissions in the same dialog and\n   * returns an object with the permissions as keys and strings as values\n   * indicating whether the user allowed or denied the request\n   *\n   * See https://facebook.github.io/react-native/docs/permissionsandroid.html#requestmultiple\n   */\n  requestMultiple(\n    permissions: Array<string>,\n  ): Promise<{[permission: string]: PermissionStatus}> {\n    return NativeModules.PermissionsAndroid.requestMultiplePermissions(\n      permissions,\n    );\n  }\n}\n\nPermissionsAndroid = new PermissionsAndroid();\n\nmodule.exports = PermissionsAndroid;\n"]},"metadata":{},"sourceType":"script"}