{"ast":null,"code":"'use strict';\n\nvar invariant = require('fbjs/lib/invariant');\n\nclass EventSubscriptionVendor {\n  constructor() {\n    this._subscriptionsForType = {};\n    this._currentSubscription = null;\n  }\n\n  addSubscription(eventType, subscription) {\n    invariant(subscription.subscriber === this, 'The subscriber of the subscription is incorrectly set.');\n\n    if (!this._subscriptionsForType[eventType]) {\n      this._subscriptionsForType[eventType] = [];\n    }\n\n    var key = this._subscriptionsForType[eventType].length;\n\n    this._subscriptionsForType[eventType].push(subscription);\n\n    subscription.eventType = eventType;\n    subscription.key = key;\n    return subscription;\n  }\n\n  removeAllSubscriptions(eventType) {\n    if (eventType === undefined) {\n      this._subscriptionsForType = {};\n    } else {\n      delete this._subscriptionsForType[eventType];\n    }\n  }\n\n  removeSubscription(subscription) {\n    var eventType = subscription.eventType;\n    var key = subscription.key;\n    var subscriptionsForType = this._subscriptionsForType[eventType];\n\n    if (subscriptionsForType) {\n      delete subscriptionsForType[key];\n    }\n  }\n\n  getSubscriptionsForType(eventType) {\n    return this._subscriptionsForType[eventType];\n  }\n\n}\n\nmodule.exports = EventSubscriptionVendor;","map":{"version":3,"sources":["/Users/ash/Documents/DevSpace/MobileProject/ReactNative/InProgres/InterView/symmetrical-octo-barnacle/node_modules/react-native/Libraries/vendor/emitter/EventSubscriptionVendor.js"],"names":["invariant","require","EventSubscriptionVendor","constructor","_subscriptionsForType","_currentSubscription","addSubscription","eventType","subscription","subscriber","key","length","push","removeAllSubscriptions","undefined","removeSubscription","subscriptionsForType","getSubscriptionsForType","module","exports"],"mappings":"AAUA;;AAEA,IAAMA,SAAS,GAAGC,OAAO,CAAC,oBAAD,CAAzB;;AAQA,MAAMC,uBAAN,CAA8B;AAI5BC,EAAAA,WAAW,GAAG;AACZ,SAAKC,qBAAL,GAA6B,EAA7B;AACA,SAAKC,oBAAL,GAA4B,IAA5B;AACD;;AAQDC,EAAAA,eAAe,CACbC,SADa,EAEbC,YAFa,EAGM;AACnBR,IAAAA,SAAS,CACPQ,YAAY,CAACC,UAAb,KAA4B,IADrB,EAEP,wDAFO,CAAT;;AAIA,QAAI,CAAC,KAAKL,qBAAL,CAA2BG,SAA3B,CAAL,EAA4C;AAC1C,WAAKH,qBAAL,CAA2BG,SAA3B,IAAwC,EAAxC;AACD;;AACD,QAAMG,GAAG,GAAG,KAAKN,qBAAL,CAA2BG,SAA3B,EAAsCI,MAAlD;;AACA,SAAKP,qBAAL,CAA2BG,SAA3B,EAAsCK,IAAtC,CAA2CJ,YAA3C;;AACAA,IAAAA,YAAY,CAACD,SAAb,GAAyBA,SAAzB;AACAC,IAAAA,YAAY,CAACE,GAAb,GAAmBA,GAAnB;AACA,WAAOF,YAAP;AACD;;AAQDK,EAAAA,sBAAsB,CAACN,SAAD,EAAqB;AACzC,QAAIA,SAAS,KAAKO,SAAlB,EAA6B;AAC3B,WAAKV,qBAAL,GAA6B,EAA7B;AACD,KAFD,MAEO;AACL,aAAO,KAAKA,qBAAL,CAA2BG,SAA3B,CAAP;AACD;AACF;;AAQDQ,EAAAA,kBAAkB,CAACP,YAAD,EAAuB;AACvC,QAAMD,SAAS,GAAGC,YAAY,CAACD,SAA/B;AACA,QAAMG,GAAG,GAAGF,YAAY,CAACE,GAAzB;AAEA,QAAMM,oBAAoB,GAAG,KAAKZ,qBAAL,CAA2BG,SAA3B,CAA7B;;AACA,QAAIS,oBAAJ,EAA0B;AACxB,aAAOA,oBAAoB,CAACN,GAAD,CAA3B;AACD;AACF;;AAcDO,EAAAA,uBAAuB,CAACV,SAAD,EAA0C;AAC/D,WAAO,KAAKH,qBAAL,CAA2BG,SAA3B,CAAP;AACD;;AA7E2B;;AAgF9BW,MAAM,CAACC,OAAP,GAAiBjB,uBAAjB","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst invariant = require('fbjs/lib/invariant');\n\nimport type EventSubscription from './EventSubscription';\n\n/**\n * EventSubscriptionVendor stores a set of EventSubscriptions that are\n * subscribed to a particular event type.\n */\nclass EventSubscriptionVendor {\n  _subscriptionsForType: Object;\n  _currentSubscription: ?EventSubscription;\n\n  constructor() {\n    this._subscriptionsForType = {};\n    this._currentSubscription = null;\n  }\n\n  /**\n   * Adds a subscription keyed by an event type.\n   *\n   * @param {string} eventType\n   * @param {EventSubscription} subscription\n   */\n  addSubscription(\n    eventType: string,\n    subscription: EventSubscription,\n  ): EventSubscription {\n    invariant(\n      subscription.subscriber === this,\n      'The subscriber of the subscription is incorrectly set.',\n    );\n    if (!this._subscriptionsForType[eventType]) {\n      this._subscriptionsForType[eventType] = [];\n    }\n    const key = this._subscriptionsForType[eventType].length;\n    this._subscriptionsForType[eventType].push(subscription);\n    subscription.eventType = eventType;\n    subscription.key = key;\n    return subscription;\n  }\n\n  /**\n   * Removes a bulk set of the subscriptions.\n   *\n   * @param {?string} eventType - Optional name of the event type whose\n   *   registered supscriptions to remove, if null remove all subscriptions.\n   */\n  removeAllSubscriptions(eventType: ?string) {\n    if (eventType === undefined) {\n      this._subscriptionsForType = {};\n    } else {\n      delete this._subscriptionsForType[eventType];\n    }\n  }\n\n  /**\n   * Removes a specific subscription. Instead of calling this function, call\n   * `subscription.remove()` directly.\n   *\n   * @param {object} subscription\n   */\n  removeSubscription(subscription: Object) {\n    const eventType = subscription.eventType;\n    const key = subscription.key;\n\n    const subscriptionsForType = this._subscriptionsForType[eventType];\n    if (subscriptionsForType) {\n      delete subscriptionsForType[key];\n    }\n  }\n\n  /**\n   * Returns the array of subscriptions that are currently registered for the\n   * given event type.\n   *\n   * Note: This array can be potentially sparse as subscriptions are deleted\n   * from it when they are removed.\n   *\n   * TODO: This returns a nullable array. wat?\n   *\n   * @param {string} eventType\n   * @returns {?array}\n   */\n  getSubscriptionsForType(eventType: string): ?[EventSubscription] {\n    return this._subscriptionsForType[eventType];\n  }\n}\n\nmodule.exports = EventSubscriptionVendor;\n"]},"metadata":{},"sourceType":"script"}