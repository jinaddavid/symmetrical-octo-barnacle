{"ast":null,"code":"'use strict';\n\nvar exceptionID = 0;\n\nfunction reportException(e, isFatal) {\n  var {\n    ExceptionsManager\n  } = require(\"../BatchedBridge/NativeModules\");\n\n  if (ExceptionsManager) {\n    var parseErrorStack = require(\"./Devtools/parseErrorStack\");\n\n    var stack = parseErrorStack(e);\n    var currentExceptionID = ++exceptionID;\n\n    if (isFatal) {\n      ExceptionsManager.reportFatalException(e.message, stack, currentExceptionID);\n    } else {\n      ExceptionsManager.reportSoftException(e.message, stack, currentExceptionID);\n    }\n\n    if (__DEV__) {\n      var symbolicateStackTrace = require(\"./Devtools/symbolicateStackTrace\");\n\n      symbolicateStackTrace(stack).then(prettyStack => {\n        if (prettyStack) {\n          ExceptionsManager.updateExceptionMessage(e.message, prettyStack, currentExceptionID);\n        } else {\n          throw new Error('The stack is null');\n        }\n      }).catch(error => console.warn('Unable to symbolicate stack trace: ' + error.message));\n    }\n  }\n}\n\nfunction handleException(e, isFatal) {\n  if (!e.message) {\n    e = new Error(e);\n  }\n\n  if (console._errorOriginal) {\n    console._errorOriginal(e.message);\n  } else {\n    console.error(e.message);\n  }\n\n  reportException(e, isFatal);\n}\n\nfunction reactConsoleErrorHandler() {\n  console._errorOriginal.apply(console, arguments);\n\n  if (!console.reportErrorsAsExceptions) {\n    return;\n  }\n\n  if (arguments[0] && arguments[0].stack) {\n    reportException(arguments[0], false);\n  } else {\n    var stringifySafe = require(\"../Utilities/stringifySafe\");\n\n    var str = Array.prototype.map.call(arguments, stringifySafe).join(', ');\n\n    if (str.slice(0, 10) === '\"Warning: ') {\n      return;\n    }\n\n    var error = new Error('console.error: ' + str);\n    error.framesToPop = 1;\n    reportException(error, false);\n  }\n}\n\nfunction installConsoleErrorReporter() {\n  if (console._errorOriginal) {\n    return;\n  }\n\n  console._errorOriginal = console.error.bind(console);\n  console.error = reactConsoleErrorHandler;\n\n  if (console.reportErrorsAsExceptions === undefined) {\n    console.reportErrorsAsExceptions = true;\n  }\n}\n\nmodule.exports = {\n  handleException,\n  installConsoleErrorReporter\n};","map":{"version":3,"sources":["/Users/ash/Documents/DevSpace/MobileProject/ReactNative/InProgres/InterView/symmetrical-octo-barnacle/node_modules/react-native/Libraries/Core/ExceptionsManager.js"],"names":["exceptionID","reportException","e","isFatal","ExceptionsManager","require","parseErrorStack","stack","currentExceptionID","reportFatalException","message","reportSoftException","__DEV__","symbolicateStackTrace","then","prettyStack","updateExceptionMessage","Error","catch","error","console","warn","handleException","_errorOriginal","reactConsoleErrorHandler","apply","arguments","reportErrorsAsExceptions","stringifySafe","str","Array","prototype","map","call","join","slice","framesToPop","installConsoleErrorReporter","bind","undefined","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nimport type {ExtendedError} from './Devtools/parseErrorStack';\n\n/**\n * Handles the developer-visible aspect of errors and exceptions\n */\nlet exceptionID = 0;\nfunction reportException(e: ExtendedError, isFatal: boolean) {\n  const {ExceptionsManager} = require('../BatchedBridge/NativeModules');\n  if (ExceptionsManager) {\n    const parseErrorStack = require('./Devtools/parseErrorStack');\n    const stack = parseErrorStack(e);\n    const currentExceptionID = ++exceptionID;\n    if (isFatal) {\n      ExceptionsManager.reportFatalException(\n        e.message,\n        stack,\n        currentExceptionID,\n      );\n    } else {\n      ExceptionsManager.reportSoftException(\n        e.message,\n        stack,\n        currentExceptionID,\n      );\n    }\n    if (__DEV__) {\n      const symbolicateStackTrace = require('./Devtools/symbolicateStackTrace');\n      symbolicateStackTrace(stack)\n        .then(prettyStack => {\n          if (prettyStack) {\n            ExceptionsManager.updateExceptionMessage(\n              e.message,\n              prettyStack,\n              currentExceptionID,\n            );\n          } else {\n            throw new Error('The stack is null');\n          }\n        })\n        .catch(error =>\n          console.warn('Unable to symbolicate stack trace: ' + error.message),\n        );\n    }\n  }\n}\n\ndeclare var console: typeof console & {\n  _errorOriginal: Function,\n  reportErrorsAsExceptions: boolean,\n};\n\n/**\n * Logs exceptions to the (native) console and displays them\n */\nfunction handleException(e: Error, isFatal: boolean) {\n  // Workaround for reporting errors caused by `throw 'some string'`\n  // Unfortunately there is no way to figure out the stacktrace in this\n  // case, so if you ended up here trying to trace an error, look for\n  // `throw '<error message>'` somewhere in your codebase.\n  if (!e.message) {\n    e = new Error(e);\n  }\n  if (console._errorOriginal) {\n    console._errorOriginal(e.message);\n  } else {\n    console.error(e.message);\n  }\n  reportException(e, isFatal);\n}\n\nfunction reactConsoleErrorHandler() {\n  console._errorOriginal.apply(console, arguments);\n  if (!console.reportErrorsAsExceptions) {\n    return;\n  }\n\n  if (arguments[0] && arguments[0].stack) {\n    reportException(arguments[0], /* isFatal */ false);\n  } else {\n    const stringifySafe = require('../Utilities/stringifySafe');\n    const str = Array.prototype.map.call(arguments, stringifySafe).join(', ');\n    if (str.slice(0, 10) === '\"Warning: ') {\n      // React warnings use console.error so that a stack trace is shown, but\n      // we don't (currently) want these to show a redbox\n      // (Note: Logic duplicated in polyfills/console.js.)\n      return;\n    }\n    const error: ExtendedError = new Error('console.error: ' + str);\n    error.framesToPop = 1;\n    reportException(error, /* isFatal */ false);\n  }\n}\n\n/**\n * Shows a redbox with stacktrace for all console.error messages.  Disable by\n * setting `console.reportErrorsAsExceptions = false;` in your app.\n */\nfunction installConsoleErrorReporter() {\n  // Enable reportErrorsAsExceptions\n  if (console._errorOriginal) {\n    return; // already installed\n  }\n  // Flow doesn't like it when you set arbitrary values on a global object\n  console._errorOriginal = console.error.bind(console);\n  console.error = reactConsoleErrorHandler;\n  if (console.reportErrorsAsExceptions === undefined) {\n    // Individual apps can disable this\n    // Flow doesn't like it when you set arbitrary values on a global object\n    console.reportErrorsAsExceptions = true;\n  }\n}\n\nmodule.exports = {handleException, installConsoleErrorReporter};\n"]},"metadata":{},"sourceType":"script"}