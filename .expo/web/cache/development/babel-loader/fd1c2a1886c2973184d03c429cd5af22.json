{"ast":null,"code":"'use strict';\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nvar getDevServer = require(\"./getDevServer\");\n\nvar {\n  SourceCode\n} = require(\"../../BatchedBridge/NativeModules\");\n\nvar fetch;\n\nfunction isSourcedFromDisk(sourcePath) {\n  return !/^http/.test(sourcePath) && /[\\\\/]/.test(sourcePath);\n}\n\nfunction symbolicateStackTrace(_x) {\n  return _symbolicateStackTrace.apply(this, arguments);\n}\n\nfunction _symbolicateStackTrace() {\n  _symbolicateStackTrace = _asyncToGenerator(function* (stack) {\n    if (!fetch) {\n      fetch = global.fetch || require(\"../../Network/fetch\").fetch;\n    }\n\n    var devServer = getDevServer();\n\n    if (!devServer.bundleLoadedFromServer) {\n      throw new Error('Bundle was not loaded from the packager');\n    }\n\n    var stackCopy = stack;\n\n    if (SourceCode.scriptURL) {\n      var foundInternalSource = false;\n      stackCopy = stack.map(frame => {\n        if (!foundInternalSource && isSourcedFromDisk(frame.file)) {\n          return _objectSpread(_objectSpread({}, frame), {}, {\n            file: SourceCode.scriptURL\n          });\n        }\n\n        foundInternalSource = true;\n        return frame;\n      });\n    }\n\n    var response = yield fetch(devServer.url + 'symbolicate', {\n      method: 'POST',\n      body: JSON.stringify({\n        stack: stackCopy\n      })\n    });\n    var json = yield response.json();\n    return json.stack;\n  });\n  return _symbolicateStackTrace.apply(this, arguments);\n}\n\nmodule.exports = symbolicateStackTrace;","map":{"version":3,"sources":["/Users/ash/Documents/DevSpace/MobileProject/ReactNative/InProgres/InterView/symmetrical-octo-barnacle/node_modules/react-native/Libraries/Core/Devtools/symbolicateStackTrace.js"],"names":["getDevServer","require","SourceCode","fetch","isSourcedFromDisk","sourcePath","test","symbolicateStackTrace","stack","global","devServer","bundleLoadedFromServer","Error","stackCopy","scriptURL","foundInternalSource","map","frame","file","response","url","method","body","JSON","stringify","json","module","exports"],"mappings":"AAUA;;;;;;;;;;;;AAEA,IAAMA,YAAY,GAAGC,OAAO,kBAA5B;;AAEA,IAAM;AAACC,EAAAA;AAAD,IAAeD,OAAO,qCAA5B;;AAGA,IAAIE,KAAJ;;AAIA,SAASC,iBAAT,CAA2BC,UAA3B,EAAwD;AACtD,SAAO,CAAC,QAAQC,IAAR,CAAaD,UAAb,CAAD,IAA6B,QAAQC,IAAR,CAAaD,UAAb,CAApC;AACD;;SAEcE,qB;;;;;6CAAf,WACEC,KADF,EAE8B;AAY5B,QAAI,CAACL,KAAL,EAAY;AACVA,MAAAA,KAAK,GAAGM,MAAM,CAACN,KAAP,IAAgBF,OAAO,uBAAP,CAA+BE,KAAvD;AACD;;AAED,QAAMO,SAAS,GAAGV,YAAY,EAA9B;;AACA,QAAI,CAACU,SAAS,CAACC,sBAAf,EAAuC;AACrC,YAAM,IAAIC,KAAJ,CAAU,yCAAV,CAAN;AACD;;AAED,QAAIC,SAAS,GAAGL,KAAhB;;AAEA,QAAIN,UAAU,CAACY,SAAf,EAA0B;AACxB,UAAIC,mBAA4B,GAAG,KAAnC;AACAF,MAAAA,SAAS,GAAGL,KAAK,CAACQ,GAAN,CAAWC,KAAD,IAAuB;AAK3C,YAAI,CAACF,mBAAD,IAAwBX,iBAAiB,CAACa,KAAK,CAACC,IAAP,CAA7C,EAA2D;AAEzD,iDAAWD,KAAX;AAAkBC,YAAAA,IAAI,EAAEhB,UAAU,CAACY;AAAnC;AACD;;AAEDC,QAAAA,mBAAmB,GAAG,IAAtB;AACA,eAAOE,KAAP;AACD,OAZW,CAAZ;AAaD;;AAED,QAAME,QAAQ,SAAShB,KAAK,CAACO,SAAS,CAACU,GAAV,GAAgB,aAAjB,EAAgC;AAC1DC,MAAAA,MAAM,EAAE,MADkD;AAE1DC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAChB,QAAAA,KAAK,EAAEK;AAAR,OAAf;AAFoD,KAAhC,CAA5B;AAIA,QAAMY,IAAI,SAASN,QAAQ,CAACM,IAAT,EAAnB;AACA,WAAOA,IAAI,CAACjB,KAAZ;AACD,G;;;;AAEDkB,MAAM,CAACC,OAAP,GAAiBpB,qBAAjB","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst getDevServer = require('./getDevServer');\n\nconst {SourceCode} = require('../../BatchedBridge/NativeModules');\n\n// Avoid requiring fetch on load of this module; see symbolicateStackTrace\nlet fetch;\n\nimport type {StackFrame} from './parseErrorStack';\n\nfunction isSourcedFromDisk(sourcePath: string): boolean {\n  return !/^http/.test(sourcePath) && /[\\\\/]/.test(sourcePath);\n}\n\nasync function symbolicateStackTrace(\n  stack: Array<StackFrame>,\n): Promise<Array<StackFrame>> {\n  // RN currently lazy loads whatwg-fetch using a custom fetch module, which,\n  // when called for the first time, requires and re-exports 'whatwg-fetch'.\n  // However, when a dependency of the project tries to require whatwg-fetch\n  // either directly or indirectly, whatwg-fetch is required before\n  // RN can lazy load whatwg-fetch. As whatwg-fetch checks\n  // for a fetch polyfill before loading, it will in turn try to load\n  // RN's fetch module, which immediately tries to import whatwg-fetch AGAIN.\n  // This causes a circular require which results in RN's fetch module\n  // exporting fetch as 'undefined'.\n  // The fix below postpones trying to load fetch until the first call to symbolicateStackTrace.\n  // At that time, we will have either global.fetch (whatwg-fetch) or RN's fetch.\n  if (!fetch) {\n    fetch = global.fetch || require('../../Network/fetch').fetch;\n  }\n\n  const devServer = getDevServer();\n  if (!devServer.bundleLoadedFromServer) {\n    throw new Error('Bundle was not loaded from the packager');\n  }\n\n  let stackCopy = stack;\n\n  if (SourceCode.scriptURL) {\n    let foundInternalSource: boolean = false;\n    stackCopy = stack.map((frame: StackFrame) => {\n      // If the sources exist on disk rather than appearing to come from the packager,\n      // replace the location with the packager URL until we reach an internal source\n      // which does not have a path (no slashes), indicating a switch from within\n      // the application to a surrounding debugging environment.\n      if (!foundInternalSource && isSourcedFromDisk(frame.file)) {\n        // Copy frame into new object and replace 'file' property\n        return {...frame, file: SourceCode.scriptURL};\n      }\n\n      foundInternalSource = true;\n      return frame;\n    });\n  }\n\n  const response = await fetch(devServer.url + 'symbolicate', {\n    method: 'POST',\n    body: JSON.stringify({stack: stackCopy}),\n  });\n  const json = await response.json();\n  return json.stack;\n}\n\nmodule.exports = symbolicateStackTrace;\n"]},"metadata":{},"sourceType":"script"}