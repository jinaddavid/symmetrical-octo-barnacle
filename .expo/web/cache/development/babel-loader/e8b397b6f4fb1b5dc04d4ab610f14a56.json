{"ast":null,"code":"'use strict';\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar AlertIOS = require(\"./AlertIOS\");\n\nvar NativeModules = require(\"../BatchedBridge/NativeModules\");\n\nvar Platform = require(\"../Utilities/Platform\");\n\nclass Alert {\n  static alert(title, message, buttons, options, type) {\n    if (Platform.OS === 'ios') {\n      if (typeof type !== 'undefined') {\n        console.warn('Alert.alert() with a 5th \"type\" parameter is deprecated and will be removed. Use AlertIOS.prompt() instead.');\n        AlertIOS.alert(title, message, buttons, type);\n        return;\n      }\n\n      AlertIOS.alert(title, message, buttons);\n    } else if (Platform.OS === 'android') {\n      AlertAndroid.alert(title, message, buttons, options);\n    }\n  }\n\n}\n\nclass AlertAndroid {\n  static alert(title, message, buttons, options) {\n    var config = {\n      title: title || '',\n      message: message || ''\n    };\n\n    if (options) {\n      config = _objectSpread(_objectSpread({}, config), {}, {\n        cancelable: options.cancelable\n      });\n    }\n\n    var validButtons = buttons ? buttons.slice(0, 3) : [{\n      text: 'OK'\n    }];\n    var buttonPositive = validButtons.pop();\n    var buttonNegative = validButtons.pop();\n    var buttonNeutral = validButtons.pop();\n\n    if (buttonNeutral) {\n      config = _objectSpread(_objectSpread({}, config), {}, {\n        buttonNeutral: buttonNeutral.text || ''\n      });\n    }\n\n    if (buttonNegative) {\n      config = _objectSpread(_objectSpread({}, config), {}, {\n        buttonNegative: buttonNegative.text || ''\n      });\n    }\n\n    if (buttonPositive) {\n      config = _objectSpread(_objectSpread({}, config), {}, {\n        buttonPositive: buttonPositive.text || ''\n      });\n    }\n\n    NativeModules.DialogManagerAndroid.showAlert(config, errorMessage => console.warn(errorMessage), (action, buttonKey) => {\n      if (action === NativeModules.DialogManagerAndroid.buttonClicked) {\n        if (buttonKey === NativeModules.DialogManagerAndroid.buttonNeutral) {\n          buttonNeutral.onPress && buttonNeutral.onPress();\n        } else if (buttonKey === NativeModules.DialogManagerAndroid.buttonNegative) {\n          buttonNegative.onPress && buttonNegative.onPress();\n        } else if (buttonKey === NativeModules.DialogManagerAndroid.buttonPositive) {\n          buttonPositive.onPress && buttonPositive.onPress();\n        }\n      } else if (action === NativeModules.DialogManagerAndroid.dismissed) {\n        options && options.onDismiss && options.onDismiss();\n      }\n    });\n  }\n\n}\n\nmodule.exports = Alert;","map":{"version":3,"sources":["/Users/ash/Documents/DevSpace/MobileProject/ReactNative/InProgres/InterView/symmetrical-octo-barnacle/node_modules/react-native/Libraries/Alert/Alert.js"],"names":["AlertIOS","require","NativeModules","Platform","Alert","alert","title","message","buttons","options","type","OS","console","warn","AlertAndroid","config","cancelable","validButtons","slice","text","buttonPositive","pop","buttonNegative","buttonNeutral","DialogManagerAndroid","showAlert","errorMessage","action","buttonKey","buttonClicked","onPress","dismissed","onDismiss","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst AlertIOS = require('./AlertIOS');\nconst NativeModules = require('../BatchedBridge/NativeModules');\nconst Platform = require('../Utilities/Platform');\n\nimport type {AlertType, AlertButtonStyle} from './AlertIOS';\n\nexport type Buttons = Array<{\n  text?: string,\n  onPress?: ?Function,\n  style?: AlertButtonStyle,\n}>;\n\ntype Options = {\n  cancelable?: ?boolean,\n  onDismiss?: ?Function,\n};\n\n/**\n * Launches an alert dialog with the specified title and message.\n *\n * See http://facebook.github.io/react-native/docs/alert.html\n */\nclass Alert {\n  /**\n   * Launches an alert dialog with the specified title and message.\n   *\n   * See http://facebook.github.io/react-native/docs/alert.html#alert\n   */\n  static alert(\n    title: ?string,\n    message?: ?string,\n    buttons?: Buttons,\n    options?: Options,\n    type?: AlertType,\n  ): void {\n    if (Platform.OS === 'ios') {\n      if (typeof type !== 'undefined') {\n        console.warn(\n          'Alert.alert() with a 5th \"type\" parameter is deprecated and will be removed. Use AlertIOS.prompt() instead.',\n        );\n        AlertIOS.alert(title, message, buttons, type);\n        return;\n      }\n      AlertIOS.alert(title, message, buttons);\n    } else if (Platform.OS === 'android') {\n      AlertAndroid.alert(title, message, buttons, options);\n    }\n  }\n}\n\n/**\n * Wrapper around the Android native module.\n */\nclass AlertAndroid {\n  static alert(\n    title: ?string,\n    message?: ?string,\n    buttons?: Buttons,\n    options?: Options,\n  ): void {\n    let config = {\n      title: title || '',\n      message: message || '',\n    };\n\n    if (options) {\n      config = {...config, cancelable: options.cancelable};\n    }\n    // At most three buttons (neutral, negative, positive). Ignore rest.\n    // The text 'OK' should be probably localized. iOS Alert does that in native.\n    const validButtons: Buttons = buttons\n      ? buttons.slice(0, 3)\n      : [{text: 'OK'}];\n    const buttonPositive = validButtons.pop();\n    const buttonNegative = validButtons.pop();\n    const buttonNeutral = validButtons.pop();\n    if (buttonNeutral) {\n      config = {...config, buttonNeutral: buttonNeutral.text || ''};\n    }\n    if (buttonNegative) {\n      config = {...config, buttonNegative: buttonNegative.text || ''};\n    }\n    if (buttonPositive) {\n      config = {...config, buttonPositive: buttonPositive.text || ''};\n    }\n    NativeModules.DialogManagerAndroid.showAlert(\n      config,\n      errorMessage => console.warn(errorMessage),\n      (action, buttonKey) => {\n        if (action === NativeModules.DialogManagerAndroid.buttonClicked) {\n          if (buttonKey === NativeModules.DialogManagerAndroid.buttonNeutral) {\n            buttonNeutral.onPress && buttonNeutral.onPress();\n          } else if (\n            buttonKey === NativeModules.DialogManagerAndroid.buttonNegative\n          ) {\n            buttonNegative.onPress && buttonNegative.onPress();\n          } else if (\n            buttonKey === NativeModules.DialogManagerAndroid.buttonPositive\n          ) {\n            buttonPositive.onPress && buttonPositive.onPress();\n          }\n        } else if (action === NativeModules.DialogManagerAndroid.dismissed) {\n          options && options.onDismiss && options.onDismiss();\n        }\n      },\n    );\n  }\n}\n\nmodule.exports = Alert;\n"]},"metadata":{},"sourceType":"script"}