{"ast":null,"code":"'use strict';\n\nvar MissingNativeEventEmitterShim = require(\"../EventEmitter/MissingNativeEventEmitterShim\");\n\nvar NativeEventEmitter = require(\"../EventEmitter/NativeEventEmitter\");\n\nvar NativeModules = require(\"../BatchedBridge/NativeModules\");\n\nvar RCTAppState = NativeModules.AppState;\n\nvar logError = require(\"../Utilities/logError\");\n\nvar invariant = require('fbjs/lib/invariant');\n\nclass AppState extends NativeEventEmitter {\n  constructor() {\n    super(RCTAppState);\n    this.isAvailable = true;\n    this.isAvailable = true;\n    this._eventHandlers = {\n      change: new Map(),\n      memoryWarning: new Map()\n    };\n    this.currentState = RCTAppState.initialAppState || 'active';\n    var eventUpdated = false;\n    this.addListener('appStateDidChange', appStateData => {\n      eventUpdated = true;\n      this.currentState = appStateData.app_state;\n    });\n    RCTAppState.getCurrentAppState(appStateData => {\n      if (!eventUpdated && this.currentState !== appStateData.app_state) {\n        this.currentState = appStateData.app_state;\n        this.emit('appStateDidChange', appStateData);\n      }\n    }, logError);\n  }\n\n  addEventListener(type, handler) {\n    invariant(['change', 'memoryWarning'].indexOf(type) !== -1, 'Trying to subscribe to unknown event: \"%s\"', type);\n\n    if (type === 'change') {\n      this._eventHandlers[type].set(handler, this.addListener('appStateDidChange', appStateData => {\n        handler(appStateData.app_state);\n      }));\n    } else if (type === 'memoryWarning') {\n      this._eventHandlers[type].set(handler, this.addListener('memoryWarning', handler));\n    }\n  }\n\n  removeEventListener(type, handler) {\n    invariant(['change', 'memoryWarning'].indexOf(type) !== -1, 'Trying to remove listener for unknown event: \"%s\"', type);\n\n    if (!this._eventHandlers[type].has(handler)) {\n      return;\n    }\n\n    this._eventHandlers[type].get(handler).remove();\n\n    this._eventHandlers[type].delete(handler);\n  }\n\n}\n\nif (__DEV__ && !RCTAppState) {\n  class MissingNativeAppStateShim extends MissingNativeEventEmitterShim {\n    constructor() {\n      super('RCTAppState', 'AppState');\n    }\n\n    get currentState() {\n      this.throwMissingNativeModule();\n    }\n\n    addEventListener() {\n      this.throwMissingNativeModule();\n    }\n\n    removeEventListener() {\n      this.throwMissingNativeModule();\n    }\n\n  }\n\n  AppState = new MissingNativeAppStateShim();\n} else {\n  AppState = new AppState();\n}\n\nmodule.exports = AppState;","map":{"version":3,"sources":["/Users/ash/Documents/DevSpace/MobileProject/ReactNative/InProgres/InterView/symmetrical-octo-barnacle/node_modules/react-native/Libraries/AppState/AppState.js"],"names":["MissingNativeEventEmitterShim","require","NativeEventEmitter","NativeModules","RCTAppState","AppState","logError","invariant","constructor","isAvailable","_eventHandlers","change","Map","memoryWarning","currentState","initialAppState","eventUpdated","addListener","appStateData","app_state","getCurrentAppState","emit","addEventListener","type","handler","indexOf","set","removeEventListener","has","get","remove","delete","__DEV__","MissingNativeAppStateShim","throwMissingNativeModule","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst MissingNativeEventEmitterShim = require('../EventEmitter/MissingNativeEventEmitterShim');\nconst NativeEventEmitter = require('../EventEmitter/NativeEventEmitter');\nconst NativeModules = require('../BatchedBridge/NativeModules');\nconst RCTAppState = NativeModules.AppState;\n\nconst logError = require('../Utilities/logError');\nconst invariant = require('fbjs/lib/invariant');\n\n/**\n * `AppState` can tell you if the app is in the foreground or background,\n * and notify you when the state changes.\n *\n * See http://facebook.github.io/react-native/docs/appstate.html\n */\nclass AppState extends NativeEventEmitter {\n  _eventHandlers: Object;\n  currentState: ?string;\n  isAvailable: boolean = true;\n\n  constructor() {\n    super(RCTAppState);\n\n    this.isAvailable = true;\n    this._eventHandlers = {\n      change: new Map(),\n      memoryWarning: new Map(),\n    };\n\n    // TODO: Remove the 'active' fallback after `initialAppState` is exported by\n    // the Android implementation.\n    this.currentState = RCTAppState.initialAppState || 'active';\n\n    let eventUpdated = false;\n\n    // TODO: this is a terrible solution - in order to ensure `currentState`\n    // prop is up to date, we have to register an observer that updates it\n    // whenever the state changes, even if nobody cares. We should just\n    // deprecate the `currentState` property and get rid of this.\n    this.addListener('appStateDidChange', appStateData => {\n      eventUpdated = true;\n      this.currentState = appStateData.app_state;\n    });\n\n    // TODO: see above - this request just populates the value of `currentState`\n    // when the module is first initialized. Would be better to get rid of the\n    // prop and expose `getCurrentAppState` method directly.\n    RCTAppState.getCurrentAppState(appStateData => {\n      // It's possible that the state will have changed here & listeners need to be notified\n      if (!eventUpdated && this.currentState !== appStateData.app_state) {\n        this.currentState = appStateData.app_state;\n        this.emit('appStateDidChange', appStateData);\n      }\n    }, logError);\n  }\n\n  // TODO: now that AppState is a subclass of NativeEventEmitter, we could\n  // deprecate `addEventListener` and `removeEventListener` and just use\n  // addListener` and `listener.remove()` directly. That will be a breaking\n  // change though, as both the method and event names are different\n  // (addListener events are currently required to be globally unique).\n  /**\n   * Add a handler to AppState changes by listening to the `change` event type\n   * and providing the handler.\n   *\n   * See http://facebook.github.io/react-native/docs/appstate.html#addeventlistener\n   */\n  addEventListener(type: string, handler: Function) {\n    invariant(\n      ['change', 'memoryWarning'].indexOf(type) !== -1,\n      'Trying to subscribe to unknown event: \"%s\"',\n      type,\n    );\n    if (type === 'change') {\n      this._eventHandlers[type].set(\n        handler,\n        this.addListener('appStateDidChange', appStateData => {\n          handler(appStateData.app_state);\n        }),\n      );\n    } else if (type === 'memoryWarning') {\n      this._eventHandlers[type].set(\n        handler,\n        this.addListener('memoryWarning', handler),\n      );\n    }\n  }\n\n  /**\n   * Remove a handler by passing the `change` event type and the handler.\n   *\n   * See http://facebook.github.io/react-native/docs/appstate.html#removeeventlistener\n   */\n  removeEventListener(type: string, handler: Function) {\n    invariant(\n      ['change', 'memoryWarning'].indexOf(type) !== -1,\n      'Trying to remove listener for unknown event: \"%s\"',\n      type,\n    );\n    if (!this._eventHandlers[type].has(handler)) {\n      return;\n    }\n    this._eventHandlers[type].get(handler).remove();\n    this._eventHandlers[type].delete(handler);\n  }\n}\n\nif (__DEV__ && !RCTAppState) {\n  class MissingNativeAppStateShim extends MissingNativeEventEmitterShim {\n    constructor() {\n      super('RCTAppState', 'AppState');\n    }\n\n    get currentState(): ?string {\n      this.throwMissingNativeModule();\n    }\n\n    addEventListener(...args: Array<any>) {\n      this.throwMissingNativeModule();\n    }\n\n    removeEventListener(...args: Array<any>) {\n      this.throwMissingNativeModule();\n    }\n  }\n\n  // This module depends on the native `RCTAppState` module. If you don't\n  // include it, `AppState.isAvailable` will return `false`, and any method\n  // calls will throw. We reassign the class variable to keep the autodoc\n  // generator happy.\n  AppState = new MissingNativeAppStateShim();\n} else {\n  AppState = new AppState();\n}\n\nmodule.exports = AppState;\n"]},"metadata":{},"sourceType":"script"}