{"ast":null,"code":"'use strict';\n\nvar NativeModules = require(\"../BatchedBridge/NativeModules\");\n\nvar Platform = require(\"../Utilities/Platform\");\n\nvar defineLazyObjectProperty = require(\"../Utilities/defineLazyObjectProperty\");\n\nvar invariant = require('fbjs/lib/invariant');\n\nvar {\n  UIManager\n} = NativeModules;\ninvariant(UIManager, 'UIManager is undefined. The native module config is probably incorrect.');\nUIManager.__takeSnapshot = UIManager.takeSnapshot;\n\nUIManager.takeSnapshot = function () {\n  invariant(false, 'UIManager.takeSnapshot should not be called directly. ' + 'Use ReactNative.takeSnapshot instead.');\n};\n\nif (Platform.OS === 'ios') {\n  Object.keys(UIManager).forEach(viewName => {\n    var viewConfig = UIManager[viewName];\n\n    if (viewConfig.Manager) {\n      defineLazyObjectProperty(viewConfig, 'Constants', {\n        get: () => {\n          var viewManager = NativeModules[viewConfig.Manager];\n          var constants = {};\n          viewManager && Object.keys(viewManager).forEach(key => {\n            var value = viewManager[key];\n\n            if (typeof value !== 'function') {\n              constants[key] = value;\n            }\n          });\n          return constants;\n        }\n      });\n      defineLazyObjectProperty(viewConfig, 'Commands', {\n        get: () => {\n          var viewManager = NativeModules[viewConfig.Manager];\n          var commands = {};\n          var index = 0;\n          viewManager && Object.keys(viewManager).forEach(key => {\n            var value = viewManager[key];\n\n            if (typeof value === 'function') {\n              commands[key] = index++;\n            }\n          });\n          return commands;\n        }\n      });\n    }\n  });\n} else if (UIManager.ViewManagerNames) {\n  var residual = global.__residual ? global.__residual : function (_, f) {\n    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      args[_key - 2] = arguments[_key];\n    }\n\n    return f.apply(undefined, args);\n  };\n  residual('void', (UIManager, defineLazyObjectProperty) => {\n    UIManager.ViewManagerNames.forEach(viewManagerName => {\n      defineLazyObjectProperty(UIManager, viewManagerName, {\n        get: () => UIManager.getConstantsForViewManager(viewManagerName)\n      });\n    });\n  }, UIManager, defineLazyObjectProperty);\n  if (global.__makePartial) global.__makePartial(UIManager);\n}\n\nmodule.exports = UIManager;","map":{"version":3,"sources":["/Users/ash/Documents/DevSpace/MobileProject/ReactNative/InProgres/InterView/symmetrical-octo-barnacle/node_modules/react-native/Libraries/ReactNative/UIManager.js"],"names":["NativeModules","require","Platform","defineLazyObjectProperty","invariant","UIManager","__takeSnapshot","takeSnapshot","OS","Object","keys","forEach","viewName","viewConfig","Manager","get","viewManager","constants","key","value","commands","index","ViewManagerNames","residual","global","__residual","_","f","args","apply","undefined","viewManagerName","getConstantsForViewManager","__makePartial","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n'use strict';\n\nconst NativeModules = require('../BatchedBridge/NativeModules');\nconst Platform = require('../Utilities/Platform');\n\nconst defineLazyObjectProperty = require('../Utilities/defineLazyObjectProperty');\nconst invariant = require('fbjs/lib/invariant');\n\nconst {UIManager} = NativeModules;\n\ninvariant(\n  UIManager,\n  'UIManager is undefined. The native module config is probably incorrect.',\n);\n\n// In past versions of ReactNative users called UIManager.takeSnapshot()\n// However takeSnapshot was moved to ReactNative in order to support flat\n// bundles and to avoid a cyclic dependency between UIManager and ReactNative.\n// UIManager.takeSnapshot still exists though. In order to avoid confusion or\n// accidental usage, mask the method with a deprecation warning.\nUIManager.__takeSnapshot = UIManager.takeSnapshot;\nUIManager.takeSnapshot = function() {\n  invariant(\n    false,\n    'UIManager.takeSnapshot should not be called directly. ' +\n      'Use ReactNative.takeSnapshot instead.',\n  );\n};\n\n/**\n * Copies the ViewManager constants and commands into UIManager. This is\n * only needed for iOS, which puts the constants in the ViewManager\n * namespace instead of UIManager, unlike Android.\n */\nif (Platform.OS === 'ios') {\n  Object.keys(UIManager).forEach(viewName => {\n    const viewConfig = UIManager[viewName];\n    if (viewConfig.Manager) {\n      defineLazyObjectProperty(viewConfig, 'Constants', {\n        get: () => {\n          const viewManager = NativeModules[viewConfig.Manager];\n          const constants = {};\n          viewManager &&\n            Object.keys(viewManager).forEach(key => {\n              const value = viewManager[key];\n              if (typeof value !== 'function') {\n                constants[key] = value;\n              }\n            });\n          return constants;\n        },\n      });\n      defineLazyObjectProperty(viewConfig, 'Commands', {\n        get: () => {\n          const viewManager = NativeModules[viewConfig.Manager];\n          const commands = {};\n          let index = 0;\n          viewManager &&\n            Object.keys(viewManager).forEach(key => {\n              const value = viewManager[key];\n              if (typeof value === 'function') {\n                commands[key] = index++;\n              }\n            });\n          return commands;\n        },\n      });\n    }\n  });\n} else if (UIManager.ViewManagerNames) {\n  // We want to add all the view managers to the UIManager.\n  // However, the way things are set up, the list of view managers is not known at compile time.\n  // As Prepack runs at compile it, it cannot process this loop.\n  // So we wrap it in a special __residual call, which basically tells Prepack to ignore it.\n  let residual = global.__residual\n    ? global.__residual\n    : (_, f, ...args) => f.apply(undefined, args);\n  residual(\n    'void',\n    (UIManager, defineLazyObjectProperty) => {\n      UIManager.ViewManagerNames.forEach(viewManagerName => {\n        defineLazyObjectProperty(UIManager, viewManagerName, {\n          get: () => UIManager.getConstantsForViewManager(viewManagerName),\n        });\n      });\n    },\n    UIManager,\n    defineLazyObjectProperty,\n  );\n\n  // As Prepack now no longer knows which properties exactly the UIManager has,\n  // we also tell Prepack that it has only partial knowledge of the UIManager,\n  // so that any accesses to unknown properties along the global code will fail\n  // when Prepack encounters them.\n  if (global.__makePartial) global.__makePartial(UIManager);\n}\n\nmodule.exports = UIManager;\n"]},"metadata":{},"sourceType":"script"}