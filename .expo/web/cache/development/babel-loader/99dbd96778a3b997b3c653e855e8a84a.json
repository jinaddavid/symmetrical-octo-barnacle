{"ast":null,"code":"'use strict';\n\nvar EmitterSubscription = require(\"../vendor/emitter/EmitterSubscription\");\n\nvar EventEmitter = require(\"../vendor/emitter/EventEmitter\");\n\nvar invariant = require('fbjs/lib/invariant');\n\nclass MissingNativeEventEmitterShim extends EventEmitter {\n  constructor(nativeModuleName, nativeEventEmitterName) {\n    super(null);\n    this.isAvailable = false;\n    this._nativeModuleName = nativeModuleName;\n    this._nativeEventEmitterName = nativeEventEmitterName;\n  }\n\n  throwMissingNativeModule() {\n    invariant(false, \"Cannot use '\".concat(this._nativeEventEmitterName, \"' module when \") + \"native '\".concat(this._nativeModuleName, \"' is not included in the build. \") + \"Either include it, or check '\".concat(this._nativeEventEmitterName, \"'.isAvailable \") + 'before calling any methods.');\n  }\n\n  addListener(eventType, listener, context) {\n    this.throwMissingNativeModule();\n  }\n\n  removeAllListeners(eventType) {\n    this.throwMissingNativeModule();\n  }\n\n  removeSubscription(subscription) {\n    this.throwMissingNativeModule();\n  }\n\n}\n\nmodule.exports = MissingNativeEventEmitterShim;","map":{"version":3,"sources":["/Users/ash/Documents/DevSpace/MobileProject/ReactNative/InProgres/InterView/symmetrical-octo-barnacle/node_modules/react-native/Libraries/EventEmitter/MissingNativeEventEmitterShim.js"],"names":["EmitterSubscription","require","EventEmitter","invariant","MissingNativeEventEmitterShim","constructor","nativeModuleName","nativeEventEmitterName","isAvailable","_nativeModuleName","_nativeEventEmitterName","throwMissingNativeModule","addListener","eventType","listener","context","removeAllListeners","removeSubscription","subscription","module","exports"],"mappings":"AAUA;;AAEA,IAAMA,mBAAmB,GAAGC,OAAO,yCAAnC;;AACA,IAAMC,YAAY,GAAGD,OAAO,kCAA5B;;AAEA,IAAME,SAAS,GAAGF,OAAO,CAAC,oBAAD,CAAzB;;AAEA,MAAMG,6BAAN,SAA4CF,YAA5C,CAAyD;AAKvDG,EAAAA,WAAW,CAACC,gBAAD,EAA2BC,sBAA3B,EAA2D;AACpE,UAAM,IAAN;AADoE,SAJtEC,WAIsE,GAJ/C,KAI+C;AAEpE,SAAKC,iBAAL,GAAyBH,gBAAzB;AACA,SAAKI,uBAAL,GAA+BH,sBAA/B;AACD;;AAEDI,EAAAA,wBAAwB,GAAG;AACzBR,IAAAA,SAAS,CACP,KADO,EAEP,sBAAe,KAAKO,uBAApB,wCACa,KAAKD,iBADlB,+EAGI,KAAKC,uBAHT,sBAKE,6BAPK,CAAT;AASD;;AAGDE,EAAAA,WAAW,CAACC,SAAD,EAAoBC,QAApB,EAAwCC,OAAxC,EAA0D;AACnE,SAAKJ,wBAAL;AACD;;AAEDK,EAAAA,kBAAkB,CAACH,SAAD,EAAoB;AACpC,SAAKF,wBAAL;AACD;;AAEDM,EAAAA,kBAAkB,CAACC,YAAD,EAAoC;AACpD,SAAKP,wBAAL;AACD;;AAlCsD;;AAqCzDQ,MAAM,CAACC,OAAP,GAAiBhB,6BAAjB","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst EmitterSubscription = require('../vendor/emitter/EmitterSubscription');\nconst EventEmitter = require('../vendor/emitter/EventEmitter');\n\nconst invariant = require('fbjs/lib/invariant');\n\nclass MissingNativeEventEmitterShim extends EventEmitter {\n  isAvailable: boolean = false;\n  _nativeModuleName: string;\n  _nativeEventEmitterName: string;\n\n  constructor(nativeModuleName: string, nativeEventEmitterName: string) {\n    super(null);\n    this._nativeModuleName = nativeModuleName;\n    this._nativeEventEmitterName = nativeEventEmitterName;\n  }\n\n  throwMissingNativeModule() {\n    invariant(\n      false,\n      `Cannot use '${this._nativeEventEmitterName}' module when ` +\n        `native '${this._nativeModuleName}' is not included in the build. ` +\n        `Either include it, or check '${\n          this._nativeEventEmitterName\n        }'.isAvailable ` +\n        'before calling any methods.',\n    );\n  }\n\n  // EventEmitter\n  addListener(eventType: string, listener: Function, context: ?Object) {\n    this.throwMissingNativeModule();\n  }\n\n  removeAllListeners(eventType: string) {\n    this.throwMissingNativeModule();\n  }\n\n  removeSubscription(subscription: EmitterSubscription) {\n    this.throwMissingNativeModule();\n  }\n}\n\nmodule.exports = MissingNativeEventEmitterShim;\n"]},"metadata":{},"sourceType":"script"}