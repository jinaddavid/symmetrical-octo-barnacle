{"ast":null,"code":"var _jsxFileName = \"/Users/ash/Documents/DevSpace/MobileProject/ReactNative/InProgres/InterView/symmetrical-octo-barnacle/node_modules/react-native-maps/lib/components/MapView.js\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport EdgeInsetsPropType from \"react-native-web/dist/exports/EdgeInsetsPropType\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport RNAnimated from \"react-native-web/dist/exports/Animated\";\nimport { requireNativeComponent } from \"react-native-web/dist/index\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport ColorPropType from \"react-native-web/dist/exports/ColorPropType\";\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport ViewPropTypes from \"react-native-web/dist/exports/ViewPropTypes\";\nimport View from \"react-native-web/dist/exports/View\";\nimport MapMarker from \"./MapMarker\";\nimport MapPolyline from \"./MapPolyline\";\nimport MapPolygon from \"./MapPolygon\";\nimport MapCircle from \"./MapCircle\";\nimport MapCallout from \"./MapCallout\";\nimport MapOverlay from \"./MapOverlay\";\nimport MapUrlTile from \"./MapUrlTile\";\nimport MapLocalTile from \"./MapLocalTile\";\nimport AnimatedRegion from \"./AnimatedRegion\";\nimport { contextTypes as childContextTypes, getAirMapName, googleMapIsInstalled, createNotSupportedComponent } from \"./decorateMapComponent\";\nimport * as ProviderConstants from \"./ProviderConstants\";\nexport var MAP_TYPES = {\n  STANDARD: 'standard',\n  SATELLITE: 'satellite',\n  HYBRID: 'hybrid',\n  TERRAIN: 'terrain',\n  NONE: 'none',\n  MUTEDSTANDARD: 'mutedStandard'\n};\nvar GOOGLE_MAPS_ONLY_TYPES = [MAP_TYPES.TERRAIN, MAP_TYPES.NONE];\nvar viewConfig = {\n  uiViewClassName: 'AIR<provider>Map',\n  validAttributes: {\n    region: true\n  }\n};\nvar viewPropTypes = ViewPropTypes || View.propTypes;\n\nvar propTypes = _objectSpread(_objectSpread({}, viewPropTypes), {}, {\n  provider: PropTypes.oneOf(['google']),\n  style: viewPropTypes.style,\n  customMapStyle: PropTypes.array,\n  customMapStyleString: PropTypes.string,\n  showsUserLocation: PropTypes.bool,\n  userLocationAnnotationTitle: PropTypes.string,\n  showsMyLocationButton: PropTypes.bool,\n  followsUserLocation: PropTypes.bool,\n  showsPointsOfInterest: PropTypes.bool,\n  showsCompass: PropTypes.bool,\n  zoomEnabled: PropTypes.bool,\n  zoomControlEnabled: PropTypes.bool,\n  rotateEnabled: PropTypes.bool,\n  cacheEnabled: PropTypes.bool,\n  loadingEnabled: PropTypes.bool,\n  loadingBackgroundColor: ColorPropType,\n  loadingIndicatorColor: ColorPropType,\n  scrollEnabled: PropTypes.bool,\n  pitchEnabled: PropTypes.bool,\n  toolbarEnabled: PropTypes.bool,\n  moveOnMarkerPress: PropTypes.bool,\n  showsScale: PropTypes.bool,\n  showsBuildings: PropTypes.bool,\n  showsTraffic: PropTypes.bool,\n  showsIndoors: PropTypes.bool,\n  showsIndoorLevelPicker: PropTypes.bool,\n  mapType: PropTypes.oneOf(Object.values(MAP_TYPES)),\n  region: PropTypes.shape({\n    latitude: PropTypes.number.isRequired,\n    longitude: PropTypes.number.isRequired,\n    latitudeDelta: PropTypes.number.isRequired,\n    longitudeDelta: PropTypes.number.isRequired\n  }),\n  initialRegion: PropTypes.shape({\n    latitude: PropTypes.number.isRequired,\n    longitude: PropTypes.number.isRequired,\n    latitudeDelta: PropTypes.number.isRequired,\n    longitudeDelta: PropTypes.number.isRequired\n  }),\n  liteMode: PropTypes.bool,\n  mapPadding: EdgeInsetsPropType,\n  paddingAdjustmentBehavior: PropTypes.oneOf(['always', 'automatic', 'never']),\n  maxDelta: PropTypes.number,\n  minDelta: PropTypes.number,\n  legalLabelInsets: EdgeInsetsPropType,\n  onMapReady: PropTypes.func,\n  onKmlReady: PropTypes.func,\n  onRegionChange: PropTypes.func,\n  onRegionChangeComplete: PropTypes.func,\n  onPress: PropTypes.func,\n  onLongPress: PropTypes.func,\n  onUserLocationChange: PropTypes.func,\n  onPanDrag: PropTypes.func,\n  onPoiClick: PropTypes.func,\n  onMarkerPress: PropTypes.func,\n  onMarkerSelect: PropTypes.func,\n  onMarkerDeselect: PropTypes.func,\n  onCalloutPress: PropTypes.func,\n  onMarkerDragStart: PropTypes.func,\n  onMarkerDrag: PropTypes.func,\n  onMarkerDragEnd: PropTypes.func,\n  minZoomLevel: PropTypes.number,\n  maxZoomLevel: PropTypes.number,\n  kmlSrc: PropTypes.string,\n  onIndoorLevelActivated: PropTypes.func,\n  onIndoorBuildingFocused: PropTypes.func\n});\n\nclass MapView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isReady: Platform.OS === 'ios'\n    };\n    this._onMapReady = this._onMapReady.bind(this);\n    this._onMarkerPress = this._onMarkerPress.bind(this);\n    this._onChange = this._onChange.bind(this);\n    this._onLayout = this._onLayout.bind(this);\n  }\n\n  getChildContext() {\n    return {\n      provider: this.props.provider\n    };\n  }\n\n  componentWillUpdate(nextProps) {\n    var a = this.__lastRegion;\n    var b = nextProps.region;\n    if (!a || !b) return;\n\n    if (a.latitude !== b.latitude || a.longitude !== b.longitude || a.latitudeDelta !== b.latitudeDelta || a.longitudeDelta !== b.longitudeDelta) {\n      this.map.setNativeProps({\n        region: b\n      });\n    }\n  }\n\n  componentDidMount() {\n    var {\n      isReady\n    } = this.state;\n\n    if (isReady) {\n      this._updateStyle();\n    }\n  }\n\n  _updateStyle() {\n    var {\n      customMapStyle\n    } = this.props;\n    this.map.setNativeProps({\n      customMapStyleString: JSON.stringify(customMapStyle)\n    });\n  }\n\n  _onMapReady() {\n    var {\n      region,\n      initialRegion,\n      onMapReady\n    } = this.props;\n\n    if (region) {\n      this.map.setNativeProps({\n        region\n      });\n    } else if (initialRegion) {\n      this.map.setNativeProps({\n        initialRegion\n      });\n    }\n\n    this._updateStyle();\n\n    this.setState({\n      isReady: true\n    }, () => {\n      if (onMapReady) onMapReady();\n    });\n  }\n\n  _onLayout(e) {\n    var {\n      layout\n    } = e.nativeEvent;\n    if (!layout.width || !layout.height) return;\n\n    if (this.state.isReady && !this.__layoutCalled) {\n      var {\n        region,\n        initialRegion\n      } = this.props;\n\n      if (region) {\n        this.__layoutCalled = true;\n        this.map.setNativeProps({\n          region\n        });\n      } else if (initialRegion) {\n        this.__layoutCalled = true;\n        this.map.setNativeProps({\n          initialRegion\n        });\n      }\n    }\n\n    if (this.props.onLayout) {\n      this.props.onLayout(e);\n    }\n  }\n\n  _onMarkerPress(event) {\n    if (this.props.onMarkerPress) {\n      this.props.onMarkerPress(event.nativeEvent);\n    }\n  }\n\n  _onChange(event) {\n    this.__lastRegion = event.nativeEvent.region;\n\n    if (event.nativeEvent.continuous) {\n      if (this.props.onRegionChange) {\n        this.props.onRegionChange(event.nativeEvent.region);\n      }\n    } else if (this.props.onRegionChangeComplete) {\n      this.props.onRegionChangeComplete(event.nativeEvent.region);\n    }\n  }\n\n  animateToNavigation(location, bearing, angle, duration) {\n    this._runCommand('animateToNavigation', [location, bearing, angle, duration || 500]);\n  }\n\n  animateToRegion(region, duration) {\n    this._runCommand('animateToRegion', [region, duration || 500]);\n  }\n\n  animateToCoordinate(latLng, duration) {\n    this._runCommand('animateToCoordinate', [latLng, duration || 500]);\n  }\n\n  animateToBearing(bearing, duration) {\n    this._runCommand('animateToBearing', [bearing, duration || 500]);\n  }\n\n  animateToViewingAngle(angle, duration) {\n    this._runCommand('animateToViewingAngle', [angle, duration || 500]);\n  }\n\n  fitToElements(animated) {\n    this._runCommand('fitToElements', [animated]);\n  }\n\n  fitToSuppliedMarkers(markers) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var {\n      edgePadding = {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0\n      },\n      animated = true\n    } = options;\n\n    this._runCommand('fitToSuppliedMarkers', [markers, edgePadding, animated]);\n  }\n\n  fitToCoordinates() {\n    var coordinates = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var {\n      edgePadding = {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0\n      },\n      animated = true\n    } = options;\n\n    this._runCommand('fitToCoordinates', [coordinates, edgePadding, animated]);\n  }\n\n  setMapBoundaries(northEast, southWest) {\n    this._runCommand('setMapBoundaries', [northEast, southWest]);\n  }\n\n  setIndoorActiveLevelIndex(activeLevelIndex) {\n    this._runCommand('setIndoorActiveLevelIndex', [activeLevelIndex]);\n  }\n\n  takeSnapshot(args) {\n    if (Platform.OS === 'ios' && arguments.length === 4) {\n      console.warn('Old takeSnapshot API has been deprecated; will be removed in the near future');\n      var width = arguments[0];\n      var height = arguments[1];\n      var region = arguments[2];\n      var callback = arguments[3];\n\n      this._runCommand('takeSnapshot', [width || 0, height || 0, region || {}, 'png', 1, 'legacy', callback]);\n\n      return undefined;\n    }\n\n    var config = {\n      width: args.width || 0,\n      height: args.height || 0,\n      region: args.region || {},\n      format: args.format || 'png',\n      quality: args.quality || 1.0,\n      result: args.result || 'file'\n    };\n    if (config.format !== 'png' && config.format !== 'jpg') throw new Error('Invalid format specified');\n    if (config.result !== 'file' && config.result !== 'base64') throw new Error('Invalid result specified');\n\n    if (Platform.OS === 'android') {\n      return NativeModules.AirMapModule.takeSnapshot(this._getHandle(), config);\n    } else if (Platform.OS === 'ios') {\n      return new Promise((resolve, reject) => {\n        this._runCommand('takeSnapshot', [config.width, config.height, config.region, config.format, config.quality, config.result, (err, snapshot) => {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(snapshot);\n          }\n        }]);\n      });\n    }\n\n    return Promise.reject('takeSnapshot not supported on this platform');\n  }\n\n  pointForCoordinate(coordinate) {\n    if (Platform.OS === 'android') {\n      return NativeModules.AirMapModule.pointForCoordinate(this._getHandle(), coordinate);\n    } else if (Platform.OS === 'ios') {\n      return this._runCommand('pointForCoordinate', [coordinate]);\n    }\n\n    return Promise.reject('pointForCoordinate not supported on this platform');\n  }\n\n  coordinateForPoint(point) {\n    if (Platform.OS === 'android') {\n      return NativeModules.AirMapModule.coordinateForPoint(this._getHandle(), point);\n    } else if (Platform.OS === 'ios') {\n      return this._runCommand('coordinateForPoint', [point]);\n    }\n\n    return Promise.reject('coordinateForPoint not supported on this platform');\n  }\n\n  _uiManagerCommand(name) {\n    return NativeModules.UIManager[getAirMapName(this.props.provider)].Commands[name];\n  }\n\n  _mapManagerCommand(name) {\n    return NativeModules[\"\".concat(getAirMapName(this.props.provider), \"Manager\")][name];\n  }\n\n  _getHandle() {\n    return findNodeHandle(this.map);\n  }\n\n  _runCommand(name, args) {\n    switch (Platform.OS) {\n      case 'android':\n        return NativeModules.UIManager.dispatchViewManagerCommand(this._getHandle(), this._uiManagerCommand(name), args);\n\n      case 'ios':\n        return this._mapManagerCommand(name)(this._getHandle(), ...args);\n\n      default:\n        return Promise.reject(\"Invalid platform was passed: \".concat(Platform.OS));\n    }\n  }\n\n  render() {\n    var props;\n\n    if (this.state.isReady) {\n      props = _objectSpread({\n        region: null,\n        initialRegion: null,\n        onMarkerPress: this._onMarkerPress,\n        onChange: this._onChange,\n        onMapReady: this._onMapReady,\n        onLayout: this._onLayout\n      }, this.props);\n\n      if (Platform.OS === 'ios' && props.provider === ProviderConstants.PROVIDER_DEFAULT && GOOGLE_MAPS_ONLY_TYPES.includes(props.mapType)) {\n        props.mapType = MAP_TYPES.standard;\n      }\n\n      props.handlePanDrag = !!props.onPanDrag;\n    } else {\n      props = {\n        style: this.props.style,\n        region: null,\n        initialRegion: null,\n        onMarkerPress: this._onMarkerPress,\n        onChange: this._onChange,\n        onMapReady: this._onMapReady,\n        onLayout: this._onLayout\n      };\n    }\n\n    if (Platform.OS === 'android' && this.props.liteMode) {\n      return React.createElement(AIRMapLite, _extends({\n        ref: _ref => {\n          this.map = _ref;\n        }\n      }, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 783,\n          columnNumber: 9\n        }\n      }));\n    }\n\n    var AIRMap = getAirMapComponent(this.props.provider);\n    return React.createElement(AIRMap, _extends({\n      ref: _ref2 => {\n        this.map = _ref2;\n      }\n    }, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 793,\n        columnNumber: 7\n      }\n    }));\n  }\n\n}\n\nMapView.propTypes = propTypes;\nMapView.viewConfig = viewConfig;\nMapView.childContextTypes = childContextTypes;\nMapView.MAP_TYPES = MAP_TYPES;\n\nvar nativeComponent = Component => requireNativeComponent(Component, MapView, {\n  nativeOnly: {\n    onChange: true,\n    onMapReady: true,\n    onKmlReady: true,\n    handlePanDrag: true\n  }\n});\n\nvar airMaps = {\n  default: nativeComponent('AIRMap')\n};\n\nif (Platform.OS === 'android') {\n  airMaps.google = airMaps.default;\n} else {\n  airMaps.google = googleMapIsInstalled ? nativeComponent('AIRGoogleMap') : createNotSupportedComponent('react-native-maps: AirGoogleMaps dir must be added to your xCode project to support GoogleMaps on iOS.');\n}\n\nvar getAirMapComponent = provider => airMaps[provider || 'default'];\n\nvar AIRMapLite = NativeModules.UIManager.AIRMapLite && requireNativeComponent('AIRMapLite', MapView, {\n  nativeOnly: {\n    onChange: true,\n    onMapReady: true,\n    handlePanDrag: true\n  }\n});\nexport var Animated = RNAnimated.createAnimatedComponent(MapView);\nexport var ProviderPropType = PropTypes.oneOf(Object.values(ProviderConstants));\nMapView.Marker = MapMarker;\nMapView.Polyline = MapPolyline;\nMapView.Polygon = MapPolygon;\nMapView.Circle = MapCircle;\nMapView.UrlTile = MapUrlTile;\nMapView.LocalTile = MapLocalTile;\nMapView.Overlay = MapOverlay;\nMapView.Callout = MapCallout;\n\n_extends(MapView, ProviderConstants);\n\nMapView.ProviderPropType = ProviderPropType;\nMapView.Animated = Animated;\nMapView.AnimatedRegion = AnimatedRegion;\nexport default MapView;","map":{"version":3,"sources":["/Users/ash/Documents/DevSpace/MobileProject/ReactNative/InProgres/InterView/symmetrical-octo-barnacle/node_modules/react-native-maps/lib/components/MapView.js"],"names":["PropTypes","React","requireNativeComponent","MapMarker","MapPolyline","MapPolygon","MapCircle","MapCallout","MapOverlay","MapUrlTile","MapLocalTile","AnimatedRegion","contextTypes","childContextTypes","getAirMapName","googleMapIsInstalled","createNotSupportedComponent","ProviderConstants","MAP_TYPES","STANDARD","SATELLITE","HYBRID","TERRAIN","NONE","MUTEDSTANDARD","GOOGLE_MAPS_ONLY_TYPES","viewConfig","uiViewClassName","validAttributes","region","viewPropTypes","ViewPropTypes","View","propTypes","provider","oneOf","style","customMapStyle","array","customMapStyleString","string","showsUserLocation","bool","userLocationAnnotationTitle","showsMyLocationButton","followsUserLocation","showsPointsOfInterest","showsCompass","zoomEnabled","zoomControlEnabled","rotateEnabled","cacheEnabled","loadingEnabled","loadingBackgroundColor","ColorPropType","loadingIndicatorColor","scrollEnabled","pitchEnabled","toolbarEnabled","moveOnMarkerPress","showsScale","showsBuildings","showsTraffic","showsIndoors","showsIndoorLevelPicker","mapType","Object","values","shape","latitude","number","isRequired","longitude","latitudeDelta","longitudeDelta","initialRegion","liteMode","mapPadding","EdgeInsetsPropType","paddingAdjustmentBehavior","maxDelta","minDelta","legalLabelInsets","onMapReady","func","onKmlReady","onRegionChange","onRegionChangeComplete","onPress","onLongPress","onUserLocationChange","onPanDrag","onPoiClick","onMarkerPress","onMarkerSelect","onMarkerDeselect","onCalloutPress","onMarkerDragStart","onMarkerDrag","onMarkerDragEnd","minZoomLevel","maxZoomLevel","kmlSrc","onIndoorLevelActivated","onIndoorBuildingFocused","MapView","Component","constructor","props","state","isReady","Platform","OS","_onMapReady","bind","_onMarkerPress","_onChange","_onLayout","getChildContext","componentWillUpdate","nextProps","a","__lastRegion","b","map","setNativeProps","componentDidMount","_updateStyle","JSON","stringify","setState","e","layout","nativeEvent","width","height","__layoutCalled","onLayout","event","continuous","animateToNavigation","location","bearing","angle","duration","_runCommand","animateToRegion","animateToCoordinate","latLng","animateToBearing","animateToViewingAngle","fitToElements","animated","fitToSuppliedMarkers","markers","options","edgePadding","top","right","bottom","left","fitToCoordinates","coordinates","setMapBoundaries","northEast","southWest","setIndoorActiveLevelIndex","activeLevelIndex","takeSnapshot","args","arguments","length","console","warn","callback","undefined","config","format","quality","result","Error","NativeModules","AirMapModule","_getHandle","Promise","resolve","reject","err","snapshot","pointForCoordinate","coordinate","coordinateForPoint","point","_uiManagerCommand","name","UIManager","Commands","_mapManagerCommand","findNodeHandle","dispatchViewManagerCommand","render","onChange","PROVIDER_DEFAULT","includes","standard","handlePanDrag","ref","AIRMap","getAirMapComponent","nativeComponent","nativeOnly","airMaps","default","google","AIRMapLite","Animated","RNAnimated","createAnimatedComponent","ProviderPropType","Marker","Polyline","Polygon","Circle","UrlTile","LocalTile","Overlay","Callout"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport {\n  EdgeInsetsPropType,\n  Platform,\n  Animated as RNAnimated,\n  requireNativeComponent,\n  NativeModules,\n  ColorPropType,\n  findNodeHandle,\n  ViewPropTypes,\n  View,\n} from 'react-native';\nimport MapMarker from './MapMarker';\nimport MapPolyline from './MapPolyline';\nimport MapPolygon from './MapPolygon';\nimport MapCircle from './MapCircle';\nimport MapCallout from './MapCallout';\nimport MapOverlay from './MapOverlay';\nimport MapUrlTile from './MapUrlTile';\nimport MapLocalTile from './MapLocalTile';\nimport AnimatedRegion from './AnimatedRegion';\nimport {\n  contextTypes as childContextTypes,\n  getAirMapName,\n  googleMapIsInstalled,\n  createNotSupportedComponent,\n} from './decorateMapComponent';\nimport * as ProviderConstants from './ProviderConstants';\n\nexport const MAP_TYPES = {\n  STANDARD: 'standard',\n  SATELLITE: 'satellite',\n  HYBRID: 'hybrid',\n  TERRAIN: 'terrain',\n  NONE: 'none',\n  MUTEDSTANDARD: 'mutedStandard',\n};\n\nconst GOOGLE_MAPS_ONLY_TYPES = [\n  MAP_TYPES.TERRAIN,\n  MAP_TYPES.NONE,\n];\n\nconst viewConfig = {\n  uiViewClassName: 'AIR<provider>Map',\n  validAttributes: {\n    region: true,\n  },\n};\n\n// if ViewPropTypes is not defined fall back to View.propType (to support RN < 0.44)\nconst viewPropTypes = ViewPropTypes || View.propTypes;\n\nconst propTypes = {\n  ...viewPropTypes,\n  /**\n   * When provider is \"google\", we will use GoogleMaps.\n   * Any value other than \"google\" will default to using\n   * MapKit in iOS or GoogleMaps in android as the map provider.\n   */\n  provider: PropTypes.oneOf([\n    'google',\n  ]),\n\n  /**\n   * Used to style and layout the `MapView`.  See `StyleSheet.js` and\n   * `ViewStylePropTypes.js` for more info.\n   */\n  style: viewPropTypes.style,\n\n  /**\n   * A json object that describes the style of the map. This is transformed to a string\n   * and saved in mayStyleString to be sent to android and ios\n   * https://developers.google.com/maps/documentation/ios-sdk/styling#use_a_string_resource\n   * https://developers.google.com/maps/documentation/android-api/styling\n   */\n  customMapStyle: PropTypes.array,\n\n  /**\n   * A json string that describes the style of the map\n   * https://developers.google.com/maps/documentation/ios-sdk/styling#use_a_string_resource\n   * https://developers.google.com/maps/documentation/android-api/styling\n   */\n  customMapStyleString: PropTypes.string,\n\n  /**\n   * If `true` the app will ask for the user's location.\n   * Default value is `false`.\n   *\n   * **NOTE**: You need to add NSLocationWhenInUseUsageDescription key in\n   * Info.plist to enable geolocation, otherwise it is going\n   * to *fail silently*! You will also need to add an explanation for why\n   * you need the users location against `NSLocationWhenInUseUsageDescription` in Info.plist.\n   * Otherwise Apple may reject your app submission.\n   */\n  showsUserLocation: PropTypes.bool,\n\n  /**\n   * The title of the annotation for current user location. This only works if\n   * `showsUserLocation` is true.\n   * There is a default value `My Location` set by MapView.\n   *\n   * @platform ios\n   */\n  userLocationAnnotationTitle: PropTypes.string,\n\n  /**\n   * If `false` hide the button to move map to the current user's location.\n   * Default value is `true`.\n   *\n   * @platform android\n   */\n  showsMyLocationButton: PropTypes.bool,\n\n  /**\n   * If `true` the map will focus on the user's location. This only works if\n   * `showsUserLocation` is true and the user has shared their location.\n   * Default value is `false`.\n   *\n   * @platform ios\n   */\n  followsUserLocation: PropTypes.bool,\n\n  /**\n   * If `false` points of interest won't be displayed on the map.\n   * Default value is `true`.\n   *\n   */\n  showsPointsOfInterest: PropTypes.bool,\n\n  /**\n   * If `false` compass won't be displayed on the map.\n   * Default value is `true`.\n   *\n   * @platform ios\n   */\n  showsCompass: PropTypes.bool,\n\n  /**\n   * If `false` the user won't be able to pinch/zoom the map.\n   * Default value is `true`.\n   *\n   */\n  zoomEnabled: PropTypes.bool,\n\n  /**\n   *If `false` the user won't be able to zoom the map\n   * Default value is `true`.\n   *\n   *@platform android\n   */\n  zoomControlEnabled: PropTypes.bool,\n\n    /**\n   * If `false` the user won't be able to pinch/rotate the map.\n   * Default value is `true`.\n   *\n   */\n  rotateEnabled: PropTypes.bool,\n\n  /**\n   * If `true` the map will be cached to an Image for performance\n   * Default value is `false`.\n   *\n   */\n  cacheEnabled: PropTypes.bool,\n\n  /**\n   * If `true` the map will be showing a loading indicator\n   * Default value is `false`.\n   *\n   */\n  loadingEnabled: PropTypes.bool,\n\n  /**\n   * Loading background color while generating map cache image or loading the map\n   * Default color is light gray.\n   *\n   */\n  loadingBackgroundColor: ColorPropType,\n\n  /**\n   * Loading indicator color while generating map cache image or loading the map\n   * Default color is gray color for iOS, theme color for Android.\n   *\n   */\n  loadingIndicatorColor: ColorPropType,\n\n  /**\n   * If `false` the user won't be able to change the map region being displayed.\n   * Default value is `true`.\n   *\n   */\n  scrollEnabled: PropTypes.bool,\n\n  /**\n   * If `false` the user won't be able to adjust the camera’s pitch angle.\n   * Default value is `true`.\n   *\n   */\n  pitchEnabled: PropTypes.bool,\n\n  /**\n   * If `false` will hide 'Navigate' and 'Open in Maps' buttons on marker press\n   * Default value is `true`.\n   *\n   * @platform android\n   */\n  toolbarEnabled: PropTypes.bool,\n\n  /**\n   * A Boolean indicating whether on marker press the map will move to the pressed marker\n   * Default value is `true`\n   *\n   * @platform android\n   */\n  moveOnMarkerPress: PropTypes.bool,\n\n  /**\n   * A Boolean indicating whether the map shows scale information.\n   * Default value is `false`\n   *\n   */\n  showsScale: PropTypes.bool,\n\n  /**\n   * A Boolean indicating whether the map displays extruded building information.\n   * Default value is `true`.\n   */\n  showsBuildings: PropTypes.bool,\n\n  /**\n   * A Boolean value indicating whether the map displays traffic information.\n   * Default value is `false`.\n   */\n  showsTraffic: PropTypes.bool,\n\n  /**\n   * A Boolean indicating whether indoor maps should be enabled.\n   * Default value is `false`\n   *\n   * @platform android\n   */\n  showsIndoors: PropTypes.bool,\n\n  /**\n   * A Boolean indicating whether indoor level picker should be enabled.\n   * Default value is `false`\n   *\n   * @platform android\n   */\n  showsIndoorLevelPicker: PropTypes.bool,\n\n  /**\n   * The map type to be displayed.\n   *\n   * - standard: standard road map (default)\n   * - satellite: satellite view\n   * - hybrid: satellite view with roads and points of interest overlayed\n   * - terrain: topographic view\n   * - none: no base map\n   */\n  mapType: PropTypes.oneOf(Object.values(MAP_TYPES)),\n\n  /**\n   * The region to be displayed by the map.\n   *\n   * The region is defined by the center coordinates and the span of\n   * coordinates to display.\n   */\n  region: PropTypes.shape({\n    /**\n     * Coordinates for the center of the map.\n     */\n    latitude: PropTypes.number.isRequired,\n    longitude: PropTypes.number.isRequired,\n\n    /**\n     * Difference between the minimun and the maximum latitude/longitude\n     * to be displayed.\n     */\n    latitudeDelta: PropTypes.number.isRequired,\n    longitudeDelta: PropTypes.number.isRequired,\n  }),\n\n  /**\n   * The initial region to be displayed by the map.  Use this prop instead of `region`\n   * only if you don't want to control the viewport of the map besides the initial region.\n   *\n   * Changing this prop after the component has mounted will not result in a region change.\n   *\n   * This is similar to the `initialValue` prop of a text input.\n   */\n  initialRegion: PropTypes.shape({\n    /**\n     * Coordinates for the center of the map.\n     */\n    latitude: PropTypes.number.isRequired,\n    longitude: PropTypes.number.isRequired,\n\n    /**\n     * Difference between the minimun and the maximum latitude/longitude\n     * to be displayed.\n     */\n    latitudeDelta: PropTypes.number.isRequired,\n    longitudeDelta: PropTypes.number.isRequired,\n  }),\n\n  /**\n   * A Boolean indicating whether to use liteMode for android\n   * Default value is `false`\n   *\n   * @platform android\n   */\n  liteMode: PropTypes.bool,\n\n  /**\n   * (Google Maps only)\n   *\n   * Padding that is used by the Google Map View to position\n   * the camera, legal labels and buttons\n   *\n   */\n  mapPadding: EdgeInsetsPropType,\n\n  /**\n   * (Google Maps only, iOS)\n   *\n   * Whether the safe area padding is added to the Google Map View padding.\n   * This affects where markers, compass, Google logo etc. are placed on the view.\n   *\n   */\n  paddingAdjustmentBehavior: PropTypes.oneOf(['always', 'automatic', 'never']),\n\n  /**\n   * Maximum size of area that can be displayed.\n   *\n   * @platform ios\n   */\n  maxDelta: PropTypes.number,\n\n  /**\n   * Minimum size of area that can be displayed.\n   *\n   * @platform ios\n   */\n  minDelta: PropTypes.number,\n\n  /**\n   * Insets for the map's legal label, originally at bottom left of the map.\n   * See `EdgeInsetsPropType.js` for more information.\n   */\n  legalLabelInsets: EdgeInsetsPropType,\n\n  /**\n   * Callback that is called once the map is fully loaded.\n   */\n  onMapReady: PropTypes.func,\n\n  /**\n   * Callback that is called once the kml is fully loaded.\n   */\n  onKmlReady: PropTypes.func,\n\n  /**\n   * Callback that is called continuously when the user is dragging the map.\n   */\n  onRegionChange: PropTypes.func,\n\n  /**\n   * Callback that is called once, when the user is done moving the map.\n   */\n  onRegionChangeComplete: PropTypes.func,\n\n  /**\n   * Callback that is called when user taps on the map.\n   */\n  onPress: PropTypes.func,\n\n  /**\n   * Callback that is called when user makes a \"long press\" somewhere on the map.\n   */\n  onLongPress: PropTypes.func,\n\n  /**\n   * Callback that is called when the underlying map figures our users current location.\n   */\n  onUserLocationChange: PropTypes.func,\n\n  /**\n   * Callback that is called when user makes a \"drag\" somewhere on the map\n   */\n  onPanDrag: PropTypes.func,\n\n  /**\n   * Callback that is called when user click on a POI\n   */\n  onPoiClick: PropTypes.func,\n\n  /**\n   * Callback that is called when a marker on the map is tapped by the user.\n   */\n  onMarkerPress: PropTypes.func,\n\n  /**\n   * Callback that is called when a marker on the map becomes selected. This will be called when\n   * the callout for that marker is about to be shown.\n   *\n   * @platform ios\n   */\n  onMarkerSelect: PropTypes.func,\n\n  /**\n   * Callback that is called when a marker on the map becomes deselected. This will be called when\n   * the callout for that marker is about to be hidden.\n   *\n   * @platform ios\n   */\n  onMarkerDeselect: PropTypes.func,\n\n  /**\n   * Callback that is called when a callout is tapped by the user.\n   */\n  onCalloutPress: PropTypes.func,\n\n  /**\n   * Callback that is called when the user initiates a drag on a marker (if it is draggable)\n   */\n  onMarkerDragStart: PropTypes.func,\n\n  /**\n   * Callback called continuously as a marker is dragged\n   */\n  onMarkerDrag: PropTypes.func,\n\n  /**\n   * Callback that is called when a drag on a marker finishes. This is usually the point you\n   * will want to setState on the marker's coordinate again\n   */\n  onMarkerDragEnd: PropTypes.func,\n\n  /**\n   * Minimum zoom value for the map, must be between 0 and 20\n   */\n  minZoomLevel: PropTypes.number,\n\n  /**\n   * Maximum zoom value for the map, must be between 0 and 20\n   */\n  maxZoomLevel: PropTypes.number,\n\n  /**\n   * Url KML Source\n   */\n  kmlSrc: PropTypes.string,\n\n  /**\n   * Callback that is called when a level is activated on a indoor building.\n   */\n  onIndoorLevelActivated: PropTypes.func,\n\n  /**\n   * Callback that is called when a Building is focused.\n   */\n  onIndoorBuildingFocused: PropTypes.func,\n};\n\nclass MapView extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isReady: Platform.OS === 'ios',\n    };\n\n    this._onMapReady = this._onMapReady.bind(this);\n    this._onMarkerPress = this._onMarkerPress.bind(this);\n    this._onChange = this._onChange.bind(this);\n    this._onLayout = this._onLayout.bind(this);\n  }\n\n  getChildContext() {\n    return { provider: this.props.provider };\n  }\n\n  componentWillUpdate(nextProps) {\n    const a = this.__lastRegion;\n    const b = nextProps.region;\n    if (!a || !b) return;\n    if (\n      a.latitude !== b.latitude ||\n      a.longitude !== b.longitude ||\n      a.latitudeDelta !== b.latitudeDelta ||\n      a.longitudeDelta !== b.longitudeDelta\n    ) {\n      this.map.setNativeProps({ region: b });\n    }\n  }\n\n  componentDidMount() {\n    const { isReady } = this.state;\n    if (isReady) {\n      this._updateStyle();\n    }\n  }\n\n  _updateStyle() {\n    const { customMapStyle } = this.props;\n    this.map.setNativeProps({ customMapStyleString: JSON.stringify(customMapStyle) });\n  }\n\n  _onMapReady() {\n    const { region, initialRegion, onMapReady } = this.props;\n    if (region) {\n      this.map.setNativeProps({ region });\n    } else if (initialRegion) {\n      this.map.setNativeProps({ initialRegion });\n    }\n    this._updateStyle();\n    this.setState({ isReady: true }, () => {\n      if (onMapReady) onMapReady();\n    });\n  }\n\n  _onLayout(e) {\n    const { layout } = e.nativeEvent;\n    if (!layout.width || !layout.height) return;\n    if (this.state.isReady && !this.__layoutCalled) {\n      const { region, initialRegion } = this.props;\n      if (region) {\n        this.__layoutCalled = true;\n        this.map.setNativeProps({ region });\n      } else if (initialRegion) {\n        this.__layoutCalled = true;\n        this.map.setNativeProps({ initialRegion });\n      }\n    }\n    if (this.props.onLayout) {\n      this.props.onLayout(e);\n    }\n  }\n\n  _onMarkerPress(event) {\n    if (this.props.onMarkerPress) {\n      this.props.onMarkerPress(event.nativeEvent);\n    }\n  }\n\n  _onChange(event) {\n    this.__lastRegion = event.nativeEvent.region;\n    if (event.nativeEvent.continuous) {\n      if (this.props.onRegionChange) {\n        this.props.onRegionChange(event.nativeEvent.region);\n      }\n    } else if (this.props.onRegionChangeComplete) {\n      this.props.onRegionChangeComplete(event.nativeEvent.region);\n    }\n  }\n\n  animateToNavigation(location, bearing, angle, duration) {\n    this._runCommand('animateToNavigation', [location, bearing, angle, duration || 500]);\n  }\n\n  animateToRegion(region, duration) {\n    this._runCommand('animateToRegion', [region, duration || 500]);\n  }\n\n  animateToCoordinate(latLng, duration) {\n    this._runCommand('animateToCoordinate', [latLng, duration || 500]);\n  }\n\n  animateToBearing(bearing, duration) {\n    this._runCommand('animateToBearing', [bearing, duration || 500]);\n  }\n\n  animateToViewingAngle(angle, duration) {\n    this._runCommand('animateToViewingAngle', [angle, duration || 500]);\n  }\n\n  fitToElements(animated) {\n    this._runCommand('fitToElements', [animated]);\n  }\n\n  fitToSuppliedMarkers(markers, options = {}) {\n    const {\n      edgePadding = { top: 0, right: 0, bottom: 0, left: 0 },\n      animated = true,\n    } = options;\n\n    this._runCommand('fitToSuppliedMarkers', [markers, edgePadding, animated]);\n  }\n\n  fitToCoordinates(coordinates = [], options = {}) {\n    const {\n      edgePadding = { top: 0, right: 0, bottom: 0, left: 0 },\n      animated = true,\n    } = options;\n\n    this._runCommand('fitToCoordinates', [coordinates, edgePadding, animated]);\n  }\n\n  setMapBoundaries(northEast, southWest) {\n    this._runCommand('setMapBoundaries', [northEast, southWest]);\n  }\n\n  setIndoorActiveLevelIndex(activeLevelIndex) {\n    this._runCommand('setIndoorActiveLevelIndex', [activeLevelIndex]);\n  }\n\n  /**\n   * Takes a snapshot of the map and saves it to a picture\n   * file or returns the image as a base64 encoded string.\n   *\n   * @param config Configuration options\n   * @param [config.width] Width of the rendered map-view (when omitted actual view width is used).\n   * @param [config.height] Height of the rendered map-view (when omitted actual height is used).\n   * @param [config.region] Region to render (Only supported on iOS).\n   * @param [config.format] Encoding format ('png', 'jpg') (default: 'png').\n   * @param [config.quality] Compression quality (only used for jpg) (default: 1.0).\n   * @param [config.result] Result format ('file', 'base64') (default: 'file').\n   *\n   * @return Promise Promise with either the file-uri or base64 encoded string\n   */\n  takeSnapshot(args) {\n    // For the time being we support the legacy API on iOS.\n    // This will be removed in a future release and only the\n    // new Promise style API shall be supported.\n    if (Platform.OS === 'ios' && (arguments.length === 4)) {\n      console.warn('Old takeSnapshot API has been deprecated; will be removed in the near future'); //eslint-disable-line\n      const width = arguments[0]; // eslint-disable-line\n      const height = arguments[1]; // eslint-disable-line\n      const region = arguments[2]; // eslint-disable-line\n      const callback = arguments[3]; // eslint-disable-line\n      this._runCommand('takeSnapshot', [\n        width || 0,\n        height || 0,\n        region || {},\n        'png',\n        1,\n        'legacy',\n        callback,\n      ]);\n      return undefined;\n    }\n\n    // Sanitize inputs\n    const config = {\n      width: args.width || 0,\n      height: args.height || 0,\n      region: args.region || {},\n      format: args.format || 'png',\n      quality: args.quality || 1.0,\n      result: args.result || 'file',\n    };\n    if ((config.format !== 'png') &&\n        (config.format !== 'jpg')) throw new Error('Invalid format specified');\n    if ((config.result !== 'file') &&\n        (config.result !== 'base64')) throw new Error('Invalid result specified');\n\n    // Call native function\n    if (Platform.OS === 'android') {\n      return NativeModules.AirMapModule.takeSnapshot(this._getHandle(), config);\n    } else if (Platform.OS === 'ios') {\n      return new Promise((resolve, reject) => {\n        this._runCommand('takeSnapshot', [\n          config.width,\n          config.height,\n          config.region,\n          config.format,\n          config.quality,\n          config.result,\n          (err, snapshot) => {\n            if (err) {\n              reject(err);\n            } else {\n              resolve(snapshot);\n            }\n          },\n        ]);\n      });\n    }\n    return Promise.reject('takeSnapshot not supported on this platform');\n  }\n\n  /**\n   * Convert a map coordinate to user-space point\n   *\n   * @param coordinate Coordinate\n   * @param [coordinate.latitude] Latitude\n   * @param [coordinate.longitude] Longitude\n   *\n   * @return Promise Promise with the point ({ x: Number, y: Number })\n   */\n  pointForCoordinate(coordinate) {\n    if (Platform.OS === 'android') {\n      return NativeModules.AirMapModule.pointForCoordinate(this._getHandle(), coordinate);\n    } else if (Platform.OS === 'ios') {\n      return this._runCommand('pointForCoordinate', [coordinate]);\n    }\n    return Promise.reject('pointForCoordinate not supported on this platform');\n  }\n\n  /**\n   * Convert a user-space point to a map coordinate\n   *\n   * @param point Point\n   * @param [point.x] X\n   * @param [point.x] Y\n   *\n   * @return Promise Promise with the coordinate ({ latitude: Number, longitude: Number })\n   */\n  coordinateForPoint(point) {\n    if (Platform.OS === 'android') {\n      return NativeModules.AirMapModule.coordinateForPoint(this._getHandle(), point);\n    } else if (Platform.OS === 'ios') {\n      return this._runCommand('coordinateForPoint', [point]);\n    }\n    return Promise.reject('coordinateForPoint not supported on this platform');\n  }\n\n  _uiManagerCommand(name) {\n    return NativeModules.UIManager[getAirMapName(this.props.provider)].Commands[name];\n  }\n\n  _mapManagerCommand(name) {\n    return NativeModules[`${getAirMapName(this.props.provider)}Manager`][name];\n  }\n\n  _getHandle() {\n    return findNodeHandle(this.map);\n  }\n\n  _runCommand(name, args) {\n    switch (Platform.OS) {\n      case 'android':\n        return NativeModules.UIManager.dispatchViewManagerCommand(\n          this._getHandle(),\n          this._uiManagerCommand(name),\n          args\n        );\n\n      case 'ios':\n        return this._mapManagerCommand(name)(this._getHandle(), ...args);\n\n      default:\n        return Promise.reject(`Invalid platform was passed: ${Platform.OS}`);\n    }\n  }\n\n  render() {\n    let props;\n\n    if (this.state.isReady) {\n      props = {\n        region: null,\n        initialRegion: null,\n        onMarkerPress: this._onMarkerPress,\n        onChange: this._onChange,\n        onMapReady: this._onMapReady,\n        onLayout: this._onLayout,\n        ...this.props,\n      };\n      if (Platform.OS === 'ios' && props.provider === ProviderConstants.PROVIDER_DEFAULT\n        && GOOGLE_MAPS_ONLY_TYPES.includes(props.mapType)) {\n        props.mapType = MAP_TYPES.standard;\n      }\n      props.handlePanDrag = !!props.onPanDrag;\n    } else {\n      props = {\n        style: this.props.style,\n        region: null,\n        initialRegion: null,\n        onMarkerPress: this._onMarkerPress,\n        onChange: this._onChange,\n        onMapReady: this._onMapReady,\n        onLayout: this._onLayout,\n      };\n    }\n\n    if (Platform.OS === 'android' && this.props.liteMode) {\n      return (\n        <AIRMapLite\n          ref={ref => { this.map = ref; }}\n          {...props}\n        />\n      );\n    }\n\n    const AIRMap = getAirMapComponent(this.props.provider);\n\n    return (\n      <AIRMap\n        ref={ref => { this.map = ref; }}\n        {...props}\n      />\n    );\n  }\n}\n\nMapView.propTypes = propTypes;\nMapView.viewConfig = viewConfig;\nMapView.childContextTypes = childContextTypes;\n\nMapView.MAP_TYPES = MAP_TYPES;\n\nconst nativeComponent = Component => requireNativeComponent(Component, MapView, {\n  nativeOnly: {\n    onChange: true,\n    onMapReady: true,\n    onKmlReady: true,\n    handlePanDrag: true,\n  },\n});\nconst airMaps = {\n  default: nativeComponent('AIRMap'),\n};\nif (Platform.OS === 'android') {\n  airMaps.google = airMaps.default;\n} else {\n  airMaps.google = googleMapIsInstalled ? nativeComponent('AIRGoogleMap') :\n    createNotSupportedComponent('react-native-maps: AirGoogleMaps dir must be added to your xCode project to support GoogleMaps on iOS.'); // eslint-disable-line max-len\n}\nconst getAirMapComponent = provider => airMaps[provider || 'default'];\n\nconst AIRMapLite = NativeModules.UIManager.AIRMapLite &&\n  requireNativeComponent('AIRMapLite', MapView, {\n    nativeOnly: {\n      onChange: true,\n      onMapReady: true,\n      handlePanDrag: true,\n    },\n  });\n\nexport const Animated = RNAnimated.createAnimatedComponent(MapView);\n\nexport const ProviderPropType = PropTypes.oneOf(Object.values(ProviderConstants));\n\n/**\n * TODO:\n * All of these properties on MapView are unecessary since they can be imported\n * individually with the es6 exports in index.js. Removing them is a breaking change,\n * but potentially allows for better dead code elimination since references are not\n * kept to components which are never used.\n */\n\nMapView.Marker = MapMarker;\nMapView.Polyline = MapPolyline;\nMapView.Polygon = MapPolygon;\nMapView.Circle = MapCircle;\nMapView.UrlTile = MapUrlTile;\nMapView.LocalTile = MapLocalTile;\nMapView.Overlay = MapOverlay;\nMapView.Callout = MapCallout;\nObject.assign(MapView, ProviderConstants);\nMapView.ProviderPropType = ProviderPropType;\n\nMapView.Animated = Animated;\nMapView.AnimatedRegion = AnimatedRegion;\n\nexport default MapView;\n"]},"metadata":{},"sourceType":"module"}