{"ast":null,"code":"'use strict';\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar infoLog = require(\"../Utilities/infoLog\");\n\nvar invariant = require('fbjs/lib/invariant');\n\nvar DEBUG = false;\n\nclass TaskQueue {\n  constructor(_ref) {\n    var {\n      onMoreTasks\n    } = _ref;\n    this._onMoreTasks = onMoreTasks;\n    this._queueStack = [{\n      tasks: [],\n      popable: false\n    }];\n  }\n\n  enqueue(task) {\n    this._getCurrentQueue().push(task);\n  }\n\n  enqueueTasks(tasks) {\n    tasks.forEach(task => this.enqueue(task));\n  }\n\n  cancelTasks(tasksToCancel) {\n    this._queueStack = this._queueStack.map(queue => _objectSpread(_objectSpread({}, queue), {}, {\n      tasks: queue.tasks.filter(task => tasksToCancel.indexOf(task) === -1)\n    })).filter((queue, idx) => queue.tasks.length > 0 || idx === 0);\n  }\n\n  hasTasksToProcess() {\n    return this._getCurrentQueue().length > 0;\n  }\n\n  processNext() {\n    var queue = this._getCurrentQueue();\n\n    if (queue.length) {\n      var task = queue.shift();\n\n      try {\n        if (task.gen) {\n          DEBUG && infoLog('genPromise for task ' + task.name);\n\n          this._genPromise(task);\n        } else if (task.run) {\n          DEBUG && infoLog('run task ' + task.name);\n          task.run();\n        } else {\n          invariant(typeof task === 'function', 'Expected Function, SimpleTask, or PromiseTask, but got:\\n' + JSON.stringify(task, null, 2));\n          DEBUG && infoLog('run anonymous task');\n          task();\n        }\n      } catch (e) {\n        e.message = 'TaskQueue: Error with task ' + (task.name || '') + ': ' + e.message;\n        throw e;\n      }\n    }\n  }\n\n  _getCurrentQueue() {\n    var stackIdx = this._queueStack.length - 1;\n    var queue = this._queueStack[stackIdx];\n\n    if (queue.popable && queue.tasks.length === 0 && this._queueStack.length > 1) {\n      this._queueStack.pop();\n\n      DEBUG && infoLog('popped queue: ', {\n        stackIdx,\n        queueStackSize: this._queueStack.length\n      });\n      return this._getCurrentQueue();\n    } else {\n      return queue.tasks;\n    }\n  }\n\n  _genPromise(task) {\n    this._queueStack.push({\n      tasks: [],\n      popable: false\n    });\n\n    var stackIdx = this._queueStack.length - 1;\n    DEBUG && infoLog('push new queue: ', {\n      stackIdx\n    });\n    DEBUG && infoLog('exec gen task ' + task.name);\n    task.gen().then(() => {\n      DEBUG && infoLog('onThen for gen task ' + task.name, {\n        stackIdx,\n        queueStackSize: this._queueStack.length\n      });\n      this._queueStack[stackIdx].popable = true;\n      this.hasTasksToProcess() && this._onMoreTasks();\n    }).catch(ex => {\n      ex.message = \"TaskQueue: Error resolving Promise in task \".concat(task.name, \": \").concat(ex.message);\n      throw ex;\n    }).done();\n  }\n\n}\n\nmodule.exports = TaskQueue;","map":{"version":3,"sources":["/Users/ash/Documents/DevSpace/MobileProject/ReactNative/InProgres/InterView/symmetrical-octo-barnacle/node_modules/react-native/Libraries/Interaction/TaskQueue.js"],"names":["infoLog","require","invariant","DEBUG","TaskQueue","constructor","onMoreTasks","_onMoreTasks","_queueStack","tasks","popable","enqueue","task","_getCurrentQueue","push","enqueueTasks","forEach","cancelTasks","tasksToCancel","map","queue","filter","indexOf","idx","length","hasTasksToProcess","processNext","shift","gen","name","_genPromise","run","JSON","stringify","e","message","stackIdx","pop","queueStackSize","then","catch","ex","done","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst infoLog = require('../Utilities/infoLog');\nconst invariant = require('fbjs/lib/invariant');\n\ntype SimpleTask = {\n  name: string,\n  run: () => void,\n};\ntype PromiseTask = {\n  name: string,\n  gen: () => Promise<any>,\n};\nexport type Task = Function | SimpleTask | PromiseTask;\n\nconst DEBUG = false;\n\n/**\n * TaskQueue - A system for queueing and executing a mix of simple callbacks and\n * trees of dependent tasks based on Promises. No tasks are executed unless\n * `processNext` is called.\n *\n * `enqueue` takes a Task object with either a simple `run` callback, or a\n * `gen` function that returns a `Promise` and puts it in the queue.  If a gen\n * function is supplied, then the promise it returns will block execution of\n * tasks already in the queue until it resolves. This can be used to make sure\n * the first task is fully resolved (including asynchronous dependencies that\n * also schedule more tasks via `enqueue`) before starting on the next task.\n * The `onMoreTasks` constructor argument is used to inform the owner that an\n * async task has resolved and that the queue should be processed again.\n *\n * Note: Tasks are only actually executed with explicit calls to `processNext`.\n */\nclass TaskQueue {\n  /**\n   * TaskQueue instances are self contained and independent, so multiple tasks\n   * of varying semantics and priority can operate together.\n   *\n   * `onMoreTasks` is invoked when `PromiseTask`s resolve if there are more\n   * tasks to process.\n   */\n  constructor({onMoreTasks}: {onMoreTasks: () => void}) {\n    this._onMoreTasks = onMoreTasks;\n    this._queueStack = [{tasks: [], popable: false}];\n  }\n\n  /**\n   * Add a task to the queue.  It is recommended to name your tasks for easier\n   * async debugging. Tasks will not be executed until `processNext` is called\n   * explicitly.\n   */\n  enqueue(task: Task): void {\n    this._getCurrentQueue().push(task);\n  }\n\n  enqueueTasks(tasks: Array<Task>): void {\n    tasks.forEach(task => this.enqueue(task));\n  }\n\n  cancelTasks(tasksToCancel: Array<Task>): void {\n    // search through all tasks and remove them.\n    this._queueStack = this._queueStack\n      .map(queue => ({\n        ...queue,\n        tasks: queue.tasks.filter(task => tasksToCancel.indexOf(task) === -1),\n      }))\n      .filter((queue, idx) => queue.tasks.length > 0 || idx === 0);\n  }\n\n  /**\n   * Check to see if `processNext` should be called.\n   *\n   * @returns {boolean} Returns true if there are tasks that are ready to be\n   * processed with `processNext`, or returns false if there are no more tasks\n   * to be processed right now, although there may be tasks in the queue that\n   * are blocked by earlier `PromiseTask`s that haven't resolved yet.\n   * `onMoreTasks` will be called after each `PromiseTask` resolves if there are\n   * tasks ready to run at that point.\n   */\n  hasTasksToProcess(): boolean {\n    return this._getCurrentQueue().length > 0;\n  }\n\n  /**\n   * Executes the next task in the queue.\n   */\n  processNext(): void {\n    const queue = this._getCurrentQueue();\n    if (queue.length) {\n      const task = queue.shift();\n      try {\n        if (task.gen) {\n          DEBUG && infoLog('genPromise for task ' + task.name);\n          this._genPromise((task: any)); // Rather than annoying tagged union\n        } else if (task.run) {\n          DEBUG && infoLog('run task ' + task.name);\n          task.run();\n        } else {\n          invariant(\n            typeof task === 'function',\n            'Expected Function, SimpleTask, or PromiseTask, but got:\\n' +\n              JSON.stringify(task, null, 2),\n          );\n          DEBUG && infoLog('run anonymous task');\n          task();\n        }\n      } catch (e) {\n        e.message =\n          'TaskQueue: Error with task ' + (task.name || '') + ': ' + e.message;\n        throw e;\n      }\n    }\n  }\n\n  _queueStack: Array<{tasks: Array<Task>, popable: boolean}>;\n  _onMoreTasks: () => void;\n\n  _getCurrentQueue(): Array<Task> {\n    const stackIdx = this._queueStack.length - 1;\n    const queue = this._queueStack[stackIdx];\n    if (\n      queue.popable &&\n      queue.tasks.length === 0 &&\n      this._queueStack.length > 1\n    ) {\n      this._queueStack.pop();\n      DEBUG &&\n        infoLog('popped queue: ', {\n          stackIdx,\n          queueStackSize: this._queueStack.length,\n        });\n      return this._getCurrentQueue();\n    } else {\n      return queue.tasks;\n    }\n  }\n\n  _genPromise(task: PromiseTask) {\n    // Each async task pushes it's own queue onto the queue stack. This\n    // effectively defers execution of previously queued tasks until the promise\n    // resolves, at which point we allow the new queue to be popped, which\n    // happens once it is fully processed.\n    this._queueStack.push({tasks: [], popable: false});\n    const stackIdx = this._queueStack.length - 1;\n    DEBUG && infoLog('push new queue: ', {stackIdx});\n    DEBUG && infoLog('exec gen task ' + task.name);\n    task\n      .gen()\n      .then(() => {\n        DEBUG &&\n          infoLog('onThen for gen task ' + task.name, {\n            stackIdx,\n            queueStackSize: this._queueStack.length,\n          });\n        this._queueStack[stackIdx].popable = true;\n        this.hasTasksToProcess() && this._onMoreTasks();\n      })\n      .catch(ex => {\n        ex.message = `TaskQueue: Error resolving Promise in task ${\n          task.name\n        }: ${ex.message}`;\n        throw ex;\n      })\n      .done();\n  }\n}\n\nmodule.exports = TaskQueue;\n"]},"metadata":{},"sourceType":"script"}