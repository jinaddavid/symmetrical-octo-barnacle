{"ast":null,"code":"'use strict';\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nvar EventEmitter = require(\"../vendor/emitter/EventEmitter\");\n\nvar Platform = require(\"./Platform\");\n\nvar RCTDeviceEventEmitter = require(\"../EventEmitter/RCTDeviceEventEmitter\");\n\nvar invariant = require('fbjs/lib/invariant');\n\nvar eventEmitter = new EventEmitter();\nvar dimensionsInitialized = false;\nvar dimensions = {};\n\nclass Dimensions {\n  static set(dims) {\n    if (dims && dims.windowPhysicalPixels) {\n      dims = JSON.parse(JSON.stringify(dims));\n      var windowPhysicalPixels = dims.windowPhysicalPixels;\n      dims.window = {\n        width: windowPhysicalPixels.width / windowPhysicalPixels.scale,\n        height: windowPhysicalPixels.height / windowPhysicalPixels.scale,\n        scale: windowPhysicalPixels.scale,\n        fontScale: windowPhysicalPixels.fontScale\n      };\n\n      if (Platform.OS === 'android') {\n        var screenPhysicalPixels = dims.screenPhysicalPixels;\n        dims.screen = {\n          width: screenPhysicalPixels.width / screenPhysicalPixels.scale,\n          height: screenPhysicalPixels.height / screenPhysicalPixels.scale,\n          scale: screenPhysicalPixels.scale,\n          fontScale: screenPhysicalPixels.fontScale\n        };\n        delete dims.screenPhysicalPixels;\n      } else {\n        dims.screen = dims.window;\n      }\n\n      delete dims.windowPhysicalPixels;\n    }\n\n    _extends(dimensions, dims);\n\n    if (dimensionsInitialized) {\n      eventEmitter.emit('change', {\n        window: dimensions.window,\n        screen: dimensions.screen\n      });\n    } else {\n      dimensionsInitialized = true;\n    }\n  }\n\n  static get(dim) {\n    invariant(dimensions[dim], 'No dimension set for key ' + dim);\n    return dimensions[dim];\n  }\n\n  static addEventListener(type, handler) {\n    invariant(type === 'change', 'Trying to subscribe to unknown event: \"%s\"', type);\n    eventEmitter.addListener(type, handler);\n  }\n\n  static removeEventListener(type, handler) {\n    invariant(type === 'change', 'Trying to remove listener for unknown event: \"%s\"', type);\n    eventEmitter.removeListener(type, handler);\n  }\n\n}\n\nvar dims = global.nativeExtensions && global.nativeExtensions.DeviceInfo && global.nativeExtensions.DeviceInfo.Dimensions;\nvar nativeExtensionsEnabled = true;\n\nif (!dims) {\n  var DeviceInfo = require(\"./DeviceInfo\");\n\n  dims = DeviceInfo.Dimensions;\n  nativeExtensionsEnabled = false;\n}\n\ninvariant(dims, 'Either DeviceInfo native extension or DeviceInfo Native Module must be registered');\nDimensions.set(dims);\n\nif (!nativeExtensionsEnabled) {\n  RCTDeviceEventEmitter.addListener('didUpdateDimensions', function (update) {\n    Dimensions.set(update);\n  });\n}\n\nmodule.exports = Dimensions;","map":{"version":3,"sources":["/Users/ash/Documents/DevSpace/MobileProject/ReactNative/InProgres/InterView/symmetrical-octo-barnacle/node_modules/react-native/Libraries/Utilities/Dimensions.js"],"names":["EventEmitter","require","Platform","RCTDeviceEventEmitter","invariant","eventEmitter","dimensionsInitialized","dimensions","Dimensions","set","dims","windowPhysicalPixels","JSON","parse","stringify","window","width","scale","height","fontScale","OS","screenPhysicalPixels","screen","emit","get","dim","addEventListener","type","handler","addListener","removeEventListener","removeListener","global","nativeExtensions","DeviceInfo","nativeExtensionsEnabled","update","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst EventEmitter = require('../vendor/emitter/EventEmitter');\nconst Platform = require('./Platform');\nconst RCTDeviceEventEmitter = require('../EventEmitter/RCTDeviceEventEmitter');\n\nconst invariant = require('fbjs/lib/invariant');\n\nconst eventEmitter = new EventEmitter();\nlet dimensionsInitialized = false;\nconst dimensions = {};\nclass Dimensions {\n  /**\n   * This should only be called from native code by sending the\n   * didUpdateDimensions event.\n   *\n   * @param {object} dims Simple string-keyed object of dimensions to set\n   */\n  static set(dims: {[key: string]: any}): void {\n    // We calculate the window dimensions in JS so that we don't encounter loss of\n    // precision in transferring the dimensions (which could be non-integers) over\n    // the bridge.\n    if (dims && dims.windowPhysicalPixels) {\n      // parse/stringify => Clone hack\n      dims = JSON.parse(JSON.stringify(dims));\n\n      const windowPhysicalPixels = dims.windowPhysicalPixels;\n      dims.window = {\n        width: windowPhysicalPixels.width / windowPhysicalPixels.scale,\n        height: windowPhysicalPixels.height / windowPhysicalPixels.scale,\n        scale: windowPhysicalPixels.scale,\n        fontScale: windowPhysicalPixels.fontScale,\n      };\n      if (Platform.OS === 'android') {\n        // Screen and window dimensions are different on android\n        const screenPhysicalPixels = dims.screenPhysicalPixels;\n        dims.screen = {\n          width: screenPhysicalPixels.width / screenPhysicalPixels.scale,\n          height: screenPhysicalPixels.height / screenPhysicalPixels.scale,\n          scale: screenPhysicalPixels.scale,\n          fontScale: screenPhysicalPixels.fontScale,\n        };\n\n        // delete so no callers rely on this existing\n        delete dims.screenPhysicalPixels;\n      } else {\n        dims.screen = dims.window;\n      }\n      // delete so no callers rely on this existing\n      delete dims.windowPhysicalPixels;\n    }\n\n    Object.assign(dimensions, dims);\n    if (dimensionsInitialized) {\n      // Don't fire 'change' the first time the dimensions are set.\n      eventEmitter.emit('change', {\n        window: dimensions.window,\n        screen: dimensions.screen,\n      });\n    } else {\n      dimensionsInitialized = true;\n    }\n  }\n\n  /**\n   * Initial dimensions are set before `runApplication` is called so they should\n   * be available before any other require's are run, but may be updated later.\n   *\n   * Note: Although dimensions are available immediately, they may change (e.g\n   * due to device rotation) so any rendering logic or styles that depend on\n   * these constants should try to call this function on every render, rather\n   * than caching the value (for example, using inline styles rather than\n   * setting a value in a `StyleSheet`).\n   *\n   * Example: `var {height, width} = Dimensions.get('window');`\n   *\n   * @param {string} dim Name of dimension as defined when calling `set`.\n   * @returns {Object?} Value for the dimension.\n   */\n  static get(dim: string): Object {\n    invariant(dimensions[dim], 'No dimension set for key ' + dim);\n    return dimensions[dim];\n  }\n\n  /**\n   * Add an event handler. Supported events:\n   *\n   * - `change`: Fires when a property within the `Dimensions` object changes. The argument\n   *   to the event handler is an object with `window` and `screen` properties whose values\n   *   are the same as the return values of `Dimensions.get('window')` and\n   *   `Dimensions.get('screen')`, respectively.\n   */\n  static addEventListener(type: string, handler: Function) {\n    invariant(\n      type === 'change',\n      'Trying to subscribe to unknown event: \"%s\"',\n      type,\n    );\n    eventEmitter.addListener(type, handler);\n  }\n\n  /**\n   * Remove an event handler.\n   */\n  static removeEventListener(type: string, handler: Function) {\n    invariant(\n      type === 'change',\n      'Trying to remove listener for unknown event: \"%s\"',\n      type,\n    );\n    eventEmitter.removeListener(type, handler);\n  }\n}\n\nlet dims: ?{[key: string]: any} =\n  global.nativeExtensions &&\n  global.nativeExtensions.DeviceInfo &&\n  global.nativeExtensions.DeviceInfo.Dimensions;\nlet nativeExtensionsEnabled = true;\nif (!dims) {\n  const DeviceInfo = require('./DeviceInfo');\n  dims = DeviceInfo.Dimensions;\n  nativeExtensionsEnabled = false;\n}\n\ninvariant(\n  dims,\n  'Either DeviceInfo native extension or DeviceInfo Native Module must be registered',\n);\nDimensions.set(dims);\nif (!nativeExtensionsEnabled) {\n  RCTDeviceEventEmitter.addListener('didUpdateDimensions', function(update) {\n    Dimensions.set(update);\n  });\n}\n\nmodule.exports = Dimensions;\n"]},"metadata":{},"sourceType":"script"}