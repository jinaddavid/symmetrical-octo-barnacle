{"ast":null,"code":"'use strict';\n\nvar InspectorAgent = require(\"./InspectorAgent\");\n\nvar JSInspector = require(\"./JSInspector\");\n\nvar Map = require(\"../vendor/core/Map\");\n\nvar XMLHttpRequest = require(\"../Network/XMLHttpRequest\");\n\nclass Interceptor {\n  constructor(agent) {\n    this._agent = agent;\n    this._requests = new Map();\n  }\n\n  getData(requestId) {\n    return this._requests.get(requestId);\n  }\n\n  requestSent(id, url, method, headers) {\n    var requestId = String(id);\n\n    this._requests.set(requestId, '');\n\n    var request = {\n      url,\n      method,\n      headers,\n      initialPriority: 'Medium'\n    };\n    var event = {\n      requestId,\n      documentURL: '',\n      frameId: '1',\n      loaderId: '1',\n      request,\n      timestamp: JSInspector.getTimestamp(),\n      initiator: {\n        type: 'other'\n      },\n      type: 'Other'\n    };\n\n    this._agent.sendEvent('requestWillBeSent', event);\n  }\n\n  responseReceived(id, url, status, headers) {\n    var requestId = String(id);\n    var response = {\n      url,\n      status,\n      statusText: String(status),\n      headers,\n      requestHeaders: {},\n      mimeType: this._getMimeType(headers),\n      connectionReused: false,\n      connectionId: -1,\n      encodedDataLength: 0,\n      securityState: 'unknown'\n    };\n    var event = {\n      requestId,\n      frameId: '1',\n      loaderId: '1',\n      timestamp: JSInspector.getTimestamp(),\n      type: 'Other',\n      response\n    };\n\n    this._agent.sendEvent('responseReceived', event);\n  }\n\n  dataReceived(id, data) {\n    var requestId = String(id);\n    var existingData = this._requests.get(requestId) || '';\n\n    this._requests.set(requestId, existingData.concat(data));\n\n    var event = {\n      requestId,\n      timestamp: JSInspector.getTimestamp(),\n      dataLength: data.length,\n      encodedDataLength: data.length\n    };\n\n    this._agent.sendEvent('dataReceived', event);\n  }\n\n  loadingFinished(id, encodedDataLength) {\n    var event = {\n      requestId: String(id),\n      timestamp: JSInspector.getTimestamp(),\n      encodedDataLength: encodedDataLength\n    };\n\n    this._agent.sendEvent('loadingFinished', event);\n  }\n\n  loadingFailed(id, error) {\n    var event = {\n      requestId: String(id),\n      timestamp: JSInspector.getTimestamp(),\n      type: 'Other',\n      errorText: error\n    };\n\n    this._agent.sendEvent('loadingFailed', event);\n  }\n\n  _getMimeType(headers) {\n    var contentType = headers['Content-Type'] || '';\n    return contentType.split(';')[0];\n  }\n\n}\n\nclass NetworkAgent extends InspectorAgent {\n  enable(_ref) {\n    var {\n      maxResourceBufferSize,\n      maxTotalBufferSize\n    } = _ref;\n    this._interceptor = new Interceptor(this);\n    XMLHttpRequest.setInterceptor(this._interceptor);\n  }\n\n  disable() {\n    XMLHttpRequest.setInterceptor(null);\n    this._interceptor = null;\n  }\n\n  getResponseBody(_ref2) {\n    var {\n      requestId\n    } = _ref2;\n    return {\n      body: this.interceptor().getData(requestId),\n      base64Encoded: false\n    };\n  }\n\n  interceptor() {\n    if (this._interceptor) {\n      return this._interceptor;\n    } else {\n      throw Error('_interceptor can not be null');\n    }\n  }\n\n}\n\nNetworkAgent.DOMAIN = 'Network';\nmodule.exports = NetworkAgent;","map":{"version":3,"sources":["/Users/ash/Documents/DevSpace/MobileProject/ReactNative/InProgres/InterView/symmetrical-octo-barnacle/node_modules/react-native/Libraries/JSInspector/NetworkAgent.js"],"names":["InspectorAgent","require","JSInspector","Map","XMLHttpRequest","Interceptor","constructor","agent","_agent","_requests","getData","requestId","get","requestSent","id","url","method","headers","String","set","request","initialPriority","event","documentURL","frameId","loaderId","timestamp","getTimestamp","initiator","type","sendEvent","responseReceived","status","response","statusText","requestHeaders","mimeType","_getMimeType","connectionReused","connectionId","encodedDataLength","securityState","dataReceived","data","existingData","concat","dataLength","length","loadingFinished","loadingFailed","error","errorText","contentType","split","NetworkAgent","enable","maxResourceBufferSize","maxTotalBufferSize","_interceptor","setInterceptor","disable","getResponseBody","body","interceptor","base64Encoded","Error","DOMAIN","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst InspectorAgent = require('./InspectorAgent');\nconst JSInspector = require('./JSInspector');\nconst Map = require('../vendor/core/Map');\nconst XMLHttpRequest = require('../Network/XMLHttpRequest');\n\nimport type EventSender from './InspectorAgent';\n\ntype RequestId = string;\n\ntype LoaderId = string;\ntype FrameId = string;\ntype Timestamp = number;\n\ntype Headers = Object;\n\n// We don't currently care about this\ntype ResourceTiming = null;\n\ntype ResourceType =\n  | 'Document'\n  | 'Stylesheet'\n  | 'Image'\n  | 'Media'\n  | 'Font'\n  | 'Script'\n  | 'TextTrack'\n  | 'XHR'\n  | 'Fetch'\n  | 'EventSource'\n  | 'WebSocket'\n  | 'Manifest'\n  | 'Other';\n\ntype SecurityState =\n  | 'unknown'\n  | 'neutral'\n  | 'insecure'\n  | 'warning'\n  | 'secure'\n  | 'info';\ntype BlockedReason =\n  | 'csp'\n  | 'mixed-content'\n  | 'origin'\n  | 'inspector'\n  | 'subresource-filter'\n  | 'other';\n\ntype StackTrace = null;\n\ntype Initiator = {\n  type: 'script' | 'other',\n  stackTrace?: StackTrace,\n  url?: string,\n  lineNumber?: number,\n};\n\ntype ResourcePriority = 'VeryLow' | 'Low' | 'Medium' | 'High' | 'VeryHigh';\n\ntype Request = {\n  url: string,\n  method: string,\n  headers: Headers,\n  postData?: string,\n  mixedContentType?: 'blockable' | 'optionally-blockable' | 'none',\n  initialPriority: ResourcePriority,\n};\n\ntype Response = {\n  url: string,\n  status: number,\n  statusText: string,\n  headers: Headers,\n  headersText?: string,\n  mimeType: string,\n  requestHeaders?: Headers,\n  requestHeadersText?: string,\n  connectionReused: boolean,\n  connectionId: number,\n  fromDiskCache?: boolean,\n  encodedDataLength: number,\n  timing?: ResourceTiming,\n  securityState: SecurityState,\n};\n\ntype RequestWillBeSentEvent = {\n  requestId: RequestId,\n  frameId: FrameId,\n  loaderId: LoaderId,\n  documentURL: string,\n  request: Request,\n  timestamp: Timestamp,\n  initiator: Initiator,\n  redirectResponse?: Response,\n  // This is supposed to be optional but the inspector crashes without it,\n  // see https://bugs.chromium.org/p/chromium/issues/detail?id=653138\n  type: ResourceType,\n};\n\ntype ResponseReceivedEvent = {\n  requestId: RequestId,\n  frameId: FrameId,\n  loaderId: LoaderId,\n  timestamp: Timestamp,\n  type: ResourceType,\n  response: Response,\n};\n\ntype DataReceived = {\n  requestId: RequestId,\n  timestamp: Timestamp,\n  dataLength: number,\n  encodedDataLength: number,\n};\n\ntype LoadingFinishedEvent = {\n  requestId: RequestId,\n  timestamp: Timestamp,\n  encodedDataLength: number,\n};\n\ntype LoadingFailedEvent = {\n  requestId: RequestId,\n  timestamp: Timestamp,\n  type: ResourceType,\n  errorText: string,\n  canceled?: boolean,\n  blockedReason?: BlockedReason,\n};\n\nclass Interceptor {\n  _agent: NetworkAgent;\n  _requests: Map<string, string>;\n\n  constructor(agent: NetworkAgent) {\n    this._agent = agent;\n    this._requests = new Map();\n  }\n\n  getData(requestId: string): ?string {\n    return this._requests.get(requestId);\n  }\n\n  requestSent(id: number, url: string, method: string, headers: Object) {\n    const requestId = String(id);\n    this._requests.set(requestId, '');\n\n    const request: Request = {\n      url,\n      method,\n      headers,\n      initialPriority: 'Medium',\n    };\n    const event: RequestWillBeSentEvent = {\n      requestId,\n      documentURL: '',\n      frameId: '1',\n      loaderId: '1',\n      request,\n      timestamp: JSInspector.getTimestamp(),\n      initiator: {\n        // TODO(blom): Get stack trace\n        // If type is 'script' the inspector will try to execute\n        // `stack.callFrames[0]`\n        type: 'other',\n      },\n      type: 'Other',\n    };\n    this._agent.sendEvent('requestWillBeSent', event);\n  }\n\n  responseReceived(id: number, url: string, status: number, headers: Object) {\n    const requestId = String(id);\n    const response: Response = {\n      url,\n      status,\n      statusText: String(status),\n      headers,\n      // TODO(blom) refined headers, can we get this?\n      requestHeaders: {},\n      mimeType: this._getMimeType(headers),\n      connectionReused: false,\n      connectionId: -1,\n      encodedDataLength: 0,\n      securityState: 'unknown',\n    };\n\n    const event: ResponseReceivedEvent = {\n      requestId,\n      frameId: '1',\n      loaderId: '1',\n      timestamp: JSInspector.getTimestamp(),\n      type: 'Other',\n      response,\n    };\n    this._agent.sendEvent('responseReceived', event);\n  }\n\n  dataReceived(id: number, data: string) {\n    const requestId = String(id);\n    const existingData = this._requests.get(requestId) || '';\n    this._requests.set(requestId, existingData.concat(data));\n    const event: DataReceived = {\n      requestId,\n      timestamp: JSInspector.getTimestamp(),\n      dataLength: data.length,\n      encodedDataLength: data.length,\n    };\n    this._agent.sendEvent('dataReceived', event);\n  }\n\n  loadingFinished(id: number, encodedDataLength: number) {\n    const event: LoadingFinishedEvent = {\n      requestId: String(id),\n      timestamp: JSInspector.getTimestamp(),\n      encodedDataLength: encodedDataLength,\n    };\n    this._agent.sendEvent('loadingFinished', event);\n  }\n\n  loadingFailed(id: number, error: string) {\n    const event: LoadingFailedEvent = {\n      requestId: String(id),\n      timestamp: JSInspector.getTimestamp(),\n      type: 'Other',\n      errorText: error,\n    };\n    this._agent.sendEvent('loadingFailed', event);\n  }\n\n  _getMimeType(headers: Object): string {\n    const contentType = headers['Content-Type'] || '';\n    return contentType.split(';')[0];\n  }\n}\n\ntype EnableArgs = {\n  maxResourceBufferSize?: number,\n  maxTotalBufferSize?: number,\n};\n\nclass NetworkAgent extends InspectorAgent {\n  static DOMAIN = 'Network';\n\n  _sendEvent: EventSender;\n  _interceptor: ?Interceptor;\n\n  enable({maxResourceBufferSize, maxTotalBufferSize}: EnableArgs) {\n    this._interceptor = new Interceptor(this);\n    XMLHttpRequest.setInterceptor(this._interceptor);\n  }\n\n  disable() {\n    XMLHttpRequest.setInterceptor(null);\n    this._interceptor = null;\n  }\n\n  getResponseBody({\n    requestId,\n  }: {\n    requestId: RequestId,\n  }): {body: ?string, base64Encoded: boolean} {\n    return {body: this.interceptor().getData(requestId), base64Encoded: false};\n  }\n\n  interceptor(): Interceptor {\n    if (this._interceptor) {\n      return this._interceptor;\n    } else {\n      throw Error('_interceptor can not be null');\n    }\n  }\n}\n\nmodule.exports = NetworkAgent;\n"]},"metadata":{},"sourceType":"script"}