{"ast":null,"code":"'use strict';\n\nvar Systrace = require(\"../Performance/Systrace\");\n\nvar infoLog = require(\"./infoLog\");\n\nvar performanceNow = global.nativeQPLTimestamp || global.nativePerformanceNow || require('fbjs/lib/performanceNow');\n\nvar timespans = {};\nvar extras = {};\nvar cookies = {};\nvar PRINT_TO_CONSOLE = false;\nvar PerformanceLogger = {\n  addTimespan(key, lengthInMs, description) {\n    if (timespans[key]) {\n      if (__DEV__) {\n        infoLog('PerformanceLogger: Attempting to add a timespan that already exists ', key);\n      }\n\n      return;\n    }\n\n    timespans[key] = {\n      description: description,\n      totalTime: lengthInMs\n    };\n  },\n\n  startTimespan(key, description) {\n    if (timespans[key]) {\n      if (__DEV__) {\n        infoLog('PerformanceLogger: Attempting to start a timespan that already exists ', key);\n      }\n\n      return;\n    }\n\n    timespans[key] = {\n      description: description,\n      startTime: performanceNow()\n    };\n    cookies[key] = Systrace.beginAsyncEvent(key);\n\n    if (PRINT_TO_CONSOLE) {\n      infoLog('PerformanceLogger.js', 'start: ' + key);\n    }\n  },\n\n  stopTimespan(key) {\n    var timespan = timespans[key];\n\n    if (!timespan || !timespan.startTime) {\n      if (__DEV__) {\n        infoLog('PerformanceLogger: Attempting to end a timespan that has not started ', key);\n      }\n\n      return;\n    }\n\n    if (timespan.endTime) {\n      if (__DEV__) {\n        infoLog('PerformanceLogger: Attempting to end a timespan that has already ended ', key);\n      }\n\n      return;\n    }\n\n    timespan.endTime = performanceNow();\n    timespan.totalTime = timespan.endTime - (timespan.startTime || 0);\n\n    if (PRINT_TO_CONSOLE) {\n      infoLog('PerformanceLogger.js', 'end: ' + key);\n    }\n\n    Systrace.endAsyncEvent(key, cookies[key]);\n    delete cookies[key];\n  },\n\n  clear() {\n    timespans = {};\n    extras = {};\n\n    if (PRINT_TO_CONSOLE) {\n      infoLog('PerformanceLogger.js', 'clear');\n    }\n  },\n\n  clearCompleted() {\n    for (var _key in timespans) {\n      if (timespans[_key].totalTime) {\n        delete timespans[_key];\n      }\n    }\n\n    extras = {};\n\n    if (PRINT_TO_CONSOLE) {\n      infoLog('PerformanceLogger.js', 'clearCompleted');\n    }\n  },\n\n  clearExceptTimespans(keys) {\n    timespans = Object.keys(timespans).reduce(function (previous, key) {\n      if (keys.indexOf(key) !== -1) {\n        previous[key] = timespans[key];\n      }\n\n      return previous;\n    }, {});\n    extras = {};\n\n    if (PRINT_TO_CONSOLE) {\n      infoLog('PerformanceLogger.js', 'clearExceptTimespans', keys);\n    }\n  },\n\n  currentTimestamp() {\n    return performanceNow();\n  },\n\n  getTimespans() {\n    return timespans;\n  },\n\n  hasTimespan(key) {\n    return !!timespans[key];\n  },\n\n  logTimespans() {\n    for (var _key2 in timespans) {\n      if (timespans[_key2].totalTime) {\n        infoLog(_key2 + ': ' + timespans[_key2].totalTime + 'ms');\n      }\n    }\n  },\n\n  addTimespans(newTimespans, labels) {\n    for (var ii = 0, l = newTimespans.length; ii < l; ii += 2) {\n      var label = labels[ii / 2];\n      PerformanceLogger.addTimespan(label, newTimespans[ii + 1] - newTimespans[ii], label);\n    }\n  },\n\n  setExtra(key, value) {\n    if (extras[key]) {\n      if (__DEV__) {\n        infoLog('PerformanceLogger: Attempting to set an extra that already exists ', {\n          key,\n          currentValue: extras[key],\n          attemptedValue: value\n        });\n      }\n\n      return;\n    }\n\n    extras[key] = value;\n  },\n\n  getExtras() {\n    return extras;\n  },\n\n  logExtras() {\n    infoLog(extras);\n  }\n\n};\nmodule.exports = PerformanceLogger;","map":{"version":3,"sources":["/Users/ash/Documents/DevSpace/MobileProject/ReactNative/InProgres/InterView/symmetrical-octo-barnacle/node_modules/react-native/Libraries/Utilities/PerformanceLogger.js"],"names":["Systrace","require","infoLog","performanceNow","global","nativeQPLTimestamp","nativePerformanceNow","timespans","extras","cookies","PRINT_TO_CONSOLE","PerformanceLogger","addTimespan","key","lengthInMs","description","__DEV__","totalTime","startTimespan","startTime","beginAsyncEvent","stopTimespan","timespan","endTime","endAsyncEvent","clear","clearCompleted","clearExceptTimespans","keys","Object","reduce","previous","indexOf","currentTimestamp","getTimespans","hasTimespan","logTimespans","addTimespans","newTimespans","labels","ii","l","length","label","setExtra","value","currentValue","attemptedValue","getExtras","logExtras","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n'use strict';\n\nconst Systrace = require('../Performance/Systrace');\n\nconst infoLog = require('./infoLog');\nconst performanceNow =\n  global.nativeQPLTimestamp ||\n  global.nativePerformanceNow ||\n  require('fbjs/lib/performanceNow');\n\ntype Timespan = {\n  description?: string,\n  totalTime?: number,\n  startTime?: number,\n  endTime?: number,\n};\n\nlet timespans: {[key: string]: Timespan} = {};\nlet extras: {[key: string]: any} = {};\nconst cookies: {[key: string]: number} = {};\n\nconst PRINT_TO_CONSOLE: false = false; // Type as false to prevent accidentally committing `true`;\n\n/**\n * This is meant to collect and log performance data in production, which means\n * it needs to have minimal overhead.\n */\nconst PerformanceLogger = {\n  addTimespan(key: string, lengthInMs: number, description?: string) {\n    if (timespans[key]) {\n      if (__DEV__) {\n        infoLog(\n          'PerformanceLogger: Attempting to add a timespan that already exists ',\n          key,\n        );\n      }\n      return;\n    }\n\n    timespans[key] = {\n      description: description,\n      totalTime: lengthInMs,\n    };\n  },\n\n  startTimespan(key: string, description?: string) {\n    if (timespans[key]) {\n      if (__DEV__) {\n        infoLog(\n          'PerformanceLogger: Attempting to start a timespan that already exists ',\n          key,\n        );\n      }\n      return;\n    }\n\n    timespans[key] = {\n      description: description,\n      startTime: performanceNow(),\n    };\n    cookies[key] = Systrace.beginAsyncEvent(key);\n    if (PRINT_TO_CONSOLE) {\n      infoLog('PerformanceLogger.js', 'start: ' + key);\n    }\n  },\n\n  stopTimespan(key: string) {\n    const timespan = timespans[key];\n    if (!timespan || !timespan.startTime) {\n      if (__DEV__) {\n        infoLog(\n          'PerformanceLogger: Attempting to end a timespan that has not started ',\n          key,\n        );\n      }\n      return;\n    }\n    if (timespan.endTime) {\n      if (__DEV__) {\n        infoLog(\n          'PerformanceLogger: Attempting to end a timespan that has already ended ',\n          key,\n        );\n      }\n      return;\n    }\n\n    timespan.endTime = performanceNow();\n    timespan.totalTime = timespan.endTime - (timespan.startTime || 0);\n    if (PRINT_TO_CONSOLE) {\n      infoLog('PerformanceLogger.js', 'end: ' + key);\n    }\n\n    Systrace.endAsyncEvent(key, cookies[key]);\n    delete cookies[key];\n  },\n\n  clear() {\n    timespans = {};\n    extras = {};\n    if (PRINT_TO_CONSOLE) {\n      infoLog('PerformanceLogger.js', 'clear');\n    }\n  },\n\n  clearCompleted() {\n    for (const key in timespans) {\n      if (timespans[key].totalTime) {\n        delete timespans[key];\n      }\n    }\n    extras = {};\n    if (PRINT_TO_CONSOLE) {\n      infoLog('PerformanceLogger.js', 'clearCompleted');\n    }\n  },\n\n  clearExceptTimespans(keys: Array<string>) {\n    timespans = Object.keys(timespans).reduce(function(previous, key) {\n      if (keys.indexOf(key) !== -1) {\n        previous[key] = timespans[key];\n      }\n      return previous;\n    }, {});\n    extras = {};\n    if (PRINT_TO_CONSOLE) {\n      infoLog('PerformanceLogger.js', 'clearExceptTimespans', keys);\n    }\n  },\n\n  currentTimestamp() {\n    return performanceNow();\n  },\n\n  getTimespans() {\n    return timespans;\n  },\n\n  hasTimespan(key: string) {\n    return !!timespans[key];\n  },\n\n  logTimespans() {\n    for (const key in timespans) {\n      if (timespans[key].totalTime) {\n        infoLog(key + ': ' + timespans[key].totalTime + 'ms');\n      }\n    }\n  },\n\n  addTimespans(newTimespans: Array<number>, labels: Array<string>) {\n    for (let ii = 0, l = newTimespans.length; ii < l; ii += 2) {\n      const label = labels[ii / 2];\n      PerformanceLogger.addTimespan(\n        label,\n        newTimespans[ii + 1] - newTimespans[ii],\n        label,\n      );\n    }\n  },\n\n  setExtra(key: string, value: any) {\n    if (extras[key]) {\n      if (__DEV__) {\n        infoLog(\n          'PerformanceLogger: Attempting to set an extra that already exists ',\n          {key, currentValue: extras[key], attemptedValue: value},\n        );\n      }\n      return;\n    }\n    extras[key] = value;\n  },\n\n  getExtras() {\n    return extras;\n  },\n\n  logExtras() {\n    infoLog(extras);\n  },\n};\n\nmodule.exports = PerformanceLogger;\n"]},"metadata":{},"sourceType":"script"}