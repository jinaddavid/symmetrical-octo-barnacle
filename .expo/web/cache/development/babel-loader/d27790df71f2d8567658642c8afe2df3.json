{"ast":null,"code":"'use strict';\n\nvar EventEmitter = require(\"../vendor/emitter/EventEmitter\");\n\nvar EventSubscriptionVendor = require(\"../vendor/emitter/EventSubscriptionVendor\");\n\nfunction checkNativeEventModule(eventType) {\n  if (eventType) {\n    if (eventType.lastIndexOf('statusBar', 0) === 0) {\n      throw new Error('`' + eventType + '` event should be registered via the StatusBarIOS module');\n    }\n\n    if (eventType.lastIndexOf('keyboard', 0) === 0) {\n      throw new Error('`' + eventType + '` event should be registered via the Keyboard module');\n    }\n\n    if (eventType === 'appStateDidChange' || eventType === 'memoryWarning') {\n      throw new Error('`' + eventType + '` event should be registered via the AppState module');\n    }\n  }\n}\n\nclass RCTDeviceEventEmitter extends EventEmitter {\n  constructor() {\n    var sharedSubscriber = new EventSubscriptionVendor();\n    super(sharedSubscriber);\n    this.sharedSubscriber = sharedSubscriber;\n  }\n\n  addListener(eventType, listener, context) {\n    if (__DEV__) {\n      checkNativeEventModule(eventType);\n    }\n\n    return super.addListener(eventType, listener, context);\n  }\n\n  removeAllListeners(eventType) {\n    if (__DEV__) {\n      checkNativeEventModule(eventType);\n    }\n\n    super.removeAllListeners(eventType);\n  }\n\n  removeSubscription(subscription) {\n    if (subscription.emitter !== this) {\n      subscription.emitter.removeSubscription(subscription);\n    } else {\n      super.removeSubscription(subscription);\n    }\n  }\n\n}\n\nmodule.exports = new RCTDeviceEventEmitter();","map":{"version":3,"sources":["/Users/ash/Documents/DevSpace/MobileProject/ReactNative/InProgres/InterView/symmetrical-octo-barnacle/node_modules/react-native/Libraries/EventEmitter/RCTDeviceEventEmitter.js"],"names":["EventEmitter","require","EventSubscriptionVendor","checkNativeEventModule","eventType","lastIndexOf","Error","RCTDeviceEventEmitter","constructor","sharedSubscriber","addListener","listener","context","__DEV__","removeAllListeners","removeSubscription","subscription","emitter","module","exports"],"mappings":"AAUA;;AAEA,IAAMA,YAAY,GAAGC,OAAO,kCAA5B;;AACA,IAAMC,uBAAuB,GAAGD,OAAO,6CAAvC;;AAIA,SAASE,sBAAT,CAAgCC,SAAhC,EAAoD;AAClD,MAAIA,SAAJ,EAAe;AACb,QAAIA,SAAS,CAACC,WAAV,CAAsB,WAAtB,EAAmC,CAAnC,MAA0C,CAA9C,EAAiD;AAC/C,YAAM,IAAIC,KAAJ,CACJ,MACEF,SADF,GAEE,0DAHE,CAAN;AAKD;;AACD,QAAIA,SAAS,CAACC,WAAV,CAAsB,UAAtB,EAAkC,CAAlC,MAAyC,CAA7C,EAAgD;AAC9C,YAAM,IAAIC,KAAJ,CACJ,MACEF,SADF,GAEE,sDAHE,CAAN;AAKD;;AACD,QAAIA,SAAS,KAAK,mBAAd,IAAqCA,SAAS,KAAK,eAAvD,EAAwE;AACtE,YAAM,IAAIE,KAAJ,CACJ,MACEF,SADF,GAEE,sDAHE,CAAN;AAKD;AACF;AACF;;AAMD,MAAMG,qBAAN,SAAoCP,YAApC,CAAiD;AAG/CQ,EAAAA,WAAW,GAAG;AACZ,QAAMC,gBAAgB,GAAG,IAAIP,uBAAJ,EAAzB;AACA,UAAMO,gBAAN;AACA,SAAKA,gBAAL,GAAwBA,gBAAxB;AACD;;AAEDC,EAAAA,WAAW,CACTN,SADS,EAETO,QAFS,EAGTC,OAHS,EAIY;AACrB,QAAIC,OAAJ,EAAa;AACXV,MAAAA,sBAAsB,CAACC,SAAD,CAAtB;AACD;;AACD,WAAO,MAAMM,WAAN,CAAkBN,SAAlB,EAA6BO,QAA7B,EAAuCC,OAAvC,CAAP;AACD;;AAEDE,EAAAA,kBAAkB,CAACV,SAAD,EAAqB;AACrC,QAAIS,OAAJ,EAAa;AACXV,MAAAA,sBAAsB,CAACC,SAAD,CAAtB;AACD;;AACD,UAAMU,kBAAN,CAAyBV,SAAzB;AACD;;AAEDW,EAAAA,kBAAkB,CAACC,YAAD,EAAoC;AACpD,QAAIA,YAAY,CAACC,OAAb,KAAyB,IAA7B,EAAmC;AACjCD,MAAAA,YAAY,CAACC,OAAb,CAAqBF,kBAArB,CAAwCC,YAAxC;AACD,KAFD,MAEO;AACL,YAAMD,kBAAN,CAAyBC,YAAzB;AACD;AACF;;AAjC8C;;AAoCjDE,MAAM,CAACC,OAAP,GAAiB,IAAIZ,qBAAJ,EAAjB","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst EventEmitter = require('../vendor/emitter/EventEmitter');\nconst EventSubscriptionVendor = require('../vendor/emitter/EventSubscriptionVendor');\n\nimport type EmitterSubscription from '../vendor/emitter/EmitterSubscription';\n\nfunction checkNativeEventModule(eventType: ?string) {\n  if (eventType) {\n    if (eventType.lastIndexOf('statusBar', 0) === 0) {\n      throw new Error(\n        '`' +\n          eventType +\n          '` event should be registered via the StatusBarIOS module',\n      );\n    }\n    if (eventType.lastIndexOf('keyboard', 0) === 0) {\n      throw new Error(\n        '`' +\n          eventType +\n          '` event should be registered via the Keyboard module',\n      );\n    }\n    if (eventType === 'appStateDidChange' || eventType === 'memoryWarning') {\n      throw new Error(\n        '`' +\n          eventType +\n          '` event should be registered via the AppState module',\n      );\n    }\n  }\n}\n\n/**\n * Deprecated - subclass NativeEventEmitter to create granular event modules instead of\n * adding all event listeners directly to RCTDeviceEventEmitter.\n */\nclass RCTDeviceEventEmitter extends EventEmitter {\n  sharedSubscriber: EventSubscriptionVendor;\n\n  constructor() {\n    const sharedSubscriber = new EventSubscriptionVendor();\n    super(sharedSubscriber);\n    this.sharedSubscriber = sharedSubscriber;\n  }\n\n  addListener(\n    eventType: string,\n    listener: Function,\n    context: ?Object,\n  ): EmitterSubscription {\n    if (__DEV__) {\n      checkNativeEventModule(eventType);\n    }\n    return super.addListener(eventType, listener, context);\n  }\n\n  removeAllListeners(eventType: ?string) {\n    if (__DEV__) {\n      checkNativeEventModule(eventType);\n    }\n    super.removeAllListeners(eventType);\n  }\n\n  removeSubscription(subscription: EmitterSubscription) {\n    if (subscription.emitter !== this) {\n      subscription.emitter.removeSubscription(subscription);\n    } else {\n      super.removeSubscription(subscription);\n    }\n  }\n}\n\nmodule.exports = new RCTDeviceEventEmitter();\n"]},"metadata":{},"sourceType":"script"}